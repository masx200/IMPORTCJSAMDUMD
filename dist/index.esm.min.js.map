{"version":3,"file":"index.esm.min.js","sources":["../src/dynamicimportshim.js","../src/coreload.js","../src/IMPORTCJSAMDUMD.js"],"sourcesContent":["\"use strict\";\r\n// import { createBlob } from \"./createblob.js\";\r\nexport { createBlob };\r\n\r\nfunction createBlob(source) {\r\n  return URL.createObjectURL(\r\n    new Blob([source], { type: \"application/javascript\" })\r\n  );\r\n}\r\n//\r\n/*  */\r\nlet dynamicimportshimfun = (() => {\r\n  \"use strict\";\r\n  const 参数必须为字符串 = \"参数必须为字符串\";\r\n  const 字符串不能为空 = \"字符串不能为空\";\r\n\r\n  let dynamicimportshim;\r\n  try {\r\n    dynamicimportshim = Function(\"u\", \"return import(u)\");\r\n    // throw Error();\r\n  } catch (error) {\r\n    dynamicimportshim = async function(url) {\r\n      if (url === \"\") {\r\n        throw new TypeError(字符串不能为空);\r\n      }\r\n      if (typeof url !== \"string\") {\r\n        throw new TypeError(参数必须为字符串);\r\n      }\r\n      url = new URL(url).href;\r\n      function getnewimportpromise() {\r\n        return new Promise((resolve, reject) => {\r\n          const s = document.createElement(\"script\");\r\n          function clearsideeffect() {\r\n            removescript(s);\r\n            removeerrorlisten(errorhandler);\r\n            // window.removeEventListener(\"error\", errorhandler);\r\n            URL.revokeObjectURL(s.src);\r\n          }\r\n          function removeerrorlisten(f) {\r\n            try {\r\n              window.removeEventListener(\"error\", f);\r\n            } catch (error) {\r\n              //\r\n            }\r\n          }\r\n          function removescript(e) {\r\n            try {\r\n              document.head.removeChild(e);\r\n            } catch (error) {\r\n              //\r\n            }\r\n          }\r\n          function errorhandler(e) {\r\n            /*\r\n              edge中第二次加载输出这个错误\r\n              Error: fetch import module failed */\r\n            console.warn(e.error);\r\n            reject(e.error);\r\n            /*\r\n            removescript(s);\r\n            removeerrorlisten(errorhandler);\r\n            // window.removeEventListener(\"error\", errorhandler);\r\n    URL.revokeObjectURL(s.src)      \r\n    */\r\n            clearsideeffect();\r\n          }\r\n          window.addEventListener(\"error\", errorhandler);\r\n          const topLevelBlobUrl = createBlob(\r\n            `import*as m from'${url}';\\nwindow[Symbol.for('${\"import-\" +\r\n              url}')]=m`\r\n            /* TypeError: Unable to set property 'Symbol(import-https://cdn.staticfile.org/vue/2.6.10/vue.esm.browser.min.js)' of undefined or null reference at Anonymous function (blob:http://127.0.0.1:8080/4f31c6d8-3282-4466-b04b-9952068d51e0:2:1) at module (blob:http://127.0.0.1:8080/4f31c6d8-3282-4466-b04b-9952068d51e0:1:1) */\r\n            // `import*as m from'${url}';\\ndocument.currentScript[Symbol.for('${\"import-\" +\r\n            //   url}')]=m`\r\n          );\r\n\r\n          s.type = \"module\";\r\n          s.src = topLevelBlobUrl;\r\n          s.async = true;\r\n\r\n          // const\r\n          s.onload = () => {\r\n            // resolve(s[Symbol.for(\"import-\" + url)]);\r\n            // Reflect.deleteProperty(s, Symbol.for(\"import-\" + url));\r\n            resolve(window[Symbol.for(\"import-\" + url)]);\r\n            Reflect.deleteProperty(window, Symbol.for(\"import-\" + url));\r\n            // document.head.removeChild(s);\r\n            // try {\r\n            //   document.head.removeChild(s);\r\n            // } catch (error) {\r\n            //   //\r\n            // }\r\n            /* removescript(s);\r\n            removeerrorlisten(errorhandler);\r\n            // window.removeEventListener(\"error\", errorhandler);\r\n       \r\n    URL.revokeObjectURL(s.src)\r\n    */\r\n            clearsideeffect();\r\n          };\r\n          s.onerror = () => {\r\n            /* 网络错误触发这个error */\r\n            /* TypeError: Failed to fetch dynamically imported module\r\n            TypeError: error loading dynamically imported module */\r\n            // edge中第1次加载输出这个错误\r\n            //e是EVENT!\r\n            // console.warn(e);\r\n            reject(new Error(\"import load failed from network\" + url));\r\n            /* EDGE浏览器中先触发onerror事件! */\r\n            /* 在chrome和firefox中则不是 */\r\n            /* TypeError: Failed to resolve module specifier \"vue\". Relative references must start with either \"/\", \"./\", or \"../\". */\r\n            /* TypeError: \"Error resolving module specifier: vue\" */\r\n            // document.head.removeChild(s);\r\n            // window.removeEventListener(\"error\", errorhandler);\r\n            /*  removeerrorlisten(errorhandler);\r\n            // try {\r\n            //   document.head.removeChild(s);\r\n            // } catch (error) {\r\n            //   //\r\n            // }\r\n            removescript(s);\r\n        \r\n    URL.revokeObjectURL(s.src)\r\n    */\r\n            clearsideeffect();\r\n          };\r\n          document.head.appendChild(s);\r\n        });\r\n      }\r\n      return await getnewimportpromise();\r\n    };\r\n  }\r\n\r\n  return dynamicimportshim;\r\n})();\r\n\r\n//export default dynamicimportshim;\r\nexport default dynamicimportshimfun;\r\n","const GLOBALPACKAGESTORE = \"PACKAGESTORE\";\r\nimport IMPORTCJSAMDUMD, {\r\n  //   IMPORTCJSAMDUMD,\r\n  定义default,\r\n  assertstring,\r\n  define,\r\n  myrequirefun //as require\r\n} from \"./IMPORTCJSAMDUMD.js\";\r\nconst 字符串不能为空 = \"字符串不能为空\";\r\nconst 加载的模块没有输出 = \"加载的模块没有输出\";\r\nconst namesymbol = Symbol.for(\"name\");\r\n\r\nconst urlsymbol = Symbol.for(\"url\");\r\n\r\nconst sourcesymbol = Symbol.for(\"source\");\r\nimport dynamicimportshim from \"./dynamicimportshim.js\";\r\nexport default //\r\n\r\n/*  */\r\n\r\n//\r\n(url, packagename) => {\r\n  //   return (function() {\r\n  return new Promise(主核心加载模块函数);\r\n  //   })();\r\n\r\n  function 主核心加载模块函数(resolve, reject) {\r\n    return ((resolve, reject) => {\r\n      (async () => {\r\n        try {\r\n          await (async () => {\r\n            let fetchpromisetext;\r\n            try {\r\n              try {\r\n                fetchpromisetext = await fetch(url).then(response => {\r\n                  if (!response.ok) {\r\n                    throw new Error(\"fetch failed \" + url);\r\n                  }\r\n                  return response.text();\r\n                });\r\n              } catch (e) {\r\n                console.warn(e);\r\n                reject(e);\r\n                return;\r\n              }\r\n              try {\r\n                await (async scripttext => {\r\n                  let moduletype;\r\n                  const exports = {\r\n                    exports: {\r\n                      [Symbol.toStringTag]: \"Module\"\r\n                    }\r\n                  };\r\n                  const module = {\r\n                    exports: {}\r\n                  };\r\n                  define.exports = {};\r\n                  //   let exportmodule = [{}, {}, {}];\r\n                  var modulesrcfun;\r\n                  const moduleexport = {\r\n                    // [namesymbol]: packagename,\r\n                    default: undefined\r\n                    // [urlsymbol]: url,\r\n                    // [sourcesymbol]: modulesrcfun\r\n                  };\r\n\r\n                  try {\r\n                    // exportmodule =\r\n\r\n                    (function(\r\n                      myrequirefun,\r\n                      define,\r\n                      module,\r\n                      exports,\r\n                      scripttext\r\n                    ) {\r\n                      const 模块加载函数 = new Function(\r\n                        \"require\",\r\n                        \"define\",\r\n                        \"module\",\r\n                        \"exports\",\r\n                        `\"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\n`\r\n                        // `\"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\nreturn [exports, module.exports, define.exports]; `\r\n                      );\r\n                      modulesrcfun = 模块加载函数.toString();\r\n                      return 模块加载函数.call(\r\n                        module.exports,\r\n\r\n                        urlorname => {\r\n                          assertstring(urlorname);\r\n                          urlorname = String(urlorname);\r\n                          if (urlorname === \"\") {\r\n                            throw new TypeError(字符串不能为空);\r\n                          }\r\n                          function getbaseurl(url) {\r\n                            var objurl = new URL(url);\r\n                            var a = objurl.pathname.split(\"/\");\r\n                            a[a.length - 1] = \"\";\r\n                            var path = objurl.origin + a.join(\"/\");\r\n                            return path;\r\n                          }\r\n\r\n                          function 格式化url(baseurl, urlorname) {\r\n                            if (\r\n                              String(urlorname).startsWith(\"./\") ||\r\n                              String(urlorname).startsWith(\"../\")\r\n                            ) {\r\n                              if (\r\n                                !(\r\n                                  String(urlorname).endsWith(\".js\") ||\r\n                                  urlorname.endsWith(\".mjs\") ||\r\n                                  urlorname.endsWith(\".json\") ||\r\n                                  urlorname.endsWith(\".css\") ||\r\n                                  urlorname.endsWith(\".html\")\r\n                                )\r\n                              ) {\r\n                                urlorname += \".js\";\r\n                              }\r\n                              urlorname = new URL(baseurl + urlorname).href;\r\n                            }\r\n\r\n                            return urlorname;\r\n                          }\r\n                          const baseurl = getbaseurl(url);\r\n\r\n                          urlorname = 格式化url(baseurl, urlorname);\r\n\r\n                          return myrequirefun(urlorname);\r\n                        },\r\n\r\n                        // require\r\n\r\n                        define,\r\n                        module,\r\n                        exports.exports\r\n                        /* 如果在函数内修改exports的值,则无法获取输出,只能在修改exports的属性的时候,获取到 */\r\n                      );\r\n                    })(myrequirefun, define, module, exports, scripttext);\r\n                    const exportmodule = [\r\n                      exports.exports ? exports.exports : {},\r\n                      module.exports ? module.exports : {},\r\n                      define.exports ? define.exports : {}\r\n                    ];\r\n                    处理非es模块(moduleexport, exportmodule);\r\n                    moduletype = \"cjs\";\r\n                  } catch (e) {\r\n                    console.warn(e);\r\n                    try {\r\n                      moduleexport.default = JSON.parse(scripttext);\r\n                      console.log(\"检测到json模块 \" + url);\r\n                      modulesrcfun = scripttext;\r\n                      moduletype = \"json\";\r\n                    } catch (error) {\r\n                      console.warn(error);\r\n                      if (\r\n                        // (\r\n                        e instanceof SyntaxError\r\n\r\n                        //   &&\r\n                        //   /* chrome浏览器报错信息 */\r\n                        //   e.message === \"Unexpected token export\") ||\r\n                        // /* edge浏览器报错不同 */\r\n                        // \"Syntax error\" === e.message ||\r\n                        // /* 火狐浏览器报错不同 */\r\n                        // \"export declarations may only appear at top level of a module\" ===\r\n                        //   e.message\r\n                      ) {\r\n                        // const topLevelBlobUrl = createBlob(\r\n                        //   `\"use strict\";\\n/* ${url} */;\\nexport*as default from'${url}';\\n/* ${url} */;\\n `\r\n                        // );\r\n                        const topLevelBlobUrl = url;\r\n                        //   modulesrcfun = topLevelBlobUrl;\r\n                        modulesrcfun = scripttext;\r\n                        try {\r\n                          const exportdefault = await dynamicimportshim(\r\n                            topLevelBlobUrl\r\n                          );\r\n                          moduletype = \"esm\";\r\n                          // var module__exportdefault = exportdefault.default;\r\n\r\n                          Object.keys(exportdefault)\r\n                            .filter(t => t !== \"default\")\r\n                            .forEach(key => {\r\n                              Object.defineProperty(moduleexport, key, {\r\n                                enumerable: true,\r\n                                get() {\r\n                                  return exportdefault[key];\r\n                                }\r\n                              });\r\n                            });\r\n\r\n                          定义default(\r\n                            moduleexport,\r\n                            exportdefault.default\r\n                              ? exportdefault.default\r\n                              : exportdefault\r\n                          );\r\n                        } catch (e) {\r\n                          console.warn(e);\r\n                          reject(e);\r\n                          return;\r\n                        }\r\n                        if (typeof moduleexport.default === \"undefined\") {\r\n                          //   moduleexport[urlsymbol] = url;\r\n                          console.warn(加载的模块没有输出, packagename, url);\r\n                          // resolve(moduleexport);\r\n                          reject(\r\n                            Error(\r\n                              加载的模块没有输出 + \" \" + packagename + \" \" + url\r\n                            )\r\n                          );\r\n                          return;\r\n                        }\r\n                      } else {\r\n                        console.warn(e);\r\n                        reject(e);\r\n                        return;\r\n                      }\r\n                    }\r\n                    /* 如果是个json的话,也会报错 SyntaxError*/\r\n                    /*  如果是es模块,则使用dynamicimportshim加载*/\r\n\r\n                    // reject(e);\r\n                    // return;\r\n                  }\r\n                  function 处理非es模块(moduleexport, exportmodule) {\r\n                    if (typeof exportmodule === \"undefined\") {\r\n                      exportmodule = [{}, {}, {}];\r\n                    }\r\n                    if (typeof define.exports === \"undefined\") {\r\n                      define.exports = {};\r\n                    }\r\n                    function 非空对象(o) {\r\n                      return (\r\n                        typeof o !== \"object\" ||\r\n                        Object.keys(o).length ||\r\n                        JSON.stringify(o) !== \"{}\"\r\n                      );\r\n                    }\r\n                    if (\r\n                      非空对象(exportmodule[0])\r\n                      //   typeof exportmodule[0] !== \"object\" ||\r\n                      //   Object.keys(exportmodule[0]).length ||\r\n                      //   JSON.stringify(exportmodule[0]) !== \"{}\"\r\n                    ) {\r\n                      // console.log(\"检测到umd模块\", url, packagename);\r\n\r\n                      const exportdefault = exportmodule[0];\r\n                      定义default(moduleexport, exportdefault);\r\n                      // Object.defineProperty(moduleexport, \"default\", {\r\n                      //   enumerable: true,\r\n\r\n                      //   get() {\r\n                      //     return exportdefault;\r\n                      //   }\r\n                      // });\r\n                      // moduleexport.default = exportmodule[0];\r\n                    } else if (\r\n                      非空对象(exportmodule[1])\r\n                      //   typeof exportmodule[1] !== \"object\" ||\r\n                      //   Object.keys(exportmodule[1]).length ||\r\n                      //   JSON.stringify(exportmodule[1]) !== \"{}\"\r\n                    ) {\r\n                      // console.log(\"检测到cjs模块\", url, packagename);\r\n                      // moduleexport.default = exportmodule[1];\r\n                      const exportdefault = exportmodule[1];\r\n\r\n                      定义default(moduleexport, exportdefault);\r\n                      // Object.defineProperty(moduleexport, \"default\", {\r\n                      //   enumerable: true,\r\n\r\n                      //   get() {\r\n                      //     return exportdefault;\r\n                      //   }\r\n                      // });\r\n                    } else if (\r\n                      非空对象(exportmodule[2])\r\n                      //   typeof exportmodule[2] !== \"object\" ||\r\n                      //   Object.keys(exportmodule[2]).length ||\r\n                      //   JSON.stringify(exportmodule[2]) !== \"{}\"\r\n                    ) {\r\n                      // console.log(\"检测到amd模块\", url, packagename);\r\n                      // moduleexport.default = exportmodule[2];\r\n                      const exportdefault = exportmodule[2];\r\n                      // Object.defineProperty(moduleexport, \"default\", {\r\n                      //   enumerable: true,\r\n\r\n                      //   get() {\r\n                      //     return exportdefault;\r\n                      //   }\r\n                      // });\r\n                      定义default(moduleexport, exportdefault);\r\n                    } else {\r\n                      //   moduleexport[urlsymbol] = url;\r\n                      console.warn(加载的模块没有输出, url, packagename);\r\n                      // resolve(moduleexport);\r\n                      reject(\r\n                        Error(\r\n                          加载的模块没有输出 + \" \" + packagename + \" \" + url\r\n                        )\r\n                      );\r\n                      return;\r\n                    }\r\n                  }\r\n                  // const moduleexport = {\r\n                  //   // [namesymbol]: packagename,\r\n                  //   default: undefined\r\n                  //   // [urlsymbol]: url,\r\n                  //   // [sourcesymbol]: modulesrcfun\r\n                  // };\r\n\r\n                  Object.defineProperties(moduleexport, {\r\n                    [namesymbol]: {\r\n                      value: packagename,\r\n                      // configurable: true,\r\n                      writable: true,\r\n                      enumerable: false\r\n                    },\r\n                    [urlsymbol]: {\r\n                      value: url,\r\n                      // configurable: true,\r\n                      //   writable: true,\r\n                      enumerable: false\r\n                    },\r\n                    [sourcesymbol]: {\r\n                      //   value: packagename,\r\n                      //   get() {\r\n                      //     return modulesrcfun;\r\n                      //   },\r\n                      value: modulesrcfun,\r\n                      //   configurable: true,\r\n                      //   writable: true,\r\n                      enumerable: false\r\n                    },\r\n                    [Symbol.for(\"type\")]: {\r\n                      value: moduletype,\r\n                      enumerable: false\r\n                    }\r\n                  });\r\n                  if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\r\n                    Object.defineProperty(moduleexport, Symbol.toStringTag, {\r\n                      //   enumerable:t,\r\n                      value: \"Module\"\r\n                    });\r\n                  }\r\n\r\n                  if (typeof moduleexport.default !== \"undefined\") {\r\n                    if (typeof packagename !== \"undefined\") {\r\n                      // moduleexport[namesymbol] = packagename;\r\n                      IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][\r\n                        packagename\r\n                      ] = moduleexport;\r\n                    }\r\n                    // else {\r\n                    //   packagename = url;\r\n                    //   IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][\r\n                    //     packagename\r\n                    //   ] = moduleexport;\r\n                    // }\r\n                  }\r\n                  // moduleexport[urlsymbol] = url;\r\n\r\n                  /*\r\n                      if (typeof moduleexport.default !== \"undefined\") {\r\n                        // if (typeof moduleexport[namesymbol] !== \"undefined\") {\r\n                        // }\r\n                      }\r\n      \r\n      */\r\n                  /*\r\n      else \r\n      {\r\n                        //   moduleexport[urlsymbol] = url;\r\n                        console.warn(加载的模块没有输出, packagename, url);\r\n                        // resolve(moduleexport);\r\n                        reject(Error(加载的模块没有输出 + packagename + url));\r\n                        return;\r\n                      }\r\n                      */\r\n\r\n                  /* 加载完成之后， IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][                            url]*/\r\n                  /* 复制一份 */\r\n                  IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url] =\r\n                    IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\r\n                  // IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url][namesymbol] = url;\r\n                  !!moduleexport.default &&\r\n                    Object.keys(moduleexport.default)\r\n                      .filter(t => t !== \"default\")\r\n                      .forEach(key => {\r\n                        /* TypeError: Cannot redefine property: md5 */\r\n                        try {\r\n                          Object.defineProperty(moduleexport, key, {\r\n                            enumerable: true,\r\n                            get() {\r\n                              return moduleexport.default[key];\r\n                            }\r\n                          });\r\n                        } catch (error) {\r\n                          //\r\n                        }\r\n                      });\r\n\r\n                  resolve(moduleexport);\r\n                  return;\r\n                })(fetchpromisetext);\r\n              } catch (e) {\r\n                console.warn(e);\r\n                reject(e);\r\n                return;\r\n              }\r\n            } catch (e) {\r\n              console.warn(e);\r\n              reject(e);\r\n              return;\r\n            }\r\n          })();\r\n        } catch (e) {\r\n          console.warn(e);\r\n          reject(e);\r\n          return;\r\n        }\r\n      })();\r\n    })(resolve, reject);\r\n  }\r\n};\r\n","const 传入的参数必须是个object = \"传入的参数必须是个object\";\r\nconst 模块仓库中没有找到 =\r\n  \"Cannot find module in packagestore, 模块仓库中没有找到, \";\r\nfunction newobjjson(obj) {\r\n  if (typeof obj !== \"object\") {\r\n    throw new TypeError(\r\n      // \"传入的参数必须是个object!\"\r\n      传入的参数必须是个object\r\n    );\r\n  }\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\nasync function 同时发起多个(a) {\r\n  return await Promise.all(\r\n    Array.from(a).map(e => {\r\n      return IMPORTCJSAMDUMD(e[0], e[1]);\r\n    })\r\n  );\r\n}\r\nfunction isurl(url) {\r\n  var flag = false;\r\n  try {\r\n    if (url === \"\") {\r\n      throw new TypeError(字符串不能为空);\r\n    }\r\n    if (typeof url !== \"string\") {\r\n      throw new TypeError(参数必须为字符串);\r\n    }\r\n\r\n    url = new URL(url).href;\r\n    flag = true;\r\n  } catch (error) {\r\n    flag = false;\r\n  }\r\n  return flag;\r\n}\r\nfunction isArray(a) {\r\n  return (\r\n    typeof a === \"object\" &&\r\n    Array.isArray(a) &&\r\n    Object.prototype.toString.call(a) === \"[object Array]\"\r\n  );\r\n}\r\n\r\nfunction getmodule(packagename) {\r\n  \"use strict\";\r\n\r\n  if (packagename === \"\") {\r\n    throw new TypeError(字符串不能为空);\r\n  }\r\n  if (typeof packagename !== \"string\") {\r\n    throw new TypeError(参数必须为字符串);\r\n  }\r\n  const findpackage = IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\r\n  if (findpackage) {\r\n    // console.log(\"在模块仓库中找到了\", packagename, findpackage[urlsymbol]);\r\n    //   return { ...findpackage };\r\n\r\n    return new Proxy(findpackage, {\r\n      // ownKeys(target) {\r\n      //   return [...Object.keys(target), Symbol.toStringTag];\r\n      // },\r\n      // has(target, name) {\r\n      //   // console.log('has' + name);\r\n\r\n      //   if (typeof name === \"symbol\") {\r\n      //     return false;\r\n      //   }\r\n      //   return Reflect.has(target, name);\r\n      // },\r\n      // get(target, propertyKey) {\r\n      //   //   if (typeof propertyKey === \"symbol\") {\r\n      //   //     return;\r\n      //   //   }\r\n      //   // console.log('GET ' + propertyKey);\r\n      //   return Reflect.get(target, propertyKey); // [propertyKey];\r\n      // },\r\n      set() {\r\n        return false;\r\n      },\r\n      deleteProperty() {\r\n        // console.log('delete' + name);\r\n        // return Reflect.deleteProperty(target, name);\r\n        return false;\r\n      }\r\n    });\r\n  } else {\r\n    throw new Error(模块仓库中没有找到 + packagename);\r\n  }\r\n}\r\nconst GLOBALPACKAGESTORE = \"PACKAGESTORE\";\r\nfunction isobject(o) {\r\n  return (\r\n    typeof o === \"object\" &&\r\n    Object.prototype.toString.call(o) === \"[object Object]\" &&\r\n    o.__proto__ === Object.prototype\r\n  );\r\n}\r\nconst 参数必须为字符串 = \"参数必须为字符串\";\r\n(\"use strict\");\r\nconst 字符串不能为空 = \"字符串不能为空\";\r\n// import dynamicimportshim from \"./dynamicimportshim.js\";\r\n// import { createBlob } from \"./createblob.js\";\r\nimport coreload from \"./coreload.js\";\r\nexport let myrequirefun = function requireinstead(packagename) {\r\n  \"use strict\";\r\n  if (packagename === \"\") {\r\n    throw new TypeError(字符串不能为空);\r\n  }\r\n  if (typeof packagename !== \"string\") {\r\n    throw new TypeError(参数必须为字符串);\r\n  }\r\n\r\n  const findpackage = IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\r\n  if (findpackage) {\r\n    // console.log(\"在模块仓库中找到了\", packagename, findpackage[urlsymbol]);\r\n    return findpackage.default;\r\n  } else {\r\n    let errormes = new Error(模块仓库中没有找到 + packagename);\r\n\r\n    errormes.urlorname = packagename;\r\n    throw errormes;\r\n    // throw new Error(\r\n    //   `Cannot find module in packagestore, 模块仓库中没有找到, ` + packagename\r\n    // );\r\n  }\r\n};\r\n\r\n// export define(a,b,c){\r\nexport { define };\r\ndefine.exports = {};\r\nfunction isFunction(it) {\r\n  const op = Object.prototype;\r\n  const ostring = op.toString;\r\n  return \"function\" === typeof it && ostring.call(it) === \"[object Function]\";\r\n}\r\nfunction define(name, deps, callback) {\r\n  \"use strict\";\r\n  define.exports = {};\r\n\r\n  define.amd = true;\r\n  const defineglobalDefQueue = [];\r\n  /*\r\n  const op = Object.prototype;\r\n  const ostring = op.toString;\r\n*/\r\n  // function isArray(it) {\r\n  //   const a = it;\r\n  //   return Array.isArray(a) && ostring.call(it) === \"[object Array]\";\r\n  // }\r\n\r\n  if (typeof name !== \"string\") {\r\n    callback = deps;\r\n    deps = name;\r\n    name = null;\r\n  }\r\n  if (!isArray(deps)) {\r\n    callback = deps;\r\n    deps = null;\r\n  }\r\n  if (!deps && isFunction(callback)) {\r\n    deps = [];\r\n  }\r\n\r\n  // if (0) {\r\n  //   //\r\n  // } else\r\n\r\n  //   {\r\n  defineglobalDefQueue.push([name, deps, callback]);\r\n  //   }\r\n  // console.log(\"检测到amd模块\", defineglobalDefQueue[0]);\r\n  const canshu = defineglobalDefQueue[0][1].map(e => myrequirefun(e));\r\n  define.exports = defineglobalDefQueue[0][2](...canshu);\r\n}\r\ndefine.amd = true;\r\n// }\r\nexport function assertstring(s) {\r\n  if (s === \"\") {\r\n    throw new TypeError(字符串不能为空);\r\n  }\r\n  if (typeof s !== \"string\") {\r\n    throw new TypeError(参数必须为字符串);\r\n  }\r\n  return true;\r\n}\r\nexport function 定义default(target, def) {\r\n  /* 如果模块的输出是一个模块 */\r\n  if (def[Symbol.toStringTag] === \"Module\" && def.default) {\r\n    def = def.default;\r\n  }\r\n  // def[Symbol.toStringTag]===\"Module\"?\r\n  // def=def.default\r\n  // :;\r\n\r\n  Object.defineProperty(target, \"default\", {\r\n    enumerable: true,\r\n    // writable: true,\r\n    // configurable: true,\r\n    get() {\r\n      return def;\r\n    }\r\n  });\r\n}\r\n// export default IMPORTCJSAMDUMD; /* global  */\r\nconst IMPORTCJSAMDUMD = (() => {\r\n  \"use strict\";\r\n\r\n  const 补充加载依赖的模块网址 = \"补充加载依赖的模块网址\";\r\n\r\n  //   const 加载的模块没有输出 = \"加载的模块没有输出\";\r\n\r\n  const 输入的类型错误输入的类型必须是字符串或者数组或对象 =\r\n    \"输入的类型错误,输入的类型必须是字符串或者数组或对象\";\r\n  const 非法字符串 = \"输入的类型错误,输入的字符串不能为空,url不能为undefined\";\r\n\r\n  const namesymbol = Symbol.for(\"name\");\r\n\r\n  const urlsymbol = Symbol.for(\"url\");\r\n\r\n  //   const sourcesymbol = Symbol.for(\"source\");\r\n\r\n  // const globalDefQueue = \"globalDefQueue\";\r\n  const IMPORTCJSAMDUMD = importcjsamdumd;\r\n  // if (\"object\" == typeof exports && \"undefined\" != typeof module) {\r\n  //   module.exports = importcjsamdumd;\r\n  // } else {\r\n  //   // global.IMPORTCJSAMDUMD = importcjsamdumd;\r\n  // }\r\n\r\n  IMPORTCJSAMDUMD[GLOBALPACKAGESTORE] =\r\n    IMPORTCJSAMDUMD[GLOBALPACKAGESTORE] || {};\r\n  //  myrequirefun = requireinstead;\r\n\r\n  //   define.exports = {};\r\n  //   function define(name, deps, callback) {\r\n  //     \"use strict\";\r\n  //     define.exports = {};\r\n\r\n  //     define.amd = true;\r\n  //     const defineglobalDefQueue = [];\r\n  //     const op = Object.prototype;\r\n  //     const ostring = op.toString;\r\n  //     // function isArray(it) {\r\n  //     //   const a = it;\r\n  //     //   return Array.isArray(a) && ostring.call(it) === \"[object Array]\";\r\n  //     // }\r\n  //     function isFunction(it) {\r\n  //       return ostring.call(it) === \"[object Function]\";\r\n  //     }\r\n  //     if (typeof name !== \"string\") {\r\n  //       callback = deps;\r\n  //       deps = name;\r\n  //       name = null;\r\n  //     }\r\n  //     if (!isArray(deps)) {\r\n  //       callback = deps;\r\n  //       deps = null;\r\n  //     }\r\n  //     if (!deps && isFunction(callback)) {\r\n  //       deps = [];\r\n  //     }\r\n\r\n  //     // if (0) {\r\n  //     //   //\r\n  //     // } else\r\n\r\n  //     {\r\n  //       defineglobalDefQueue.push([name, deps, callback]);\r\n  //     }\r\n  //     // console.log(\"检测到amd模块\", defineglobalDefQueue[0]);\r\n  //     const canshu = defineglobalDefQueue[0][1].map(e => require(e));\r\n  //     define.exports = defineglobalDefQueue[0][2](...canshu);\r\n  //   }\r\n  //   define.amd = true;\r\n\r\n  async function importcjsamdumd(...inarguments /* url */) {\r\n    const initialtry = oldimportcjsamdumd(...inarguments);\r\n    // async function handleerror(e){\r\n\r\n    // }\r\n    const handleerror = async e => {\r\n      console.warn(e);\r\n      if (e.urlorname) {\r\n        if (isurl(e.urlorname)) {\r\n          console.log(补充加载依赖的模块网址, e.urlorname);\r\n\r\n          // initialtry.catch(handleerror);\r\n          await importcjsamdumd(e.urlorname);\r\n          // initialtry.catch(handleerror);\r\n        } else {\r\n          if (\r\n            isobject(inarguments[0]) &&\r\n            Reflect.has(inarguments[0], e.urlorname)\r\n          ) {\r\n            try {\r\n              await importcjsamdumd(...inarguments);\r\n            } catch (error) {\r\n              console.warn(error);\r\n              throw e;\r\n            }\r\n          } else {\r\n            throw e;\r\n          }\r\n\r\n          // return await importcjsamdumd(...inarguments);\r\n        }\r\n      } else {\r\n        throw e;\r\n      }\r\n      return await importcjsamdumd(...inarguments);\r\n    };\r\n\r\n    // return await oldimportcjsamdumd(...inarguments)\r\n    return await initialtry.catch(\r\n      //   async e => {\r\n      //   console.warn(e);\r\n\r\n      //   if (isurl(e.urlorname)) {\r\n      //     console.log(\"补充加载依赖的模块网址\", e.urlorname);\r\n      //     await importcjsamdumd(e.urlorname);\r\n      //   }\r\n      //   return await oldimportcjsamdumd(...arguments);\r\n      // }\r\n      handleerror\r\n    );\r\n  }\r\n\r\n  async function oldimportcjsamdumd(url, packagename) {\r\n    (\"use strict\");\r\n\r\n    if (isobject(url)) {\r\n      return await (async url => {\r\n        url = newobjjson(url);\r\n        const 输入参数array = Object.keys(url).map(key => {\r\n          const packageurl = url[key];\r\n          const packagenm = key;\r\n          return [packageurl, packagenm];\r\n        });\r\n        let suoyouimportpromise = [];\r\n\r\n        try {\r\n          suoyouimportpromise = await 同时发起多个(输入参数array);\r\n          // suoyouimportpromise = await Promise.all(\r\n          //   输入参数array.map(e => {\r\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\r\n          //   })\r\n          // );\r\n        } catch (error) {\r\n          console.warn(error);\r\n          suoyouimportpromise = await 同时发起多个(输入参数array);\r\n          // suoyouimportpromise = await Promise.all(\r\n          //   输入参数array.map(e => {\r\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\r\n          //   })\r\n          // );\r\n        } finally {\r\n          suoyouimportpromise = await 同时发起多个(输入参数array);\r\n          // suoyouimportpromise = await Promise.all(\r\n          //   输入参数array.map(e => {\r\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\r\n          //   })\r\n          // );\r\n        }\r\n        let objecttoreturn = {};\r\n        suoyouimportpromise.forEach(m => {\r\n          objecttoreturn[m[namesymbol]] = m;\r\n        });\r\n        return objecttoreturn;\r\n      })(url);\r\n    } else if (\r\n      (isArray(url) && typeof url === \"object\") ||\r\n      typeof packagename === \"object\"\r\n    ) {\r\n      /*\r\n  \r\n  \r\n  \r\n  \r\n        Array(...arguments).forEach(e => {\r\n          const url = e[0];\r\n          let packagename = e[1];\r\n          if (typeof url === \"undefined\" || url === \"\" || packagename === \"\") {\r\n            throw new Error(\r\n              \"输入的类型错误,输入的字符串不能为空,url不能为undefined\"\r\n            );\r\n          }\r\n          if (typeof packagename === \"undefined\") {\r\n            packagename = new URL(url).href;\r\n          }\r\n        });\r\n  \r\n  \r\n  \r\n  */\r\n\r\n      return await (async (...args) => {\r\n        async function 同时发起多个字符串(a) {\r\n          return await Promise.all(\r\n            Array.from(a).map(e => {\r\n              return IMPORTCJSAMDUMD(e);\r\n            })\r\n          );\r\n        }\r\n        let suoyouimportpromise = [];\r\n        const 传入参数arr = JSON.parse(JSON.stringify(Array(...args).flat()));\r\n        // async function 同时发起多个(a) {\r\n        //   return await Promise.all(\r\n        //     a.map(e => {\r\n        //       return IMPORTCJSAMDUMD(e[0], e[1]);\r\n        //     })\r\n        //   );\r\n        // }\r\n        try {\r\n          suoyouimportpromise = await 同时发起多个字符串(传入参数arr);\r\n          // suoyouimportpromise = await Promise.all(\r\n          //   Array(...arguments).map(e => {\r\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\r\n          //   })\r\n          // );\r\n        } catch (error) {\r\n          console.warn(error);\r\n          suoyouimportpromise = await 同时发起多个字符串(传入参数arr);\r\n          // suoyouimportpromise = await Promise.all(\r\n          //   Array(...arguments).map(e => {\r\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\r\n          //   })\r\n          // );\r\n        } finally {\r\n          suoyouimportpromise = await 同时发起多个字符串(传入参数arr);\r\n          // suoyouimportpromise = await Promise.all(\r\n          //   Array(...arguments).map(e => {\r\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\r\n          //   })\r\n          // );\r\n        }\r\n        return suoyouimportpromise;\r\n      })(...arguments);\r\n    } else if (typeof url === \"string\" || typeof packagename === \"string\") {\r\n      assertstring(url);\r\n      // assertstring(packagename);\r\n      return await (async (url, packagename) => {\r\n        if (typeof url === \"undefined\" || url === \"\" || packagename === \"\") {\r\n          throw new TypeError(\r\n            // \"输入的类型错误,输入的字符串不能为空,url不能为undefined\"\r\n            非法字符串\r\n          );\r\n        }\r\n        if (typeof packagename === \"undefined\") {\r\n          packagename = new URL(url).href;\r\n        }\r\n        url = new URL(url).href;\r\n\r\n        if (\r\n          typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename] !==\r\n            \"undefined\" &&\r\n          typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename].default !==\r\n            \"undefined\" &&\r\n          IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename][urlsymbol] === url\r\n        ) {\r\n          // return IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\r\n          // return await new Promise(resolve => {\r\n          //   resolve(IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename]);\r\n          // });\r\n          return getmodule(packagename);\r\n        } else if (\r\n          typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url] !== \"undefined\" &&\r\n          typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url].default !==\r\n            \"undefined\" &&\r\n          IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url][urlsymbol] === url\r\n        ) {\r\n          /* 如果先用url作为名称加载，后用packagename加载，则复制一份 */\r\n          IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename] =\r\n            IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url];\r\n\r\n          IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename][\r\n            namesymbol\r\n          ] = packagename;\r\n          // return IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url];\r\n          return getmodule(url);\r\n        } else {\r\n          return await coreload(url, packagename);\r\n          /* \r\n     const 主核心加载模块函数 = coreload(url, packagename);\r\n          return await new Promise(\r\n            主核心加载模块函数\r\n*/\r\n          //             (resolve, reject) => {\r\n          //             (async () => {\r\n          //               try {\r\n          //                 await (async () => {\r\n          //                   let fetchpromisetext;\r\n          //                   try {\r\n          //                     try {\r\n          //                       fetchpromisetext = await fetch(url).then(response => {\r\n          //                         if (!response.ok) {\r\n          //                           throw new Error(\"fetch failed \" + url);\r\n          //                         }\r\n          //                         return response.text();\r\n          //                       });\r\n          //                     } catch (e) {\r\n          //                       console.warn(e);\r\n          //                       reject(e);\r\n          //                       return;\r\n          //                     }\r\n          //                     try {\r\n          //                       await (async scripttext => {\r\n          //                         const exports = {\r\n          //                           exports: {\r\n          //                             [Symbol.toStringTag]: \"Module\"\r\n          //                           }\r\n          //                         };\r\n          //                         const module = {\r\n          //                           exports: {}\r\n          //                         };\r\n          //                         define.exports = {};\r\n          //                         //   let exportmodule = [{}, {}, {}];\r\n          //                         var modulesrcfun;\r\n          //                         const moduleexport = {\r\n          //                           // [namesymbol]: packagename,\r\n          //                           default: undefined\r\n          //                           // [urlsymbol]: url,\r\n          //                           // [sourcesymbol]: modulesrcfun\r\n          //                         };\r\n          //                         try {\r\n          //                           // exportmodule =\r\n\r\n          //                           (function(\r\n          //                             require,\r\n          //                             define,\r\n          //                             module,\r\n          //                             exports,\r\n          //                             scripttext\r\n          //                           ) {\r\n          //                             const 模块加载函数 = new Function(\r\n          //                               \"require\",\r\n          //                               \"define\",\r\n          //                               \"module\",\r\n          //                               \"exports\",\r\n          //                               `\"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\n`\r\n          //                               // `\"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\nreturn [exports, module.exports, define.exports]; `\r\n          //                             );\r\n          //                             modulesrcfun = 模块加载函数;\r\n          //                             return 模块加载函数.call(\r\n          //                               module.exports,\r\n\r\n          //                               urlorname => {\r\n          //                                 assertstring(urlorname);\r\n          //                                 urlorname = String(urlorname);\r\n          //                                 if (urlorname === \"\") {\r\n          //                                   throw new TypeError(字符串不能为空);\r\n          //                                 }\r\n          //                                 function getbaseurl(url) {\r\n          //                                   var objurl = new URL(url);\r\n          //                                   var a = objurl.pathname.split(\"/\");\r\n          //                                   a[a.length - 1] = \"\";\r\n          //                                   var path = objurl.origin + a.join(\"/\");\r\n          //                                   return path;\r\n          //                                 }\r\n\r\n          //                                 function 格式化url(baseurl, urlorname) {\r\n          //                                   if (\r\n          //                                     String(urlorname).startsWith(\"./\") ||\r\n          //                                     String(urlorname).startsWith(\"../\")\r\n          //                                   ) {\r\n          //                                     if (!String(urlorname).endsWith(\".js\")) {\r\n          //                                       urlorname += \".js\";\r\n          //                                     }\r\n          //                                     urlorname = new URL(baseurl + urlorname)\r\n          //                                       .href;\r\n          //                                   }\r\n\r\n          //                                   return urlorname;\r\n          //                                 }\r\n          //                                 const baseurl = getbaseurl(url);\r\n\r\n          //                                 urlorname = 格式化url(baseurl, urlorname);\r\n\r\n          //                                 return require(urlorname);\r\n          //                               },\r\n\r\n          //                               // require\r\n\r\n          //                               define,\r\n          //                               module,\r\n          //                               exports.exports\r\n          //                               /* 如果在函数内修改exports的值,则无法获取输出,只能在修改exports的属性的时候,获取到 */\r\n          //                             );\r\n          //                           })(require, define, module, exports, scripttext);\r\n          //                           const exportmodule = [\r\n          //                             exports.exports ? exports.exports : {},\r\n          //                             module.exports ? module.exports : {},\r\n          //                             define.exports ? define.exports : {}\r\n          //                           ];\r\n          //                           处理非es模块(exportmodule);\r\n          //                         } catch (e) {\r\n          //                           /*  如果是es模块,则使用dynamicimportshim加载*/\r\n          //                           if (\r\n          //                             // (\r\n          //                             e instanceof SyntaxError\r\n\r\n          //                             //   &&\r\n          //                             //   /* chrome浏览器报错信息 */\r\n          //                             //   e.message === \"Unexpected token export\") ||\r\n          //                             // /* edge浏览器报错不同 */\r\n          //                             // \"Syntax error\" === e.message ||\r\n          //                             // /* 火狐浏览器报错不同 */\r\n          //                             // \"export declarations may only appear at top level of a module\" ===\r\n          //                             //   e.message\r\n          //                           ) {\r\n          //                             // const topLevelBlobUrl = createBlob(\r\n          //                             //   `\"use strict\";\\n/* ${url} */;\\nexport*as default from'${url}';\\n/* ${url} */;\\n `\r\n          //                             // );\r\n          //                             const topLevelBlobUrl = url;\r\n          //                             modulesrcfun = topLevelBlobUrl;\r\n          //                             try {\r\n          //                               const exportdefault = await dynamicimportshim(\r\n          //                                 topLevelBlobUrl\r\n          //                               );\r\n          //                               // var module__exportdefault = exportdefault.default;\r\n          //                               定义default(\r\n          //                                 moduleexport,\r\n          //                                 exportdefault.default\r\n          //                                   ? exportdefault.default\r\n          //                                   : exportdefault\r\n          //                               );\r\n          //                             } catch (e) {\r\n          //                               console.warn(e);\r\n          //                               reject(e);\r\n          //                               return;\r\n          //                             }\r\n          //                             if (typeof moduleexport.default === \"undefined\") {\r\n          //                               //   moduleexport[urlsymbol] = url;\r\n          //                               console.warn(\r\n          //                                 加载的模块没有输出,\r\n          //                                 packagename,\r\n          //                                 url\r\n          //                               );\r\n          //                               // resolve(moduleexport);\r\n          //                               reject(\r\n          //                                 Error(\r\n          //                                   加载的模块没有输出 +\r\n          //                                     \" \" +\r\n          //                                     packagename +\r\n          //                                     \" \" +\r\n          //                                     url\r\n          //                                 )\r\n          //                               );\r\n          //                               return;\r\n          //                             }\r\n          //                           } else {\r\n          //                             console.warn(e);\r\n          //                             reject(e);\r\n          //                             return;\r\n          //                           }\r\n          //                           // reject(e);\r\n          //                           // return;\r\n          //                         }\r\n          //                         function 处理非es模块(exportmodule) {\r\n          //                           if (typeof exportmodule === \"undefined\") {\r\n          //                             exportmodule = [{}, {}, {}];\r\n          //                           }\r\n          //                           if (typeof define.exports === \"undefined\") {\r\n          //                             define.exports = {};\r\n          //                           }\r\n          //                           function 非空对象(o) {\r\n          //                             return (\r\n          //                               typeof o !== \"object\" ||\r\n          //                               Object.keys(o).length ||\r\n          //                               JSON.stringify(o) !== \"{}\"\r\n          //                             );\r\n          //                           }\r\n          //                           if (\r\n          //                             非空对象(exportmodule[0])\r\n          //                             //   typeof exportmodule[0] !== \"object\" ||\r\n          //                             //   Object.keys(exportmodule[0]).length ||\r\n          //                             //   JSON.stringify(exportmodule[0]) !== \"{}\"\r\n          //                           ) {\r\n          //                             // console.log(\"检测到umd模块\", url, packagename);\r\n\r\n          //                             const exportdefault = exportmodule[0];\r\n          //                             定义default(moduleexport, exportdefault);\r\n          //                             // Object.defineProperty(moduleexport, \"default\", {\r\n          //                             //   enumerable: true,\r\n\r\n          //                             //   get() {\r\n          //                             //     return exportdefault;\r\n          //                             //   }\r\n          //                             // });\r\n          //                             // moduleexport.default = exportmodule[0];\r\n          //                           } else if (\r\n          //                             非空对象(exportmodule[1])\r\n          //                             //   typeof exportmodule[1] !== \"object\" ||\r\n          //                             //   Object.keys(exportmodule[1]).length ||\r\n          //                             //   JSON.stringify(exportmodule[1]) !== \"{}\"\r\n          //                           ) {\r\n          //                             // console.log(\"检测到cjs模块\", url, packagename);\r\n          //                             // moduleexport.default = exportmodule[1];\r\n          //                             const exportdefault = exportmodule[1];\r\n\r\n          //                             定义default(moduleexport, exportdefault);\r\n          //                             // Object.defineProperty(moduleexport, \"default\", {\r\n          //                             //   enumerable: true,\r\n\r\n          //                             //   get() {\r\n          //                             //     return exportdefault;\r\n          //                             //   }\r\n          //                             // });\r\n          //                           } else if (\r\n          //                             非空对象(exportmodule[2])\r\n          //                             //   typeof exportmodule[2] !== \"object\" ||\r\n          //                             //   Object.keys(exportmodule[2]).length ||\r\n          //                             //   JSON.stringify(exportmodule[2]) !== \"{}\"\r\n          //                           ) {\r\n          //                             // console.log(\"检测到amd模块\", url, packagename);\r\n          //                             // moduleexport.default = exportmodule[2];\r\n          //                             const exportdefault = exportmodule[2];\r\n          //                             // Object.defineProperty(moduleexport, \"default\", {\r\n          //                             //   enumerable: true,\r\n\r\n          //                             //   get() {\r\n          //                             //     return exportdefault;\r\n          //                             //   }\r\n          //                             // });\r\n          //                             定义default(moduleexport, exportdefault);\r\n          //                           } else {\r\n          //                             //   moduleexport[urlsymbol] = url;\r\n          //                             console.warn(加载的模块没有输出, url, packagename);\r\n          //                             // resolve(moduleexport);\r\n          //                             reject(\r\n          //                               Error(\r\n          //                                 加载的模块没有输出 +\r\n          //                                   \" \" +\r\n          //                                   packagename +\r\n          //                                   \" \" +\r\n          //                                   url\r\n          //                               )\r\n          //                             );\r\n          //                             return;\r\n          //                           }\r\n          //                         }\r\n          //                         // const moduleexport = {\r\n          //                         //   // [namesymbol]: packagename,\r\n          //                         //   default: undefined\r\n          //                         //   // [urlsymbol]: url,\r\n          //                         //   // [sourcesymbol]: modulesrcfun\r\n          //                         // };\r\n\r\n          //                         Object.defineProperties(moduleexport, {\r\n          //                           [namesymbol]: {\r\n          //                             value: packagename,\r\n          //                             // configurable: true,\r\n          //                             writable: true,\r\n          //                             enumerable: false\r\n          //                           },\r\n          //                           [urlsymbol]: {\r\n          //                             value: url,\r\n          //                             // configurable: true,\r\n          //                             writable: true,\r\n          //                             enumerable: false\r\n          //                           },\r\n          //                           [sourcesymbol]: {\r\n          //                             //   value: packagename,\r\n          //                             //   get() {\r\n          //                             //     return modulesrcfun;\r\n          //                             //   },\r\n          //                             value: modulesrcfun,\r\n          //                             //   configurable: true,\r\n          //                             //   writable: true,\r\n          //                             enumerable: false\r\n          //                           }\r\n          //                         });\r\n          //                         if (\r\n          //                           typeof Symbol !== \"undefined\" &&\r\n          //                           Symbol.toStringTag\r\n          //                         ) {\r\n          //                           Object.defineProperty(\r\n          //                             moduleexport,\r\n          //                             Symbol.toStringTag,\r\n          //                             {\r\n          //                               //   enumerable:t,\r\n          //                               value: \"Module\"\r\n          //                             }\r\n          //                           );\r\n          //                         }\r\n\r\n          //                         if (typeof moduleexport.default !== \"undefined\") {\r\n          //                           if (typeof packagename !== \"undefined\") {\r\n          //                             // moduleexport[namesymbol] = packagename;\r\n          //                             IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][\r\n          //                               packagename\r\n          //                             ] = moduleexport;\r\n          //                           }\r\n          //                           // else {\r\n          //                           //   packagename = url;\r\n          //                           //   IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][\r\n          //                           //     packagename\r\n          //                           //   ] = moduleexport;\r\n          //                           // }\r\n          //                         }\r\n          //                         // moduleexport[urlsymbol] = url;\r\n\r\n          //                         /*\r\n          //                         if (typeof moduleexport.default !== \"undefined\") {\r\n          //                           // if (typeof moduleexport[namesymbol] !== \"undefined\") {\r\n          //                           // }\r\n          //                         }\r\n\r\n          //   */\r\n          //                         /*\r\n          //    else\r\n          //   {\r\n          //                           //   moduleexport[urlsymbol] = url;\r\n          //                           console.warn(加载的模块没有输出, packagename, url);\r\n          //                           // resolve(moduleexport);\r\n          //                           reject(Error(加载的模块没有输出 + packagename + url));\r\n          //                           return;\r\n          //                         }\r\n          //                         */\r\n\r\n          //                         /* 加载完成之后， IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][                            url]*/\r\n          //                         /* 复制一份 */\r\n          //                         IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url] =\r\n          //                           IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\r\n          //                         // IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url][namesymbol] = url;\r\n          //                         !!moduleexport.default &&\r\n          //                           Object.keys(moduleexport.default)\r\n          //                             .filter(t => t !== \"default\")\r\n          //                             .forEach(key => {\r\n          //                               Object.defineProperty(moduleexport, key, {\r\n          //                                 enumerable: true,\r\n          //                                 get() {\r\n          //                                   return moduleexport.default[key];\r\n          //                                 }\r\n          //                               });\r\n          //                             });\r\n\r\n          //                         resolve(moduleexport);\r\n          //                         return;\r\n          //                       })(fetchpromisetext);\r\n          //                     } catch (e) {\r\n          //                       console.warn(e);\r\n          //                       reject(e);\r\n          //                       return;\r\n          //                     }\r\n          //                   } catch (e) {\r\n          //                     console.warn(e);\r\n          //                     reject(e);\r\n          //                     return;\r\n          //                   }\r\n          //                 })();\r\n          //               } catch (e) {\r\n          //                 console.warn(e);\r\n          //                 reject(e);\r\n          //                 return;\r\n          //               }\r\n          //             })();\r\n          //           }\r\n          //c);\r\n        }\r\n      })(url, packagename);\r\n    } else {\r\n      throw new TypeError(\r\n        // \"输入的类型错误,输入的类型必须是字符串或者数组或对象\"\r\n        输入的类型错误输入的类型必须是字符串或者数组或对象\r\n      );\r\n    }\r\n  }\r\n  IMPORTCJSAMDUMD.REQUIREPACKAGE = getmodule;\r\n  return IMPORTCJSAMDUMD;\r\n})();\r\n// eslint-disable-next-line no-undef\r\n/*   (typeof globalThis !== \"undefined\" ? globalThis : false) ||\r\n    (typeof window !== \"undefined\" ? window : false) ||\r\n    (typeof WorkerGlobalScope !== \"undefined\" ? WorkerGlobalScope : false) ||\r\n    // eslint-disable-next-line no-undef\r\n    this */\r\nexport default IMPORTCJSAMDUMD;\r\n"],"names":["dynamicimportshimfun","dynamicimportshim","Function","error","async","url","TypeError","URL","href","Promise","resolve","reject","s","document","createElement","clearsideeffect","e","head","removeChild","removescript","f","window","removeEventListener","removeerrorlisten","errorhandler","revokeObjectURL","src","addEventListener","topLevelBlobUrl","source","createObjectURL","Blob","type","createBlob","onload","Symbol","for","Reflect","deleteProperty","onerror","Error","appendChild","GLOBALPACKAGESTORE","字符串不能为空","加载的模块没有输出","namesymbol","urlsymbol","sourcesymbol","packagename","fetchpromisetext","fetch","then","response","ok","text","moduletype","exports","[object Object]","toStringTag","module","modulesrcfun","define","moduleexport","default","undefined","myrequirefun","scripttext","模块加载函数","toString","call","urlorname","assertstring","String","baseurl","startsWith","endsWith","格式化url","objurl","a","pathname","split","length","origin","join","getbaseurl","exportmodule","非空对象","o","Object","keys","JSON","stringify","exportdefault","定义default","处理非es模块","parse","SyntaxError","filter","t","forEach","key","defineProperty","enumerable","get","defineProperties","value","writable","IMPORTCJSAMDUMD","传入的参数必须是个object","模块仓库中没有找到","同时发起多个","all","Array","from","map","isArray","prototype","getmodule","参数必须为字符串","findpackage","Proxy","set","isobject","__proto__","errormes","name","deps","callback","amd","defineglobalDefQueue","it","ostring","isFunction","push","canshu","target","def","输入的类型错误输入的类型必须是字符串或者数组或对象","非法字符串","inarguments","initialtry","obj","newobjjson","输入参数array","suoyouimportpromise","objecttoreturn","m","args","同时发起多个字符串","传入参数arr","flat","arguments","coreload","oldimportcjsamdumd","catch","flag","isurl","importcjsamdumd","has","handleerror","REQUIREPACKAGE"],"mappings":"AAWA,IAAIA,EAAuB,MAKzB,IAAIC,EACJ,IACEA,EAAoBC,SAAS,IAAK,oBAElC,MAAOC,GACPF,EAAoBG,eAAeC,GACjC,GAAY,KAARA,EACF,MAAM,IAAIC,UATA,8CAWZ,GAAmB,iBAARD,EACT,MAAM,IAAIC,UAbC,oDAmHb,OApGAD,EAAM,IAAIE,IAAIF,GAAKG,WAEV,IAAIC,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAIC,SAASC,cAAc,UACjC,SAASC,KAaT,SAAsBC,GACpB,IACEH,SAASI,KAAKC,YAAYF,GAC1B,MAAOb,KAfTgB,CAAaP,GAKf,SAA2BQ,GACzB,IACEC,OAAOC,oBAAoB,QAASF,GACpC,MAAOjB,KAPToB,CAAkBC,GAElBjB,IAAIkB,gBAAgBb,EAAEc,KAgBxB,SAASF,EAAaR,GAKpBL,EAAOK,EAAEb,OAOTY,IAEFM,OAAOM,iBAAiB,QAASH,GACjC,MAAMI,EA/DhB,SAAoBC,GAClB,OAAOtB,IAAIuB,gBACT,IAAIC,KAAK,CAACF,GAAS,CAAEG,KAAM,4BA6DGC,qBACF5B,2BAA6B,UAC/CA,UAMJO,EAAEoB,KAAO,SACTpB,EAAEc,IAAME,EACRhB,EAAER,OAAQ,EAGVQ,EAAEsB,OAAS,KAGTxB,EAAQW,OAAOc,OAAOC,IAAI,UAAY/B,KACtCgC,QAAQC,eAAejB,OAAQc,OAAOC,IAAI,UAAY/B,IAatDU,KAEFH,EAAE2B,QAAU,KAOV5B,EAAO,IAAI6B,MAAM,kCAAoCnC,IAiBrDU,KAEFF,SAASI,KAAKwB,YAAY7B,MAOlC,OAAOX,GAzHkB,GCX3B,MAAMyC,EAAqB,eAQrBC,EAAU,6CACVC,EAAY,yDACZC,EAAaV,OAAOC,IAAI,QAExBU,EAAYX,OAAOC,IAAI,OAEvBW,EAAeZ,OAAOC,IAAI,UAEhC,MAKA,CAAC/B,EAAK2C,KAEJ,OAAO,IAAIvC,QAGX,SAAmBC,EAASC,GAC1B,MAAO,EAAED,EAASC,KAChB,WACE,SACQ,WACJ,IAAIsC,EACJ,IACE,IACEA,QAAyBC,MAAM7C,GAAK8C,KAAKC,IACvC,IAAKA,EAASC,GACZ,MAAM,IAAIb,MAAM,gBAAkBnC,GAEpC,OAAO+C,EAASE,SAElB,MAAOtC,GAGP,YADAL,EAAOK,GAGT,SACQ,OAACZ,IACL,IAAImD,EACJ,MAAMC,EAAU,CACdA,QAAS,CACPC,CAACtB,OAAOuB,aAAc,WAGpBC,EAAS,CACbH,QAAS,IAIX,IAAII,EAFJC,EAAOL,QAAU,GAGjB,MAAMM,EAAe,CAEnBC,aAASC,GAKX,KAGE,SACEC,EACAJ,EACAF,EACAH,EACAU,GAEA,MAAMC,EAAS,IAAIjE,SACjB,UACA,SACA,SACA,+BACqBG,UAAY6D,UAAmB7D,WAGtDuD,EAAeO,EAAOC,WACfD,EAAOE,KACZV,EAAOH,QAEPc,IAGE,GAFAC,EAAaD,GAEK,MADlBA,EAAYE,OAAOF,IAEjB,MAAM,IAAIhE,UAAUqC,GAmCtB,OAFA2B,EAvBA,SAAgBG,EAASH,GAmBvB,OAjBEE,OAAOF,GAAWI,WAAW,OAC7BF,OAAOF,GAAWI,WAAW,UAIzBF,OAAOF,GAAWK,SAAS,QAC3BL,EAAUK,SAAS,SACnBL,EAAUK,SAAS,UACnBL,EAAUK,SAAS,SACnBL,EAAUK,SAAS,WAGrBL,GAAa,OAEfA,EAAY,IAAI/D,IAAIkE,EAAUH,GAAW9D,MAGpC8D,EAIGM,CA/BZ,SAAoBvE,GAClB,IAAIwE,EAAS,IAAItE,IAAIF,GACjByE,EAAID,EAAOE,SAASC,MAAM,KAG9B,OAFAF,EAAEA,EAAEG,OAAS,GAAK,GACPJ,EAAOK,OAASJ,EAAEK,KAAK,KAyBpBC,CAAW/E,GAECiE,GAErBL,EAAaK,IAKtBT,EACAF,EACAH,EAAQA,SAjEZ,CAoEGS,EAAcJ,EAAQF,EAAQH,EAASU,GAC1C,MAAMmB,EAAe,CACnB7B,EAAQA,QAAUA,EAAQA,QAAU,GACpCG,EAAOH,QAAUG,EAAOH,QAAU,GAClCK,EAAOL,QAAUK,EAAOL,QAAU,KAoFtC,SAAiBM,EAAcuB,QACD,IAAjBA,IACTA,EAAe,CAAC,GAAI,GAAI,UAEI,IAAnBxB,EAAOL,UAChBK,EAAOL,QAAU,IAEnB,SAAS8B,EAAKC,GACZ,MACe,iBAANA,GACPC,OAAOC,KAAKF,GAAGN,QACO,OAAtBS,KAAKC,UAAUJ,GAGnB,GACED,EAAKD,EAAa,IAIlB,CAGA,MAAMO,EAAgBP,EAAa,GACnCQ,EAAU/B,EAAc8B,QASnB,GACLN,EAAKD,EAAa,IAIlB,CAGA,MAAMO,EAAgBP,EAAa,GAEnCQ,EAAU/B,EAAc8B,OAQnB,CAAA,IACLN,EAAKD,EAAa,IAyBlB,YALA1E,EACE6B,MACEI,EAAY,IAAMI,EAAc,IAAM3C,IAlB1C,CAGA,MAAMuF,EAAgBP,EAAa,GAQnCQ,EAAU/B,EAAc8B,KApJ1BE,CAAQhC,EAAcuB,GACtB9B,EAAa,MACb,MAAOvC,GAEP,IACE8C,EAAaC,QAAU2B,KAAKK,MAAM7B,GAElCN,EAAeM,EACfX,EAAa,OACb,MAAOpD,GAEP,KAEEa,aAAagF,aA4Db,YADArF,EAAOK,GAjDP,CAIA,MAAMY,EAAkBvB,EAExBuD,EAAeM,EACf,IACE,MAAM0B,QAAsB3F,EAC1B2B,GAEF2B,EAAa,MAGbiC,OAAOC,KAAKG,GACTK,OAAOC,GAAW,YAANA,GACZC,QAAQC,IACPZ,OAAOa,eAAevC,EAAcsC,EAAK,CACvCE,YAAY,EACZC,IAAG,IACMX,EAAcQ,OAK7BP,EACE/B,EACA8B,EAAc7B,QACV6B,EAAc7B,QACd6B,GAEN,MAAO5E,GAGP,YADAL,EAAOK,GAGT,QAAoC,IAAzB8C,EAAaC,QAStB,YALApD,EACE6B,MACEI,EAAY,IAAMI,EAAc,IAAM3C,MAuGlDmF,OAAOgB,iBAAiB1C,EAAc,CACpCL,CAACZ,GAAa,CACZ4D,MAAOzD,EAEP0D,UAAU,EACVJ,YAAY,GAEd7C,CAACX,GAAY,CACX2D,MAAOpG,EAGPiG,YAAY,GAEd7C,CAACV,GAAe,CAKd0D,MAAO7C,EAGP0C,YAAY,GAEd7C,CAACtB,OAAOC,IAAI,SAAU,CACpBqE,MAAOlD,EACP+C,YAAY,KAGM,oBAAXnE,QAA0BA,OAAOuB,aAC1C8B,OAAOa,eAAevC,EAAc3B,OAAOuB,YAAa,CAEtD+C,MAAO,gBAIyB,IAAzB3C,EAAaC,cACK,IAAhBf,IAET2D,EAAgBjE,GACdM,GACEc,GA+BR6C,EAAgBjE,GAAoBrC,GAClCsG,EAAgBjE,GAAoBM,GAEpCc,EAAaC,SACbyB,OAAOC,KAAK3B,EAAaC,SACtBkC,OAAOC,GAAW,YAANA,GACZC,QAAQC,IAEP,IACEZ,OAAOa,eAAevC,EAAcsC,EAAK,CACvCE,YAAY,EACZC,IAAG,IACMzC,EAAaC,QAAQqC,KAGhC,MAAOjG,OAKfO,EAAQoD,IApWJ,CAsWHb,GACH,MAAOjC,GAGP,YADAL,EAAOK,IAGT,MAAOA,GAGP,YADAL,EAAOK,KA9XL,GAkYN,MAAOA,GAGP,YADAL,EAAOK,KAtYX,IADK,CA2YJN,EAASC,MCtahB,MAAMiG,EAAkB,+DAClBC,EACJ,+FAUFzG,eAAe0G,EAAOhC,GACpB,aAAarE,QAAQsG,IACnBC,MAAMC,KAAKnC,GAAGoC,IAAIlG,GACT2F,EAAgB3F,EAAE,GAAIA,EAAE,MAqBrC,SAASmG,EAAQrC,GACf,MACe,iBAANA,GACPkC,MAAMG,QAAQrC,IACwB,mBAAtCU,OAAO4B,UAAUhD,SAASC,KAAKS,GAInC,SAASuC,EAAUrE,GAGjB,GAAoB,KAAhBA,EACF,MAAM,IAAI1C,UAAUqC,GAEtB,GAA2B,iBAAhBK,EACT,MAAM,IAAI1C,UAAUgH,GAEtB,MAAMC,EAAcZ,EAAgBjE,GAAoBM,GACxD,GAAIuE,EAIF,OAAO,IAAIC,MAAMD,EAAa,CAmB5BE,IAAG,KACM,EAETnF,eAAc,KAGL,IAIX,MAAM,IAAIE,MAAMqE,EAAY7D,GAGhC,MAAMN,EAAqB,eAC3B,SAASgF,EAASnC,GAChB,MACe,iBAANA,GAC+B,oBAAtCC,OAAO4B,UAAUhD,SAASC,KAAKkB,IAC/BA,EAAEoC,YAAcnC,OAAO4B,UAG3B,MAAME,EAAW,mDAEX3E,EAAU,6CAIT,IAAIsB,EAAe,SAAwBjB,GAEhD,GAAoB,KAAhBA,EACF,MAAM,IAAI1C,UAAUqC,GAEtB,GAA2B,iBAAhBK,EACT,MAAM,IAAI1C,UAAUgH,GAGtB,MAAMC,EAAcZ,EAAgBjE,GAAoBM,GACxD,GAAIuE,EAEF,OAAOA,EAAYxD,QACd,CACL,IAAI6D,EAAW,IAAIpF,MAAMqE,EAAY7D,GAGrC,MADA4E,EAAStD,UAAYtB,EACf4E,IAeV,SAAS/D,EAAOgE,EAAMC,EAAMC,GAE1BlE,EAAOL,QAAU,GAEjBK,EAAOmE,KAAM,EACb,MAAMC,EAAuB,GAUT,iBAATJ,IACTE,EAAWD,EACXA,EAAOD,EACPA,EAAO,MAEJV,EAAQW,KACXC,EAAWD,EACXA,EAAO,OAEJA,GA7BP,SAAoBI,GAClB,MACMC,EADK3C,OAAO4B,UACChD,SACnB,MAAO,mBAAsB8D,GAA2B,sBAArBC,EAAQ9D,KAAK6D,GA0BnCE,CAAWL,KACtBD,EAAO,IAQTG,EAAqBI,KAAK,CAACR,EAAMC,EAAMC,IAGvC,MAAMO,EAASL,EAAqB,GAAG,GAAGf,IAAIlG,GAAKiD,EAAajD,IAChE6C,EAAOL,QAAUyE,EAAqB,GAAG,MAAMK,GAI1C,SAAS/D,EAAa3D,GAC3B,GAAU,KAANA,EACF,MAAM,IAAIN,UAAUqC,GAEtB,GAAiB,iBAAN/B,EACT,MAAM,IAAIN,UAAUgH,GAEtB,OAAO,EAEF,SAASzB,EAAU0C,EAAQC,GAEA,WAA5BA,EAAIrG,OAAOuB,cAA6B8E,EAAIzE,UAC9CyE,EAAMA,EAAIzE,SAMZyB,OAAOa,eAAekC,EAAQ,UAAW,CACvCjC,YAAY,EAGZC,IAAG,IACMiC,IAtEb3E,EAAOL,QAAU,GA6CjBK,EAAOmE,KAAM,EA8Bb,MAAMrB,EAAkB,MAGtB,MAIM8B,EACJ,0JACIC,EAAQ,yIAER7F,EAAaV,OAAOC,IAAI,QAExBU,EAAYX,OAAOC,IAAI,OAKvBuE,EAqDNvG,kBAAkCuI,GAChC,MAAMC,EAmDRxI,eAAkCC,EAAK2C,GAGrC,GAAI0E,EAASrH,GACX,YAAa,OAACD,IACZC,EA1UR,SAAoBwI,GAClB,GAAmB,iBAARA,EACT,MAAM,IAAIvI,UAERsG,GAGJ,OAAOlB,KAAKK,MAAML,KAAKC,UAAUkD,IAmUrBC,CAAWzI,GACjB,MAAM0I,EAAYvD,OAAOC,KAAKpF,GAAK6G,IAAId,IAGrC,MAAO,CAFY/F,EAAI+F,GACLA,KAGpB,IAAI4C,EAAsB,GAE1B,IACEA,QAA4BlC,EAAOiC,GAMnC,MAAO5I,GAEP6I,QAA4BlC,EAAOiC,WAOnCC,QAA4BlC,EAAOiC,GAOrC,IAAIE,EAAiB,GAIrB,OAHAD,EAAoB7C,QAAQ+C,IAC1BD,EAAeC,EAAErG,IAAeqG,IAE3BD,GApCI,CAqCV5I,GACE,GACJ8G,EAAQ9G,IAAuB,iBAARA,GACD,iBAAhB2C,EAwBP,YAAa,UAAWmG,KACtB/I,eAAegJ,EAAUtE,GACvB,aAAarE,QAAQsG,IACnBC,MAAMC,KAAKnC,GAAGoC,IAAIlG,GACT2F,EAAgB3F,KAI7B,IAAIgI,EAAsB,GAC1B,MAAMK,EAAU3D,KAAKK,MAAML,KAAKC,UAAUqB,SAASmC,GAAMG,SAQzD,IACEN,QAA4BI,EAAUC,GAMtC,MAAOlJ,GAEP6I,QAA4BI,EAAUC,WAOtCL,QAA4BI,EAAUC,GAOxC,OAAOL,GAxCI,IAyCPO,WACD,GAAmB,iBAARlJ,GAA2C,iBAAhB2C,EAG3C,OAFAuB,EAAalE,QAEA,OAAQA,EAAK2C,KACxB,QAAmB,IAAR3C,GAA+B,KAARA,GAA8B,KAAhB2C,EAC9C,MAAM,IAAI1C,UAERoI,GAQJ,YAL2B,IAAhB1F,IACTA,EAAc,IAAIzC,IAAIF,GAAKG,MAE7BH,EAAM,IAAIE,IAAIF,GAAKG,UAIf,IADKmG,EAAgBjE,GAAoBM,SAGzC,IADK2D,EAAgBjE,GAAoBM,GAAae,SAExD4C,EAAgBjE,GAAoBM,GAAaF,KAAezC,EAMzDgH,EAAUrE,QAEmC,IAA7C2D,EAAgBjE,GAAoBrC,SAEzC,IADKsG,EAAgBjE,GAAoBrC,GAAK0D,SAEhD4C,EAAgBjE,GAAoBrC,GAAKyC,KAAezC,GAGxDsG,EAAgBjE,GAAoBM,GAClC2D,EAAgBjE,GAAoBrC,GAEtCsG,EAAgBjE,GAAoBM,GAClCH,GACEG,EAEGqE,EAAUhH,UAEJmJ,EAASnJ,EAAK2C,IAxClB,CAmaV3C,EAAK2C,GAER,MAAM,IAAI1C,UAERmI,GA3kBegB,IAAsBd,GAqCzC,aAAaC,EAAWc,MAjCJtJ,MAAAA,IAElB,IAAIY,EAAEsD,UAyBJ,MAAMtD,EAxBN,GAzQR,SAAeX,GACb,IAAIsJ,GAAO,EACX,IACE,GAAY,KAARtJ,EACF,MAAM,IAAIC,UAAUqC,GAEtB,GAAmB,iBAARtC,EACT,MAAM,IAAIC,UAAUgH,GAGtBjH,EAAM,IAAIE,IAAIF,GAAKG,KACnBmJ,GAAO,EACP,MAAOxJ,GACPwJ,GAAO,EAET,OAAOA,EA0PGC,CAAM5I,EAAEsD,iBAIJuF,EAAgB7I,EAAEsD,eAEnB,CACL,IACEoD,EAASiB,EAAY,MACrBtG,QAAQyH,IAAInB,EAAY,GAAI3H,EAAEsD,WAS9B,MAAMtD,EAPN,UACQ6I,KAAmBlB,GACzB,MAAOxI,GAEP,MAAMa,GAWd,aAAa6I,KAAmBlB,MAlCpCvI,eAAeyJ,KAAmBlB,GAChC,MAAMC,EAAaa,KAAsBd,GAIzC,MAAMoB,EAAc3J,MAAAA,IAElB,IAAIY,EAAEsD,UAyBJ,MAAMtD,EAxBN,GAzQR,SAAeX,GACb,IAAIsJ,GAAO,EACX,IACE,GAAY,KAARtJ,EACF,MAAM,IAAIC,UAAUqC,GAEtB,GAAmB,iBAARtC,EACT,MAAM,IAAIC,UAAUgH,GAGtBjH,EAAM,IAAIE,IAAIF,GAAKG,KACnBmJ,GAAO,EACP,MAAOxJ,GACPwJ,GAAO,EAET,OAAOA,EA0PGC,CAAM5I,EAAEsD,iBAIJuF,EAAgB7I,EAAEsD,eAEnB,CACL,IACEoD,EAASiB,EAAY,MACrBtG,QAAQyH,IAAInB,EAAY,GAAI3H,EAAEsD,WAS9B,MAAMtD,EAPN,UACQ6I,KAAmBlB,GACzB,MAAOxI,GAEP,MAAMa,GAWd,aAAa6I,KAAmBlB,IAIlC,aAAaC,EAAWc,MAUtBK,GAIJ3J,eAAeqJ,EAAmBpJ,EAAK2C,GAGrC,GAAI0E,EAASrH,GACX,YAAa,OAACD,IACZC,EA1UR,SAAoBwI,GAClB,GAAmB,iBAARA,EACT,MAAM,IAAIvI,UAERsG,GAGJ,OAAOlB,KAAKK,MAAML,KAAKC,UAAUkD,IAmUrBC,CAAWzI,GACjB,MAAM0I,EAAYvD,OAAOC,KAAKpF,GAAK6G,IAAId,IAGrC,MAAO,CAFY/F,EAAI+F,GACLA,KAGpB,IAAI4C,EAAsB,GAE1B,IACEA,QAA4BlC,EAAOiC,GAMnC,MAAO5I,GAEP6I,QAA4BlC,EAAOiC,WAOnCC,QAA4BlC,EAAOiC,GAOrC,IAAIE,EAAiB,GAIrB,OAHAD,EAAoB7C,QAAQ+C,IAC1BD,EAAeC,EAAErG,IAAeqG,IAE3BD,GApCI,CAqCV5I,GAofP,OA/nBAsG,EAAgBjE,GACdiE,EAAgBjE,IAAuB,GA6nBzCiE,EAAgBqD,eAAiB3C,EAC1BV,GAxpBe"}