{"version":3,"file":"index.esm.min.js","sources":["index.esm.js"],"sourcesContent":["function createBlob(source) {\n  return URL.createObjectURL(\n    new Blob([source], { type: \"application/javascript\" })\n  );\n}\n//\n/*  */\nlet dynamicimportshimfun = (() => {\n  const 参数必须为字符串 = \"参数必须为字符串\";\n  const 字符串不能为空 = \"字符串不能为空\";\n\n  let dynamicimportshim;\n  try {\n    dynamicimportshim = Function(\"u\", \"return import(u)\");\n    // throw Error();\n  } catch (error) {\n    dynamicimportshim = async function(url) {\n      if (url === \"\") {\n        throw new TypeError(字符串不能为空);\n      }\n      if (typeof url !== \"string\") {\n        throw new TypeError(参数必须为字符串);\n      }\n      url = new URL(url).href;\n      function getnewimportpromise() {\n        return new Promise((resolve, reject) => {\n          const s = document.createElement(\"script\");\n          function clearsideeffect() {\n            removescript(s);\n            removeerrorlisten(errorhandler);\n            // window.removeEventListener(\"error\", errorhandler);\n            URL.revokeObjectURL(s.src);\n          }\n          function removeerrorlisten(f) {\n            try {\n              window.removeEventListener(\"error\", f);\n            } catch (error) {\n              //\n            }\n          }\n          function removescript(e) {\n            try {\n              document.head.removeChild(e);\n            } catch (error) {\n              //\n            }\n          }\n          function errorhandler(e) {\n            /*\n              edge中第二次加载输出这个错误\n              Error: fetch import module failed */\n            console.warn(e.error);\n            reject(e.error);\n            /*\n            removescript(s);\n            removeerrorlisten(errorhandler);\n            // window.removeEventListener(\"error\", errorhandler);\n    URL.revokeObjectURL(s.src)      \n    */\n            clearsideeffect();\n          }\n          window.addEventListener(\"error\", errorhandler);\n          const topLevelBlobUrl = createBlob(\n            `import*as m from'${url}';\\nwindow[Symbol.for('${\"import-\" +\n              url}')]=m`\n            /* TypeError: Unable to set property 'Symbol(import-https://cdn.staticfile.org/vue/2.6.10/vue.esm.browser.min.js)' of undefined or null reference at Anonymous function (blob:http://127.0.0.1:8080/4f31c6d8-3282-4466-b04b-9952068d51e0:2:1) at module (blob:http://127.0.0.1:8080/4f31c6d8-3282-4466-b04b-9952068d51e0:1:1) */\n            // `import*as m from'${url}';\\ndocument.currentScript[Symbol.for('${\"import-\" +\n            //   url}')]=m`\n          );\n\n          s.type = \"module\";\n          s.src = topLevelBlobUrl;\n          s.async = true;\n\n          // const\n          s.onload = () => {\n            // resolve(s[Symbol.for(\"import-\" + url)]);\n            // Reflect.deleteProperty(s, Symbol.for(\"import-\" + url));\n            resolve(window[Symbol.for(\"import-\" + url)]);\n            Reflect.deleteProperty(window, Symbol.for(\"import-\" + url));\n            // document.head.removeChild(s);\n            // try {\n            //   document.head.removeChild(s);\n            // } catch (error) {\n            //   //\n            // }\n            /* removescript(s);\n            removeerrorlisten(errorhandler);\n            // window.removeEventListener(\"error\", errorhandler);\n       \n    URL.revokeObjectURL(s.src)\n    */\n            clearsideeffect();\n          };\n          s.onerror = () => {\n            /* 网络错误触发这个error */\n            /* TypeError: Failed to fetch dynamically imported module\n            TypeError: error loading dynamically imported module */\n            // edge中第1次加载输出这个错误\n            //e是EVENT!\n            // console.warn(e);\n            reject(new Error(\"import load failed from network\" + url));\n            /* EDGE浏览器中先触发onerror事件! */\n            /* 在chrome和firefox中则不是 */\n            /* TypeError: Failed to resolve module specifier \"vue\". Relative references must start with either \"/\", \"./\", or \"../\". */\n            /* TypeError: \"Error resolving module specifier: vue\" */\n            // document.head.removeChild(s);\n            // window.removeEventListener(\"error\", errorhandler);\n            /*  removeerrorlisten(errorhandler);\n            // try {\n            //   document.head.removeChild(s);\n            // } catch (error) {\n            //   //\n            // }\n            removescript(s);\n        \n    URL.revokeObjectURL(s.src)\n    */\n            clearsideeffect();\n          };\n          document.head.appendChild(s);\n        });\n      }\n      return await getnewimportpromise();\n    };\n  }\n\n  return dynamicimportshim;\n})();\n\nconst GLOBALPACKAGESTORE = \"PACKAGESTORE\";\nconst 字符串不能为空 = \"字符串不能为空\";\nconst 加载的模块没有输出 = \"加载的模块没有输出\";\nconst namesymbol = Symbol.for(\"name\");\n\nconst urlsymbol = Symbol.for(\"url\");\n\nconst sourcesymbol = Symbol.for(\"source\");\nvar coreload = //\n\n/*  */\n\n//\n(url, packagename) => {\n  //   return (function() {\n  return new Promise(主核心加载模块函数);\n  //   })();\n\n  function 主核心加载模块函数(resolve, reject) {\n    return ((resolve, reject) => {\n      (async () => {\n        try {\n          await (async () => {\n            let fetchpromisetext;\n            try {\n              try {\n                fetchpromisetext = await fetch(url).then(response => {\n                  if (!response.ok) {\n                    throw new Error(\"fetch failed \" + url);\n                  }\n                  return response.text();\n                });\n              } catch (e) {\n                console.warn(e);\n                reject(e);\n                return;\n              }\n              try {\n                await (async scripttext => {\n                  let moduletype;\n                  const exports = {\n                    exports: {\n                      [Symbol.toStringTag]: \"Module\"\n                    }\n                  };\n                  const module = {\n                    exports: {}\n                  };\n                  define.exports = {};\n                  //   let exportmodule = [{}, {}, {}];\n                  var modulesrcfun;\n                  const moduleexport = {\n                    // [namesymbol]: packagename,\n                    default: undefined\n                    // [urlsymbol]: url,\n                    // [sourcesymbol]: modulesrcfun\n                  };\n\n                  try {\n                    // exportmodule =\n\n                    (function(\n                      myrequirefun,\n                      define,\n                      module,\n                      exports,\n                      scripttext\n                    ) {\n                      const 模块加载函数 = new Function(\n                        \"require\",\n                        \"define\",\n                        \"module\",\n                        \"exports\",\n                        `\"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\n`\n                        // `\"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\nreturn [exports, module.exports, define.exports]; `\n                      );\n                      modulesrcfun = 模块加载函数.toString();\n                      return 模块加载函数.call(\n                        module.exports,\n\n                        urlorname => {\n                          assertstring(urlorname);\n                          urlorname = String(urlorname);\n                          if (urlorname === \"\") {\n                            throw new TypeError(字符串不能为空);\n                          }\n                          function getbaseurl(url) {\n                            var objurl = new URL(url);\n                            var a = objurl.pathname.split(\"/\");\n                            a[a.length - 1] = \"\";\n                            var path = objurl.origin + a.join(\"/\");\n                            return path;\n                          }\n\n                          function 格式化url(baseurl, urlorname) {\n                            if (\n                              String(urlorname).startsWith(\"./\") ||\n                              String(urlorname).startsWith(\"../\")\n                            ) {\n                              if (\n                                !(\n                                  String(urlorname).endsWith(\".js\") ||\n                                  urlorname.endsWith(\".mjs\") ||\n                                  urlorname.endsWith(\".json\") ||\n                                  urlorname.endsWith(\".css\") ||\n                                  urlorname.endsWith(\".html\")\n                                )\n                              ) {\n                                urlorname += \".js\";\n                              }\n                              urlorname = new URL(baseurl + urlorname).href;\n                            }\n\n                            return urlorname;\n                          }\n                          const baseurl = getbaseurl(url);\n\n                          urlorname = 格式化url(baseurl, urlorname);\n\n                          return myrequirefun(urlorname);\n                        },\n\n                        // require\n\n                        define,\n                        module,\n                        exports.exports\n                        /* 如果在函数内修改exports的值,则无法获取输出,只能在修改exports的属性的时候,获取到 */\n                      );\n                    })(myrequirefun, define, module, exports, scripttext);\n                    const exportmodule = [\n                      exports.exports ? exports.exports : {},\n                      module.exports ? module.exports : {},\n                      define.exports ? define.exports : {}\n                    ];\n                    处理非es模块(moduleexport, exportmodule);\n                    moduletype = \"cjs\";\n                  } catch (e) {\n                    console.warn(e);\n                    try {\n                      moduleexport.default = JSON.parse(scripttext);\n                      console.log(\"检测到json模块 \" + url);\n                      modulesrcfun = scripttext;\n                      moduletype = \"json\";\n                    } catch (error) {\n                      console.warn(error);\n                      if (\n                        // (\n                        e instanceof SyntaxError\n\n                        //   &&\n                        //   /* chrome浏览器报错信息 */\n                        //   e.message === \"Unexpected token export\") ||\n                        // /* edge浏览器报错不同 */\n                        // \"Syntax error\" === e.message ||\n                        // /* 火狐浏览器报错不同 */\n                        // \"export declarations may only appear at top level of a module\" ===\n                        //   e.message\n                      ) {\n                        // const topLevelBlobUrl = createBlob(\n                        //   `\"use strict\";\\n/* ${url} */;\\nexport*as default from'${url}';\\n/* ${url} */;\\n `\n                        // );\n                        const topLevelBlobUrl = url;\n                        //   modulesrcfun = topLevelBlobUrl;\n                        modulesrcfun = scripttext;\n                        try {\n                          const exportdefault = await dynamicimportshimfun(\n                            topLevelBlobUrl\n                          );\n                          moduletype = \"esm\";\n                          // var module__exportdefault = exportdefault.default;\n\n                          Object.keys(exportdefault)\n                            .filter(t => t !== \"default\")\n                            .forEach(key => {\n                              Object.defineProperty(moduleexport, key, {\n                                enumerable: true,\n                                get() {\n                                  return exportdefault[key];\n                                }\n                              });\n                            });\n\n                          定义default(\n                            moduleexport,\n                            exportdefault.default\n                              ? exportdefault.default\n                              : exportdefault\n                          );\n                        } catch (e) {\n                          console.warn(e);\n                          reject(e);\n                          return;\n                        }\n                        if (typeof moduleexport.default === \"undefined\") {\n                          //   moduleexport[urlsymbol] = url;\n                          console.warn(加载的模块没有输出, packagename, url);\n                          // resolve(moduleexport);\n                          reject(\n                            Error(\n                              加载的模块没有输出 + \" \" + packagename + \" \" + url\n                            )\n                          );\n                          return;\n                        }\n                      } else {\n                        console.warn(e);\n                        reject(e);\n                        return;\n                      }\n                    }\n                    /* 如果是个json的话,也会报错 SyntaxError*/\n                    /*  如果是es模块,则使用dynamicimportshim加载*/\n\n                    // reject(e);\n                    // return;\n                  }\n                  function 处理非es模块(moduleexport, exportmodule) {\n                    if (typeof exportmodule === \"undefined\") {\n                      exportmodule = [{}, {}, {}];\n                    }\n                    if (typeof define.exports === \"undefined\") {\n                      define.exports = {};\n                    }\n                    function 非空对象(o) {\n                      return (\n                        typeof o !== \"object\" ||\n                        Object.keys(o).length ||\n                        JSON.stringify(o) !== \"{}\"\n                      );\n                    }\n                    if (\n                      非空对象(exportmodule[0])\n                      //   typeof exportmodule[0] !== \"object\" ||\n                      //   Object.keys(exportmodule[0]).length ||\n                      //   JSON.stringify(exportmodule[0]) !== \"{}\"\n                    ) {\n                      // console.log(\"检测到umd模块\", url, packagename);\n\n                      const exportdefault = exportmodule[0];\n                      定义default(moduleexport, exportdefault);\n                      // Object.defineProperty(moduleexport, \"default\", {\n                      //   enumerable: true,\n\n                      //   get() {\n                      //     return exportdefault;\n                      //   }\n                      // });\n                      // moduleexport.default = exportmodule[0];\n                    } else if (\n                      非空对象(exportmodule[1])\n                      //   typeof exportmodule[1] !== \"object\" ||\n                      //   Object.keys(exportmodule[1]).length ||\n                      //   JSON.stringify(exportmodule[1]) !== \"{}\"\n                    ) {\n                      // console.log(\"检测到cjs模块\", url, packagename);\n                      // moduleexport.default = exportmodule[1];\n                      const exportdefault = exportmodule[1];\n\n                      定义default(moduleexport, exportdefault);\n                      // Object.defineProperty(moduleexport, \"default\", {\n                      //   enumerable: true,\n\n                      //   get() {\n                      //     return exportdefault;\n                      //   }\n                      // });\n                    } else if (\n                      非空对象(exportmodule[2])\n                      //   typeof exportmodule[2] !== \"object\" ||\n                      //   Object.keys(exportmodule[2]).length ||\n                      //   JSON.stringify(exportmodule[2]) !== \"{}\"\n                    ) {\n                      // console.log(\"检测到amd模块\", url, packagename);\n                      // moduleexport.default = exportmodule[2];\n                      const exportdefault = exportmodule[2];\n                      // Object.defineProperty(moduleexport, \"default\", {\n                      //   enumerable: true,\n\n                      //   get() {\n                      //     return exportdefault;\n                      //   }\n                      // });\n                      定义default(moduleexport, exportdefault);\n                    } else {\n                      //   moduleexport[urlsymbol] = url;\n                      console.warn(加载的模块没有输出, url, packagename);\n                      // resolve(moduleexport);\n                      reject(\n                        Error(\n                          加载的模块没有输出 + \" \" + packagename + \" \" + url\n                        )\n                      );\n                      return;\n                    }\n                  }\n                  // const moduleexport = {\n                  //   // [namesymbol]: packagename,\n                  //   default: undefined\n                  //   // [urlsymbol]: url,\n                  //   // [sourcesymbol]: modulesrcfun\n                  // };\n\n                  Object.defineProperties(moduleexport, {\n                    [namesymbol]: {\n                      value: packagename,\n                      // configurable: true,\n                      writable: true,\n                      enumerable: false\n                    },\n                    [urlsymbol]: {\n                      value: url,\n                      // configurable: true,\n                      //   writable: true,\n                      enumerable: false\n                    },\n                    [sourcesymbol]: {\n                      //   value: packagename,\n                      //   get() {\n                      //     return modulesrcfun;\n                      //   },\n                      value: modulesrcfun,\n                      //   configurable: true,\n                      //   writable: true,\n                      enumerable: false\n                    },\n                    [Symbol.for(\"type\")]: {\n                      value: moduletype,\n                      enumerable: false\n                    }\n                  });\n                  if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n                    Object.defineProperty(moduleexport, Symbol.toStringTag, {\n                      //   enumerable:t,\n                      value: \"Module\"\n                    });\n                  }\n\n                  if (typeof moduleexport.default !== \"undefined\") {\n                    if (typeof packagename !== \"undefined\") {\n                      // moduleexport[namesymbol] = packagename;\n                      IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][\n                        packagename\n                      ] = moduleexport;\n                    }\n                    // else {\n                    //   packagename = url;\n                    //   IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][\n                    //     packagename\n                    //   ] = moduleexport;\n                    // }\n                  }\n                  // moduleexport[urlsymbol] = url;\n\n                  /*\n                      if (typeof moduleexport.default !== \"undefined\") {\n                        // if (typeof moduleexport[namesymbol] !== \"undefined\") {\n                        // }\n                      }\n      \n      */\n                  /*\n      else \n      {\n                        //   moduleexport[urlsymbol] = url;\n                        console.warn(加载的模块没有输出, packagename, url);\n                        // resolve(moduleexport);\n                        reject(Error(加载的模块没有输出 + packagename + url));\n                        return;\n                      }\n                      */\n\n                  /* 加载完成之后， IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][                            url]*/\n                  /* 复制一份 */\n                  IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url] =\n                    IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\n                  // IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url][namesymbol] = url;\n                  !!moduleexport.default &&\n                    Object.keys(moduleexport.default)\n                      .filter(t => t !== \"default\")\n                      .forEach(key => {\n                        /* TypeError: Cannot redefine property: md5 */\n                        try {\n                          Object.defineProperty(moduleexport, key, {\n                            enumerable: true,\n                            get() {\n                              return moduleexport.default[key];\n                            }\n                          });\n                        } catch (error) {\n                          //\n                        }\n                      });\n\n                  resolve(moduleexport);\n                  return;\n                })(fetchpromisetext);\n              } catch (e) {\n                console.warn(e);\n                reject(e);\n                return;\n              }\n            } catch (e) {\n              console.warn(e);\n              reject(e);\n              return;\n            }\n          })();\n        } catch (e) {\n          console.warn(e);\n          reject(e);\n          return;\n        }\n      })();\n    })(resolve, reject);\n  }\n};\n\nclass cantfindError extends Error {\n  constructor(message, urlorname) {\n    super(message);\n    this.urlorname = urlorname;\n  }\n  //   [\"urlorname\"] = undefined;\n}\n\nconst 传入的参数必须是个object = \"传入的参数必须是个object\";\nconst 模块仓库中没有找到 =\n  \"Cannot find module in packagestore, 模块仓库中没有找到, \";\nfunction newobjjson(obj) {\n  if (typeof obj !== \"object\") {\n    throw new TypeError(\n      // \"传入的参数必须是个object!\"\n      传入的参数必须是个object\n    );\n  }\n  return JSON.parse(JSON.stringify(obj));\n}\nasync function 同时发起多个(a) {\n  return await Promise.all(\n    Array.from(a).map(e => {\n      return IMPORTCJSAMDUMD(e[0], e[1]);\n    })\n  );\n}\nfunction isurl(url) {\n  var flag = false;\n  try {\n    if (url === \"\") {\n      throw new TypeError(字符串不能为空$1);\n    }\n    if (typeof url !== \"string\") {\n      throw new TypeError(参数必须为字符串);\n    }\n\n    url = new URL(url).href;\n    flag = true;\n  } catch (error) {\n    flag = false;\n  }\n  return flag;\n}\nfunction isArray(a) {\n  return (\n    typeof a === \"object\" &&\n    Array.isArray(a) &&\n    Object.prototype.toString.call(a) === \"[object Array]\"\n  );\n}\n\nfunction getmodule(packagename) {\n\n  if (packagename === \"\") {\n    throw new TypeError(字符串不能为空$1);\n  }\n  if (typeof packagename !== \"string\") {\n    throw new TypeError(参数必须为字符串);\n  }\n  const findpackage = IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][packagename];\n  if (findpackage) {\n    // console.log(\"在模块仓库中找到了\", packagename, findpackage[urlsymbol]);\n    //   return { ...findpackage };\n\n    return new Proxy(findpackage, {\n      // ownKeys(target) {\n      //   return [...Object.keys(target), Symbol.toStringTag];\n      // },\n      // has(target, name) {\n      //   // console.log('has' + name);\n\n      //   if (typeof name === \"symbol\") {\n      //     return false;\n      //   }\n      //   return Reflect.has(target, name);\n      // },\n      // get(target, propertyKey) {\n      //   //   if (typeof propertyKey === \"symbol\") {\n      //   //     return;\n      //   //   }\n      //   // console.log('GET ' + propertyKey);\n      //   return Reflect.get(target, propertyKey); // [propertyKey];\n      // },\n      set() {\n        return false;\n      },\n      deleteProperty() {\n        // console.log('delete' + name);\n        // return Reflect.deleteProperty(target, name);\n        return false;\n      }\n    });\n  } else {\n    throw new Error(模块仓库中没有找到 + packagename);\n  }\n}\nconst GLOBALPACKAGESTORE$1 = \"PACKAGESTORE\";\nfunction isobject(o) {\n  return (\n    typeof o === \"object\" &&\n    Object.prototype.toString.call(o) === \"[object Object]\" &&\n    o.__proto__ === Object.prototype\n  );\n}\nconst 参数必须为字符串 = \"参数必须为字符串\";\nconst 字符串不能为空$1 = \"字符串不能为空\";\nlet myrequirefun = function requireinstead(packagename) {\n  if (packagename === \"\") {\n    throw new TypeError(字符串不能为空$1);\n  }\n  if (typeof packagename !== \"string\") {\n    throw new TypeError(参数必须为字符串);\n  }\n\n  const findpackage = IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][packagename];\n  if (findpackage) {\n    // console.log(\"在模块仓库中找到了\", packagename, findpackage[urlsymbol]);\n    return findpackage.default;\n  } else {\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\n    // let errormes = new Error(模块仓库中没有找到 + packagename);\n\n    // errormes.urlorname = packagename;\n\n    // throw errormes;\n    // throw new Error(\n    //   `Cannot find module in packagestore, 模块仓库中没有找到, ` + packagename\n    // );\n  }\n};\ndefine.exports = {};\nfunction isFunction(it) {\n  const op = Object.prototype;\n  const ostring = op.toString;\n  return \"function\" === typeof it && ostring.call(it) === \"[object Function]\";\n}\nfunction define(name, deps, callback) {\n  define.exports = {};\n\n  define.amd = true;\n  const defineglobalDefQueue = [];\n  /*\n  const op = Object.prototype;\n  const ostring = op.toString;\n*/\n  // function isArray(it) {\n  //   const a = it;\n  //   return Array.isArray(a) && ostring.call(it) === \"[object Array]\";\n  // }\n\n  if (typeof name !== \"string\") {\n    callback = deps;\n    deps = name;\n    name = null;\n  }\n  if (!isArray(deps)) {\n    callback = deps;\n    deps = null;\n  }\n  if (!deps && isFunction(callback)) {\n    deps = [];\n  }\n\n  // if (0) {\n  //   //\n  // } else\n\n  //   {\n  defineglobalDefQueue.push([name, deps, callback]);\n  //   }\n  // console.log(\"检测到amd模块\", defineglobalDefQueue[0]);\n  const canshu = defineglobalDefQueue[0][1].map(e => myrequirefun(e));\n  define.exports = defineglobalDefQueue[0][2](...canshu);\n}\ndefine.amd = true;\n// }\nfunction assertstring(s) {\n  if (s === \"\") {\n    throw new TypeError(字符串不能为空$1);\n  }\n  if (typeof s !== \"string\") {\n    throw new TypeError(参数必须为字符串);\n  }\n  return true;\n}\nfunction 定义default(target, def) {\n  /* 如果模块的输出是一个模块 */\n  if (def[Symbol.toStringTag] === \"Module\" && def.default) {\n    def = def.default;\n  }\n  // def[Symbol.toStringTag]===\"Module\"?\n  // def=def.default\n  // :;\n\n  Object.defineProperty(target, \"default\", {\n    enumerable: true,\n    // writable: true,\n    // configurable: true,\n    get() {\n      return def;\n    }\n  });\n}\n// export default IMPORTCJSAMDUMD; /* global  */\nconst IMPORTCJSAMDUMD = (() => {\n\n  const 补充加载依赖的模块网址 = \"补充加载依赖的模块网址\";\n\n  //   const 加载的模块没有输出 = \"加载的模块没有输出\";\n\n  const 输入的类型错误输入的类型必须是字符串或者数组或对象 =\n    \"输入的类型错误,输入的类型必须是字符串或者数组或对象\";\n  const 非法字符串 = \"输入的类型错误,输入的字符串不能为空,url不能为undefined\";\n\n  const namesymbol = Symbol.for(\"name\");\n\n  const urlsymbol = Symbol.for(\"url\");\n\n  //   const sourcesymbol = Symbol.for(\"source\");\n\n  // const globalDefQueue = \"globalDefQueue\";\n  const IMPORTCJSAMDUMD = importcjsamdumd;\n  // if (\"object\" == typeof exports && \"undefined\" != typeof module) {\n  //   module.exports = importcjsamdumd;\n  // } else {\n  //   // global.IMPORTCJSAMDUMD = importcjsamdumd;\n  // }\n\n  IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1] =\n    IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1] || {};\n  //  myrequirefun = requireinstead;\n\n  //   define.exports = {};\n  //   function define(name, deps, callback) {\n  //     \"use strict\";\n  //     define.exports = {};\n\n  //     define.amd = true;\n  //     const defineglobalDefQueue = [];\n  //     const op = Object.prototype;\n  //     const ostring = op.toString;\n  //     // function isArray(it) {\n  //     //   const a = it;\n  //     //   return Array.isArray(a) && ostring.call(it) === \"[object Array]\";\n  //     // }\n  //     function isFunction(it) {\n  //       return ostring.call(it) === \"[object Function]\";\n  //     }\n  //     if (typeof name !== \"string\") {\n  //       callback = deps;\n  //       deps = name;\n  //       name = null;\n  //     }\n  //     if (!isArray(deps)) {\n  //       callback = deps;\n  //       deps = null;\n  //     }\n  //     if (!deps && isFunction(callback)) {\n  //       deps = [];\n  //     }\n\n  //     // if (0) {\n  //     //   //\n  //     // } else\n\n  //     {\n  //       defineglobalDefQueue.push([name, deps, callback]);\n  //     }\n  //     // console.log(\"检测到amd模块\", defineglobalDefQueue[0]);\n  //     const canshu = defineglobalDefQueue[0][1].map(e => require(e));\n  //     define.exports = defineglobalDefQueue[0][2](...canshu);\n  //   }\n  //   define.amd = true;\n\n  async function importcjsamdumd(...inarguments /* url */) {\n    return await oldimportcjsamdumd(...inarguments).catch(\n      //   async e => {\n      //   console.warn(e);\n\n      //   if (isurl(e.urlorname)) {\n      //     console.log(\"补充加载依赖的模块网址\", e.urlorname);\n      //     await importcjsamdumd(e.urlorname);\n      //   }\n      //   return await oldimportcjsamdumd(...arguments);\n      // }\n      handleerror\n    );\n    // const initialtry = await oldimportcjsamdumd(...inarguments);\n    // async function handleerror(e){\n\n    // }\n    async function handleerror(e) {\n      console.warn(e);\n      if (\n        e instanceof cantfindError\n        // e.urlorname\n      ) {\n        if (isurl(e.urlorname)) {\n          console.log(补充加载依赖的模块网址, e.urlorname);\n\n          // initialtry.catch(handleerror);\n          await oldimportcjsamdumd(e.urlorname);\n          // initialtry.catch(handleerror);\n          return await oldimportcjsamdumd(...inarguments);\n        } else {\n          if (\n            isobject(inarguments[0]) &&\n            Reflect.has(inarguments[0], e.urlorname)\n          ) {\n            try {\n              await oldimportcjsamdumd(...inarguments);\n\n              return await oldimportcjsamdumd(...inarguments);\n            } catch (error) {\n              console.warn(error);\n              throw e;\n            }\n          } else {\n            throw e;\n          }\n\n          // return await importcjsamdumd(...inarguments);\n        }\n      } else {\n        throw e;\n      }\n      //   return await importcjsamdumd(...inarguments);\n    }\n\n    // return await oldimportcjsamdumd(...inarguments)\n  }\n\n  async function oldimportcjsamdumd(url, packagename) {\n\n    if (isobject(url)) {\n      return await (async url => {\n        url = newobjjson(url);\n        const 输入参数array = Object.keys(url).map(key => {\n          const packageurl = url[key];\n          const packagenm = key;\n          return [packageurl, packagenm];\n        });\n        let suoyouimportpromise = [];\n\n        try {\n          suoyouimportpromise = await 同时发起多个(输入参数array);\n          // suoyouimportpromise = await Promise.all(\n          //   输入参数array.map(e => {\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\n          //   })\n          // );\n        } catch (error) {\n          console.warn(error);\n          suoyouimportpromise = await 同时发起多个(输入参数array);\n          // suoyouimportpromise = await Promise.all(\n          //   输入参数array.map(e => {\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\n          //   })\n          // );\n        } finally {\n          suoyouimportpromise = await 同时发起多个(输入参数array);\n          // suoyouimportpromise = await Promise.all(\n          //   输入参数array.map(e => {\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\n          //   })\n          // );\n        }\n        let objecttoreturn = {};\n        suoyouimportpromise.forEach(m => {\n          objecttoreturn[m[namesymbol]] = m;\n        });\n        return objecttoreturn;\n      })(url);\n    } else if (\n      (isArray(url) && typeof url === \"object\") ||\n      typeof packagename === \"object\"\n    ) {\n      /*\n  \n  \n  \n  \n        Array(...arguments).forEach(e => {\n          const url = e[0];\n          let packagename = e[1];\n          if (typeof url === \"undefined\" || url === \"\" || packagename === \"\") {\n            throw new Error(\n              \"输入的类型错误,输入的字符串不能为空,url不能为undefined\"\n            );\n          }\n          if (typeof packagename === \"undefined\") {\n            packagename = new URL(url).href;\n          }\n        });\n  \n  \n  \n  */\n\n      return await (async (...args) => {\n        async function 同时发起多个字符串(a) {\n          return await Promise.all(\n            Array.from(a).map(e => {\n              return IMPORTCJSAMDUMD(e);\n            })\n          );\n        }\n        let suoyouimportpromise = [];\n        const 传入参数arr = JSON.parse(JSON.stringify(Array(...args).flat()));\n        // async function 同时发起多个(a) {\n        //   return await Promise.all(\n        //     a.map(e => {\n        //       return IMPORTCJSAMDUMD(e[0], e[1]);\n        //     })\n        //   );\n        // }\n        try {\n          suoyouimportpromise = await 同时发起多个字符串(传入参数arr);\n          // suoyouimportpromise = await Promise.all(\n          //   Array(...arguments).map(e => {\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\n          //   })\n          // );\n        } catch (error) {\n          console.warn(error);\n          suoyouimportpromise = await 同时发起多个字符串(传入参数arr);\n          // suoyouimportpromise = await Promise.all(\n          //   Array(...arguments).map(e => {\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\n          //   })\n          // );\n        } finally {\n          suoyouimportpromise = await 同时发起多个字符串(传入参数arr);\n          // suoyouimportpromise = await Promise.all(\n          //   Array(...arguments).map(e => {\n          //     return IMPORTCJSAMDUMD(e[0], e[1]);\n          //   })\n          // );\n        }\n        return suoyouimportpromise;\n      })(...arguments);\n    } else if (typeof url === \"string\" || typeof packagename === \"string\") {\n      assertstring(url);\n      // assertstring(packagename);\n      return await (async (url, packagename) => {\n        if (typeof url === \"undefined\" || url === \"\" || packagename === \"\") {\n          throw new TypeError(\n            // \"输入的类型错误,输入的字符串不能为空,url不能为undefined\"\n            非法字符串\n          );\n        }\n        if (typeof packagename === \"undefined\") {\n          packagename = new URL(url).href;\n        }\n        url = new URL(url).href;\n\n        if (\n          typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][packagename] !==\n            \"undefined\" &&\n          typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][packagename].default !==\n            \"undefined\" &&\n          IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][packagename][urlsymbol] === url\n        ) {\n          // return IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\n          // return await new Promise(resolve => {\n          //   resolve(IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename]);\n          // });\n          return getmodule(packagename);\n        } else if (\n          typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][url] !== \"undefined\" &&\n          typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][url].default !==\n            \"undefined\" &&\n          IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][url][urlsymbol] === url\n        ) {\n          /* 如果先用url作为名称加载，后用packagename加载，则复制一份 */\n          IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][packagename] =\n            IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][url];\n\n          IMPORTCJSAMDUMD[GLOBALPACKAGESTORE$1][packagename][\n            namesymbol\n          ] = packagename;\n          // return IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url];\n          return getmodule(url);\n        } else {\n          return await coreload(url, packagename);\n          /* \n     const 主核心加载模块函数 = coreload(url, packagename);\n          return await new Promise(\n            主核心加载模块函数\n*/\n          //             (resolve, reject) => {\n          //             (async () => {\n          //               try {\n          //                 await (async () => {\n          //                   let fetchpromisetext;\n          //                   try {\n          //                     try {\n          //                       fetchpromisetext = await fetch(url).then(response => {\n          //                         if (!response.ok) {\n          //                           throw new Error(\"fetch failed \" + url);\n          //                         }\n          //                         return response.text();\n          //                       });\n          //                     } catch (e) {\n          //                       console.warn(e);\n          //                       reject(e);\n          //                       return;\n          //                     }\n          //                     try {\n          //                       await (async scripttext => {\n          //                         const exports = {\n          //                           exports: {\n          //                             [Symbol.toStringTag]: \"Module\"\n          //                           }\n          //                         };\n          //                         const module = {\n          //                           exports: {}\n          //                         };\n          //                         define.exports = {};\n          //                         //   let exportmodule = [{}, {}, {}];\n          //                         var modulesrcfun;\n          //                         const moduleexport = {\n          //                           // [namesymbol]: packagename,\n          //                           default: undefined\n          //                           // [urlsymbol]: url,\n          //                           // [sourcesymbol]: modulesrcfun\n          //                         };\n          //                         try {\n          //                           // exportmodule =\n\n          //                           (function(\n          //                             require,\n          //                             define,\n          //                             module,\n          //                             exports,\n          //                             scripttext\n          //                           ) {\n          //                             const 模块加载函数 = new Function(\n          //                               \"require\",\n          //                               \"define\",\n          //                               \"module\",\n          //                               \"exports\",\n          //                               `\"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\n`\n          //                               // `\"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\nreturn [exports, module.exports, define.exports]; `\n          //                             );\n          //                             modulesrcfun = 模块加载函数;\n          //                             return 模块加载函数.call(\n          //                               module.exports,\n\n          //                               urlorname => {\n          //                                 assertstring(urlorname);\n          //                                 urlorname = String(urlorname);\n          //                                 if (urlorname === \"\") {\n          //                                   throw new TypeError(字符串不能为空);\n          //                                 }\n          //                                 function getbaseurl(url) {\n          //                                   var objurl = new URL(url);\n          //                                   var a = objurl.pathname.split(\"/\");\n          //                                   a[a.length - 1] = \"\";\n          //                                   var path = objurl.origin + a.join(\"/\");\n          //                                   return path;\n          //                                 }\n\n          //                                 function 格式化url(baseurl, urlorname) {\n          //                                   if (\n          //                                     String(urlorname).startsWith(\"./\") ||\n          //                                     String(urlorname).startsWith(\"../\")\n          //                                   ) {\n          //                                     if (!String(urlorname).endsWith(\".js\")) {\n          //                                       urlorname += \".js\";\n          //                                     }\n          //                                     urlorname = new URL(baseurl + urlorname)\n          //                                       .href;\n          //                                   }\n\n          //                                   return urlorname;\n          //                                 }\n          //                                 const baseurl = getbaseurl(url);\n\n          //                                 urlorname = 格式化url(baseurl, urlorname);\n\n          //                                 return require(urlorname);\n          //                               },\n\n          //                               // require\n\n          //                               define,\n          //                               module,\n          //                               exports.exports\n          //                               /* 如果在函数内修改exports的值,则无法获取输出,只能在修改exports的属性的时候,获取到 */\n          //                             );\n          //                           })(require, define, module, exports, scripttext);\n          //                           const exportmodule = [\n          //                             exports.exports ? exports.exports : {},\n          //                             module.exports ? module.exports : {},\n          //                             define.exports ? define.exports : {}\n          //                           ];\n          //                           处理非es模块(exportmodule);\n          //                         } catch (e) {\n          //                           /*  如果是es模块,则使用dynamicimportshim加载*/\n          //                           if (\n          //                             // (\n          //                             e instanceof SyntaxError\n\n          //                             //   &&\n          //                             //   /* chrome浏览器报错信息 */\n          //                             //   e.message === \"Unexpected token export\") ||\n          //                             // /* edge浏览器报错不同 */\n          //                             // \"Syntax error\" === e.message ||\n          //                             // /* 火狐浏览器报错不同 */\n          //                             // \"export declarations may only appear at top level of a module\" ===\n          //                             //   e.message\n          //                           ) {\n          //                             // const topLevelBlobUrl = createBlob(\n          //                             //   `\"use strict\";\\n/* ${url} */;\\nexport*as default from'${url}';\\n/* ${url} */;\\n `\n          //                             // );\n          //                             const topLevelBlobUrl = url;\n          //                             modulesrcfun = topLevelBlobUrl;\n          //                             try {\n          //                               const exportdefault = await dynamicimportshim(\n          //                                 topLevelBlobUrl\n          //                               );\n          //                               // var module__exportdefault = exportdefault.default;\n          //                               定义default(\n          //                                 moduleexport,\n          //                                 exportdefault.default\n          //                                   ? exportdefault.default\n          //                                   : exportdefault\n          //                               );\n          //                             } catch (e) {\n          //                               console.warn(e);\n          //                               reject(e);\n          //                               return;\n          //                             }\n          //                             if (typeof moduleexport.default === \"undefined\") {\n          //                               //   moduleexport[urlsymbol] = url;\n          //                               console.warn(\n          //                                 加载的模块没有输出,\n          //                                 packagename,\n          //                                 url\n          //                               );\n          //                               // resolve(moduleexport);\n          //                               reject(\n          //                                 Error(\n          //                                   加载的模块没有输出 +\n          //                                     \" \" +\n          //                                     packagename +\n          //                                     \" \" +\n          //                                     url\n          //                                 )\n          //                               );\n          //                               return;\n          //                             }\n          //                           } else {\n          //                             console.warn(e);\n          //                             reject(e);\n          //                             return;\n          //                           }\n          //                           // reject(e);\n          //                           // return;\n          //                         }\n          //                         function 处理非es模块(exportmodule) {\n          //                           if (typeof exportmodule === \"undefined\") {\n          //                             exportmodule = [{}, {}, {}];\n          //                           }\n          //                           if (typeof define.exports === \"undefined\") {\n          //                             define.exports = {};\n          //                           }\n          //                           function 非空对象(o) {\n          //                             return (\n          //                               typeof o !== \"object\" ||\n          //                               Object.keys(o).length ||\n          //                               JSON.stringify(o) !== \"{}\"\n          //                             );\n          //                           }\n          //                           if (\n          //                             非空对象(exportmodule[0])\n          //                             //   typeof exportmodule[0] !== \"object\" ||\n          //                             //   Object.keys(exportmodule[0]).length ||\n          //                             //   JSON.stringify(exportmodule[0]) !== \"{}\"\n          //                           ) {\n          //                             // console.log(\"检测到umd模块\", url, packagename);\n\n          //                             const exportdefault = exportmodule[0];\n          //                             定义default(moduleexport, exportdefault);\n          //                             // Object.defineProperty(moduleexport, \"default\", {\n          //                             //   enumerable: true,\n\n          //                             //   get() {\n          //                             //     return exportdefault;\n          //                             //   }\n          //                             // });\n          //                             // moduleexport.default = exportmodule[0];\n          //                           } else if (\n          //                             非空对象(exportmodule[1])\n          //                             //   typeof exportmodule[1] !== \"object\" ||\n          //                             //   Object.keys(exportmodule[1]).length ||\n          //                             //   JSON.stringify(exportmodule[1]) !== \"{}\"\n          //                           ) {\n          //                             // console.log(\"检测到cjs模块\", url, packagename);\n          //                             // moduleexport.default = exportmodule[1];\n          //                             const exportdefault = exportmodule[1];\n\n          //                             定义default(moduleexport, exportdefault);\n          //                             // Object.defineProperty(moduleexport, \"default\", {\n          //                             //   enumerable: true,\n\n          //                             //   get() {\n          //                             //     return exportdefault;\n          //                             //   }\n          //                             // });\n          //                           } else if (\n          //                             非空对象(exportmodule[2])\n          //                             //   typeof exportmodule[2] !== \"object\" ||\n          //                             //   Object.keys(exportmodule[2]).length ||\n          //                             //   JSON.stringify(exportmodule[2]) !== \"{}\"\n          //                           ) {\n          //                             // console.log(\"检测到amd模块\", url, packagename);\n          //                             // moduleexport.default = exportmodule[2];\n          //                             const exportdefault = exportmodule[2];\n          //                             // Object.defineProperty(moduleexport, \"default\", {\n          //                             //   enumerable: true,\n\n          //                             //   get() {\n          //                             //     return exportdefault;\n          //                             //   }\n          //                             // });\n          //                             定义default(moduleexport, exportdefault);\n          //                           } else {\n          //                             //   moduleexport[urlsymbol] = url;\n          //                             console.warn(加载的模块没有输出, url, packagename);\n          //                             // resolve(moduleexport);\n          //                             reject(\n          //                               Error(\n          //                                 加载的模块没有输出 +\n          //                                   \" \" +\n          //                                   packagename +\n          //                                   \" \" +\n          //                                   url\n          //                               )\n          //                             );\n          //                             return;\n          //                           }\n          //                         }\n          //                         // const moduleexport = {\n          //                         //   // [namesymbol]: packagename,\n          //                         //   default: undefined\n          //                         //   // [urlsymbol]: url,\n          //                         //   // [sourcesymbol]: modulesrcfun\n          //                         // };\n\n          //                         Object.defineProperties(moduleexport, {\n          //                           [namesymbol]: {\n          //                             value: packagename,\n          //                             // configurable: true,\n          //                             writable: true,\n          //                             enumerable: false\n          //                           },\n          //                           [urlsymbol]: {\n          //                             value: url,\n          //                             // configurable: true,\n          //                             writable: true,\n          //                             enumerable: false\n          //                           },\n          //                           [sourcesymbol]: {\n          //                             //   value: packagename,\n          //                             //   get() {\n          //                             //     return modulesrcfun;\n          //                             //   },\n          //                             value: modulesrcfun,\n          //                             //   configurable: true,\n          //                             //   writable: true,\n          //                             enumerable: false\n          //                           }\n          //                         });\n          //                         if (\n          //                           typeof Symbol !== \"undefined\" &&\n          //                           Symbol.toStringTag\n          //                         ) {\n          //                           Object.defineProperty(\n          //                             moduleexport,\n          //                             Symbol.toStringTag,\n          //                             {\n          //                               //   enumerable:t,\n          //                               value: \"Module\"\n          //                             }\n          //                           );\n          //                         }\n\n          //                         if (typeof moduleexport.default !== \"undefined\") {\n          //                           if (typeof packagename !== \"undefined\") {\n          //                             // moduleexport[namesymbol] = packagename;\n          //                             IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][\n          //                               packagename\n          //                             ] = moduleexport;\n          //                           }\n          //                           // else {\n          //                           //   packagename = url;\n          //                           //   IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][\n          //                           //     packagename\n          //                           //   ] = moduleexport;\n          //                           // }\n          //                         }\n          //                         // moduleexport[urlsymbol] = url;\n\n          //                         /*\n          //                         if (typeof moduleexport.default !== \"undefined\") {\n          //                           // if (typeof moduleexport[namesymbol] !== \"undefined\") {\n          //                           // }\n          //                         }\n\n          //   */\n          //                         /*\n          //    else\n          //   {\n          //                           //   moduleexport[urlsymbol] = url;\n          //                           console.warn(加载的模块没有输出, packagename, url);\n          //                           // resolve(moduleexport);\n          //                           reject(Error(加载的模块没有输出 + packagename + url));\n          //                           return;\n          //                         }\n          //                         */\n\n          //                         /* 加载完成之后， IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][                            url]*/\n          //                         /* 复制一份 */\n          //                         IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url] =\n          //                           IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\n          //                         // IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url][namesymbol] = url;\n          //                         !!moduleexport.default &&\n          //                           Object.keys(moduleexport.default)\n          //                             .filter(t => t !== \"default\")\n          //                             .forEach(key => {\n          //                               Object.defineProperty(moduleexport, key, {\n          //                                 enumerable: true,\n          //                                 get() {\n          //                                   return moduleexport.default[key];\n          //                                 }\n          //                               });\n          //                             });\n\n          //                         resolve(moduleexport);\n          //                         return;\n          //                       })(fetchpromisetext);\n          //                     } catch (e) {\n          //                       console.warn(e);\n          //                       reject(e);\n          //                       return;\n          //                     }\n          //                   } catch (e) {\n          //                     console.warn(e);\n          //                     reject(e);\n          //                     return;\n          //                   }\n          //                 })();\n          //               } catch (e) {\n          //                 console.warn(e);\n          //                 reject(e);\n          //                 return;\n          //               }\n          //             })();\n          //           }\n          //c);\n        }\n      })(url, packagename);\n    } else {\n      throw new TypeError(\n        // \"输入的类型错误,输入的类型必须是字符串或者数组或对象\"\n        输入的类型错误输入的类型必须是字符串或者数组或对象\n      );\n    }\n  }\n  IMPORTCJSAMDUMD.REQUIREPACKAGE = getmodule;\n  return IMPORTCJSAMDUMD;\n})();\n\n//import dynamicimportshim from \"./dynamicimportshim.js\";\n//export{dynamicimportshim}\n\nexport default IMPORTCJSAMDUMD;\n//# sourceMappingURL=index.esm.js.map\n"],"names":["dynamicimportshimfun","dynamicimportshim","Function","error","async","url","TypeError","URL","href","Promise","resolve","reject","s","document","createElement","clearsideeffect","e","head","removeChild","removescript","f","window","removeEventListener","removeerrorlisten","errorhandler","revokeObjectURL","src","addEventListener","topLevelBlobUrl","source","createObjectURL","Blob","type","createBlob","onload","Symbol","for","Reflect","deleteProperty","onerror","Error","appendChild","GLOBALPACKAGESTORE","字符串不能为空","加载的模块没有输出","namesymbol","urlsymbol","sourcesymbol","coreload","packagename","fetchpromisetext","fetch","then","response","ok","text","moduletype","exports","[object Object]","toStringTag","module","modulesrcfun","define","moduleexport","default","undefined","myrequirefun","scripttext","模块加载函数","toString","call","urlorname","assertstring","String","baseurl","startsWith","endsWith","格式化url","objurl","a","pathname","split","length","origin","join","getbaseurl","exportmodule","非空对象","o","Object","keys","JSON","stringify","exportdefault","定义default","处理非es模块","parse","SyntaxError","filter","t","forEach","key","defineProperty","enumerable","get","defineProperties","value","writable","IMPORTCJSAMDUMD","cantfindError","message","super","this","传入的参数必须是个object","模块仓库中没有找到","同时发起多个","all","Array","from","map","isArray","prototype","getmodule","字符串不能为空$1","参数必须为字符串","findpackage","GLOBALPACKAGESTORE$1","Proxy","set","isobject","__proto__","name","deps","callback","amd","defineglobalDefQueue","it","ostring","isFunction","push","canshu","target","def","输入的类型错误输入的类型必须是字符串或者数组或对象","非法字符串","inarguments","oldimportcjsamdumd","catch","flag","isurl","has","obj","newobjjson","输入参数array","suoyouimportpromise","objecttoreturn","m","args","同时发起多个字符串","传入参数arr","flat","arguments","REQUIREPACKAGE"],"mappings":"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"}