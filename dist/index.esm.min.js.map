{"version":3,"file":"index.esm.min.js","sources":["index.esm.js"],"sourcesContent":["function createBlob(source) {\n    return URL.createObjectURL(new Blob([ source ], {\n        type: \"application/javascript\"\n    }));\n}\n\nlet dynamicimportshimfun = (() => {\n    const 参数必须为字符串 = \"参数必须为字符串\";\n    const 字符串不能为空 = \"字符串不能为空\";\n    let dynamicimportshim;\n    try {\n        dynamicimportshim = Function(\"u\", \"return import(u)\");\n    } catch (error) {\n        dynamicimportshim = async function(url) {\n            if (url === \"\") {\n                throw new TypeError(字符串不能为空);\n            }\n            if (typeof url !== \"string\") {\n                throw new TypeError(参数必须为字符串);\n            }\n            url = new URL(url).href;\n            function getnewimportpromise() {\n                return new Promise((resolve, reject) => {\n                    const s = document.createElement(\"script\");\n                    function clearsideeffect() {\n                        removescript(s);\n                        removeerrorlisten(errorhandler);\n                        URL.revokeObjectURL(s.src);\n                    }\n                    function removeerrorlisten(f) {\n                        try {\n                            window.removeEventListener(\"error\", f);\n                        } catch (error) {}\n                    }\n                    function removescript(e) {\n                        try {\n                            document.head.removeChild(e);\n                        } catch (error) {}\n                    }\n                    function errorhandler(e) {\n                        console.warn(e.error);\n                        reject(e.error);\n                        clearsideeffect();\n                    }\n                    window.addEventListener(\"error\", errorhandler);\n                    const topLevelBlobUrl = createBlob(`import*as m from'${url}';\\nwindow[Symbol.for('${\"import-\" + url}')]=m`);\n                    s.type = \"module\";\n                    s.src = topLevelBlobUrl;\n                    s.async = true;\n                    s.onload = () => {\n                        resolve(window[Symbol.for(\"import-\" + url)]);\n                        Reflect.deleteProperty(window, Symbol.for(\"import-\" + url));\n                        clearsideeffect();\n                    };\n                    s.onerror = () => {\n                        reject(new Error(\"import load failed from network\" + url));\n                        clearsideeffect();\n                    };\n                    document.head.appendChild(s);\n                });\n            }\n            return await getnewimportpromise();\n        };\n    }\n    return dynamicimportshim;\n})();\n\nconst 字符串不能为空 = \"字符串不能为空\";\n\nconst 加载的模块没有输出 = \"加载的模块没有输出\";\n\nconst namesymbol = Symbol.for(\"name\");\n\nconst urlsymbol = Symbol.for(\"url\");\n\nconst sourcesymbol = Symbol.for(\"source\");\n\nvar coreload = (url, packagename) => {\n    return new Promise(主核心加载模块函数);\n    function 主核心加载模块函数(resolve, reject) {\n        return ((resolve, reject) => {\n            (async () => {\n                try {\n                    await (async () => {\n                        let fetchpromisetext;\n                        try {\n                            try {\n                                fetchpromisetext = await fetch(url).then(response => {\n                                    if (!response.ok) {\n                                        throw new Error(\"fetch failed \" + url);\n                                    }\n                                    return response.text();\n                                });\n                            } catch (e) {\n                                console.warn(e);\n                                reject(e);\n                                return;\n                            }\n                            try {\n                                await (async scripttext => {\n                                    let moduletype;\n                                    const exports = {\n                                        exports: {\n                                            [Symbol.toStringTag]: \"Module\"\n                                        }\n                                    };\n                                    const module = {\n                                        exports: {}\n                                    };\n                                    define.exports = {};\n                                    var modulesrcfun;\n                                    const moduleexport = {\n                                        default: undefined\n                                    };\n                                    try {\n                                        (function(myrequirefun, define, module, exports, scripttext) {\n                                            const 模块加载函数 = new Function(\"require\", \"define\", \"module\", \"exports\", `\"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\n`);\n                                            modulesrcfun = 模块加载函数.toString();\n                                            return 模块加载函数.call(module.exports, urlorname => {\n                                                assertstring(urlorname);\n                                                urlorname = String(urlorname);\n                                                if (urlorname === \"\") {\n                                                    throw new TypeError(字符串不能为空);\n                                                }\n                                                function getbaseurl(url) {\n                                                    var objurl = new URL(url);\n                                                    var a = objurl.pathname.split(\"/\");\n                                                    a[a.length - 1] = \"\";\n                                                    var path = objurl.origin + a.join(\"/\");\n                                                    return path;\n                                                }\n                                                function 格式化url(baseurl, urlorname) {\n                                                    if (String(urlorname).startsWith(\"./\") || String(urlorname).startsWith(\"../\")) {\n                                                        if (!(String(urlorname).endsWith(\".js\") || urlorname.endsWith(\".mjs\") || urlorname.endsWith(\".json\") || urlorname.endsWith(\".css\") || urlorname.endsWith(\".html\"))) {\n                                                            urlorname += \".js\";\n                                                        }\n                                                        urlorname = new URL(baseurl + urlorname).href;\n                                                    }\n                                                    return urlorname;\n                                                }\n                                                const baseurl = getbaseurl(url);\n                                                urlorname = 格式化url(baseurl, urlorname);\n                                                return myrequirefun(urlorname);\n                                            }, define, module, exports.exports);\n                                        })(myrequirefun, define, module, exports, scripttext);\n                                        const exportmodule = [ exports.exports ? exports.exports : {}, module.exports ? module.exports : {}, define.exports ? define.exports : {} ];\n                                        处理非es模块(moduleexport, exportmodule);\n                                        moduletype = \"cjs\";\n                                    } catch (e) {\n                                        console.warn(e);\n                                        try {\n                                            moduleexport.default = JSON.parse(scripttext);\n                                            console.log(\"检测到json模块 \" + url);\n                                            modulesrcfun = scripttext;\n                                            moduletype = \"json\";\n                                        } catch (error) {\n                                            console.warn(error);\n                                            if (e instanceof SyntaxError) {\n                                                const topLevelBlobUrl = url;\n                                                modulesrcfun = scripttext;\n                                                try {\n                                                    const exportdefault = await dynamicimportshimfun(topLevelBlobUrl);\n                                                    moduletype = \"esm\";\n                                                    Object.keys(exportdefault).filter(t => t !== \"default\").forEach(key => {\n                                                        Object.defineProperty(moduleexport, key, {\n                                                            enumerable: true,\n                                                            get() {\n                                                                return exportdefault[key];\n                                                            }\n                                                        });\n                                                    });\n                                                    定义default(moduleexport, exportdefault.default ? exportdefault.default : exportdefault);\n                                                } catch (e) {\n                                                    console.warn(e);\n                                                    reject(e);\n                                                    return;\n                                                }\n                                                if (typeof moduleexport.default === \"undefined\") {\n                                                    console.warn(加载的模块没有输出, packagename, url);\n                                                    reject(Error(加载的模块没有输出 + \" \" + packagename + \" \" + url));\n                                                    return;\n                                                }\n                                            } else {\n                                                console.warn(e);\n                                                reject(e);\n                                                return;\n                                            }\n                                        }\n                                    }\n                                    function 处理非es模块(moduleexport, exportmodule) {\n                                        if (typeof exportmodule === \"undefined\") {\n                                            exportmodule = [ {}, {}, {} ];\n                                        }\n                                        if (typeof define.exports === \"undefined\") {\n                                            define.exports = {};\n                                        }\n                                        function 非空对象(o) {\n                                            return typeof o !== \"object\" || Object.keys(o).length || JSON.stringify(o) !== \"{}\";\n                                        }\n                                        if (非空对象(exportmodule[0])) {\n                                            const exportdefault = exportmodule[0];\n                                            定义default(moduleexport, exportdefault);\n                                        } else if (非空对象(exportmodule[1])) {\n                                            const exportdefault = exportmodule[1];\n                                            定义default(moduleexport, exportdefault);\n                                        } else if (非空对象(exportmodule[2])) {\n                                            const exportdefault = exportmodule[2];\n                                            定义default(moduleexport, exportdefault);\n                                        } else {\n                                            console.warn(加载的模块没有输出, url, packagename);\n                                            reject(Error(加载的模块没有输出 + \" \" + packagename + \" \" + url));\n                                            return;\n                                        }\n                                    }\n                                    Object.defineProperties(moduleexport, {\n                                        [namesymbol]: {\n                                            value: packagename,\n                                            writable: true,\n                                            enumerable: false\n                                        },\n                                        [urlsymbol]: {\n                                            value: url,\n                                            enumerable: false\n                                        },\n                                        [sourcesymbol]: {\n                                            value: modulesrcfun,\n                                            enumerable: false\n                                        },\n                                        [Symbol.for(\"type\")]: {\n                                            value: moduletype,\n                                            enumerable: false\n                                        }\n                                    });\n                                    if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n                                        Object.defineProperty(moduleexport, Symbol.toStringTag, {\n                                            value: \"Module\"\n                                        });\n                                    }\n                                    if (typeof moduleexport.default !== \"undefined\") {\n                                        if (typeof packagename !== \"undefined\") {\n                                            IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename] = moduleexport;\n                                        }\n                                    }\n                                    IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url] = IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\n                                    !!moduleexport.default && Object.keys(moduleexport.default).filter(t => t !== \"default\").forEach(key => {\n                                        try {\n                                            Object.defineProperty(moduleexport, key, {\n                                                enumerable: true,\n                                                get() {\n                                                    return moduleexport.default[key];\n                                                }\n                                            });\n                                        } catch (error) {}\n                                    });\n                                    resolve(moduleexport);\n                                    return;\n                                })(fetchpromisetext);\n                            } catch (e) {\n                                console.warn(e);\n                                reject(e);\n                                return;\n                            }\n                        } catch (e) {\n                            console.warn(e);\n                            reject(e);\n                            return;\n                        }\n                    })();\n                } catch (e) {\n                    console.warn(e);\n                    reject(e);\n                    return;\n                }\n            })();\n        })(resolve, reject);\n    }\n};\n\nasync function 同时发起多个字符串(a, IMPORTCJSAMDUMD) {\n    return await Promise.all(Array.from(a).map(e => {\n        return IMPORTCJSAMDUMD(e);\n    }));\n}\n\nconst 输入的类型错误输入的类型必须是字符串或者数组或对象 = \"输入的类型错误,输入的类型必须是字符串或者数组或对象\";\n\nconst 非法字符串 = \"输入的类型错误,输入的字符串不能为空,url不能为undefined\";\n\nconst namesymbol$1 = Symbol.for(\"name\");\n\nconst urlsymbol$1 = Symbol.for(\"url\");\n\nconst 传入的参数必须是个object = \"传入的参数必须是个object\";\n\nfunction newobjjson(obj) {\n    if (typeof obj !== \"object\") {\n        throw new TypeError(传入的参数必须是个object);\n    }\n    return JSON.parse(JSON.stringify(obj));\n}\n\nasync function 同时发起多个(a, IMPORTCJSAMDUMD) {\n    return await Promise.all(Array.from(a).map(e => {\n        return IMPORTCJSAMDUMD(e[0], e[1]);\n    }));\n}\n\nvar oldimportcjsamdumd = (IMPORTCJSAMDUMD => {\n    return async function oldimportcjsamdumd(url, packagename) {\n        if (isplainobject(url)) {\n            return await (async url => {\n                url = newobjjson(url);\n                const 输入参数array = Object.keys(url).map(key => {\n                    const packageurl = url[key];\n                    const packagenm = key;\n                    return [ packageurl, packagenm ];\n                });\n                let suoyouimportpromise = [];\n                try {\n                    suoyouimportpromise = await 同时发起多个(输入参数array, IMPORTCJSAMDUMD);\n                } catch (error) {\n                    console.warn(error);\n                    suoyouimportpromise = await 同时发起多个(输入参数array, IMPORTCJSAMDUMD);\n                } finally {\n                    suoyouimportpromise = await 同时发起多个(输入参数array, IMPORTCJSAMDUMD);\n                }\n                let objecttoreturn = {};\n                suoyouimportpromise.forEach(m => {\n                    objecttoreturn[m[namesymbol$1]] = m;\n                });\n                return objecttoreturn;\n            })(url);\n        } else if (isArray(url) && typeof url === \"object\" || typeof packagename === \"object\") {\n            return await (async (...args) => {\n                let suoyouimportpromise = [];\n                const 传入参数arr = JSON.parse(JSON.stringify(Array(...args).flat()));\n                try {\n                    suoyouimportpromise = await 同时发起多个字符串(传入参数arr, IMPORTCJSAMDUMD);\n                } catch (error) {\n                    console.warn(error);\n                    suoyouimportpromise = await 同时发起多个字符串(传入参数arr, IMPORTCJSAMDUMD);\n                } finally {\n                    suoyouimportpromise = await 同时发起多个字符串(传入参数arr, IMPORTCJSAMDUMD);\n                }\n                return suoyouimportpromise;\n            })(...arguments);\n        } else if (typeof url === \"string\" || typeof packagename === \"string\") {\n            assertstring(url);\n            return await (async (url, packagename) => {\n                if (typeof url === \"undefined\" || url === \"\" || packagename === \"\") {\n                    throw new TypeError(非法字符串);\n                }\n                if (typeof packagename === \"undefined\") {\n                    packagename = new URL(url).href;\n                }\n                url = new URL(url).href;\n                if (typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename] !== \"undefined\" && typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename].default !== \"undefined\" && IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename][urlsymbol$1] === url) {\n                    return getmodule(packagename);\n                } else if (typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url] !== \"undefined\" && typeof IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url].default !== \"undefined\" && IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url][urlsymbol$1] === url) {\n                    IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename] = IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][url];\n                    IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename][namesymbol$1] = packagename;\n                    return getmodule(url);\n                } else {\n                    return await coreload(url, packagename);\n                }\n            })(url, packagename);\n        } else {\n            throw new TypeError(输入的类型错误输入的类型必须是字符串或者数组或对象);\n        }\n    };\n})(IMPORTCJSAMDUMD);\n\nclass cantfindError extends Error {\n    constructor(message, urlorname) {\n        super(message);\n        this.urlorname = urlorname;\n    }\n}\n\nconst 模块仓库中没有找到 = \"Cannot find module in packagestore, 模块仓库中没有找到, \";\n\nfunction isurl(url) {\n    var flag = false;\n    try {\n        if (url === \"\") {\n            throw new TypeError(字符串不能为空$1);\n        }\n        if (typeof url !== \"string\") {\n            throw new TypeError(参数必须为字符串);\n        }\n        url = new URL(url).href;\n        flag = true;\n    } catch (error) {\n        flag = false;\n    }\n    return flag;\n}\n\nfunction isArray(a) {\n    return typeof a === \"object\" && Array.isArray(a) && Object.prototype.toString.call(a) === \"[object Array]\";\n}\n\nfunction getmodule(packagename) {\n    if (packagename === \"\") {\n        throw new TypeError(字符串不能为空$1);\n    }\n    if (typeof packagename !== \"string\") {\n        throw new TypeError(参数必须为字符串);\n    }\n    const findpackage = IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\n    if (findpackage) {\n        return new Proxy(findpackage, {\n            set() {\n                return false;\n            },\n            deleteProperty() {\n                return false;\n            }\n        });\n    } else {\n        throw new Error(模块仓库中没有找到 + packagename);\n    }\n}\n\nconst GLOBALPACKAGESTORE = \"PACKAGESTORE\";\n\nfunction isplainobject(o) {\n    return typeof o === \"object\" && Object.prototype.toString.call(o) === \"[object Object]\" && o.__proto__ === Object.prototype;\n}\n\nconst 参数必须为字符串 = \"参数必须为字符串\";\n\nconst 字符串不能为空$1 = \"字符串不能为空\";\n\nlet myrequirefun = function requireinstead(packagename) {\n    if (packagename === \"\") {\n        throw new TypeError(字符串不能为空$1);\n    }\n    if (typeof packagename !== \"string\") {\n        throw new TypeError(参数必须为字符串);\n    }\n    const findpackage = IMPORTCJSAMDUMD[GLOBALPACKAGESTORE][packagename];\n    if (findpackage) {\n        return findpackage.default;\n    } else {\n        throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\n    }\n};\n\ndefine.exports = {};\n\nfunction isFunction(it) {\n    const op = Object.prototype;\n    const ostring = op.toString;\n    return \"function\" === typeof it && ostring.call(it) === \"[object Function]\";\n}\n\nfunction define(name, deps, callback) {\n    define.exports = {};\n    define.amd = true;\n    const defineglobalDefQueue = [];\n    if (typeof name !== \"string\") {\n        callback = deps;\n        deps = name;\n        name = null;\n    }\n    if (!isArray(deps)) {\n        callback = deps;\n        deps = null;\n    }\n    if (!deps && isFunction(callback)) {\n        deps = [];\n    }\n    defineglobalDefQueue.push([ name, deps, callback ]);\n    const canshu = defineglobalDefQueue[0][1].map(e => myrequirefun(e));\n    define.exports = defineglobalDefQueue[0][2](...canshu);\n}\n\ndefine.amd = true;\n\nfunction assertstring(s) {\n    if (s === \"\") {\n        throw new TypeError(字符串不能为空$1);\n    }\n    if (typeof s !== \"string\") {\n        throw new TypeError(参数必须为字符串);\n    }\n    return true;\n}\n\nfunction 定义default(target, def) {\n    if (def[Symbol.toStringTag] === \"Module\" && def.default) {\n        def = def.default;\n    }\n    Object.defineProperty(target, \"default\", {\n        enumerable: true,\n        get() {\n            return def;\n        }\n    });\n}\n\nconst 补充加载依赖的模块网址 = \"补充加载依赖的模块网址\";\n\nIMPORTCJSAMDUMD[GLOBALPACKAGESTORE] = IMPORTCJSAMDUMD[GLOBALPACKAGESTORE] || {};\n\nasync function IMPORTCJSAMDUMD(...inarguments) {\n    const importcjsamdumd = IMPORTCJSAMDUMD;\n    return await oldimportcjsamdumd(...inarguments).catch(handleerror);\n    async function handleerror(e) {\n        console.warn(e);\n        if (e instanceof cantfindError && e.urlorname) {\n            if (isurl(e.urlorname)) {\n                console.log(补充加载依赖的模块网址, e.urlorname);\n                await importcjsamdumd(e.urlorname);\n                return await importcjsamdumd(...inarguments);\n            } else if (isplainobject(inarguments[0]) && Reflect.has(inarguments[0], e.urlorname)) {\n                await oldimportcjsamdumd(...inarguments);\n                return await oldimportcjsamdumd(...inarguments);\n            } else {\n                throw e;\n            }\n        } else {\n            throw e;\n        }\n    }\n}\n\nIMPORTCJSAMDUMD.REQUIREPACKAGE = getmodule;\n\nexport default IMPORTCJSAMDUMD;\n//# sourceMappingURL=index.esm.js.map\n"],"names":["dynamicimportshimfun","dynamicimportshim","Function","error","async","url","TypeError","URL","href","Promise","resolve","reject","s","document","createElement","clearsideeffect","e","head","removeChild","removescript","f","window","removeEventListener","removeerrorlisten","errorhandler","revokeObjectURL","src","addEventListener","topLevelBlobUrl","source","createObjectURL","Blob","type","createBlob","onload","Symbol","for","Reflect","deleteProperty","onerror","Error","appendChild","字符串不能为空","加载的模块没有输出","namesymbol","urlsymbol","sourcesymbol","coreload","packagename","fetchpromisetext","fetch","then","response","ok","text","moduletype","exports","[object Object]","toStringTag","module","modulesrcfun","define","moduleexport","default","undefined","myrequirefun","scripttext","模块加载函数","toString","call","urlorname","assertstring","String","baseurl","startsWith","endsWith","格式化url","objurl","a","pathname","split","length","origin","join","getbaseurl","exportmodule","非空对象","o","Object","keys","JSON","stringify","exportdefault","定义default","处理非es模块","parse","SyntaxError","filter","t","forEach","key","defineProperty","enumerable","get","defineProperties","value","writable","IMPORTCJSAMDUMD","GLOBALPACKAGESTORE","同时发起多个字符串","all","Array","from","map","非法字符串","namesymbol$1","urlsymbol$1","传入的参数必须是个object","newobjjson","obj","同时发起多个","oldimportcjsamdumd","isplainobject","输入参数array","suoyouimportpromise","objecttoreturn","m","isArray","args","传入参数arr","flat","arguments","getmodule","cantfindError","message","super","this","模块仓库中没有找到","prototype","字符串不能为空$1","参数必须为字符串","findpackage","Proxy","set","__proto__","name","deps","callback","amd","defineglobalDefQueue","it","ostring","isFunction","push","canshu","target","def","inarguments","importcjsamdumd","catch","flag","isurl","has","REQUIREPACKAGE"],"mappings":"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"}