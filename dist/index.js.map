{"version":3,"file":"index.js","sources":["../src/cantfindError.ts","../src/assertstring.ts","../src/alias.ts","../src/getmodule.ts","../src/isplainobject.ts","../src/isurl.ts","../src/arrayimportall.ts","../src/cachedfetchtext.ts","../src/ismodule.ts","../src/define-default.ts","../src/isarray.ts","../src/isfunction.ts","../src/define.ts","../src/dynamicimportshim.ts","../src/esmdefinegetter.ts","../src/getbaseurl.ts","../src/formaturl.ts","../src/myrequirefun.ts","../src/formatedurlrequire.ts","../src/notemptyobj.ts","../src/handlecjsmodule.ts","../src/module.ts","../src/util-deps.ts","../src/coreload.ts","../src/newobjjson.ts","../src/oldimport.ts","../src/importcjsamdumd.ts"],"sourcesContent":["export class cantfindError extends Error {\r\n  urlorname: string;\r\n  constructor(message: string, urlorname: string) {\r\n    super(message);\r\n    this.urlorname = urlorname;\r\n  }\r\n}\r\n","import { 参数必须为字符串, 字符串不能为空 } from \"./importcjsamdumd\";\r\n\r\nexport function assertstring(s: string): asserts s is string {\r\n  if (s === \"\") {\r\n    throw new TypeError(字符串不能为空);\r\n  }\r\n  if (typeof s !== \"string\") {\r\n    throw new TypeError(参数必须为字符串);\r\n  }\r\n  //   return true;\r\n}\r\n","export const packagealias: Record<string, string> = {};\r\n","import { assertstring } from \"./assertstring\";\r\nimport { cantfindError } from \"./cantfindError\";\r\nimport { PACKAGESTORE, 模块仓库中没有找到 } from \"./importcjsamdumd\";\r\nimport { packagealias } from \"./alias\";\r\n\r\nexport function getmodule(packagename: string) {\r\n  assertstring(packagename);\r\n  //   \"use strict\";\r\n  //   if (packagename === \"\") {\r\n  //     throw new TypeError(字符串不能为空);\r\n  //   }\r\n  //   if (typeof packagename !== \"string\") {\r\n  //     throw new TypeError(参数必须为字符串);\r\n  //   }\r\n  const findpackage =\r\n    PACKAGESTORE[packagename] || PACKAGESTORE[packagealias[packagename]];\r\n  if (findpackage) {\r\n    Object.freeze(findpackage);\r\n    return findpackage;\r\n    /*new Proxy(findpackage, {\r\n        set() {\r\n          return false;\r\n        },\r\n        deleteProperty() {\r\n          return false;\r\n        }\r\n      });*/\r\n  } else {\r\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\r\n  }\r\n}\r\n","import { PlainObj } from \"./oldimport\";\r\n\r\nexport function isplainobject(o: any): o is PlainObj {\r\n  return (\r\n    typeof o === \"object\" &&\r\n    {}.toString.call(o) === \"[object Object]\" &&\r\n    o instanceof Object\r\n    //&&\r\n    //   o.__proto__ === Object.prototype\r\n  );\r\n}\r\n","import { assertstring } from \"./assertstring\";\r\n\r\nexport function isurl(url: string) {\r\n  var flag = false;\r\n  try {\r\n    assertstring(url);\r\n    // if (url === \"\") {\r\n    //   throw new TypeError(字符串不能为空);\r\n    // }\r\n    // if (typeof url !== \"string\") {\r\n    //   throw new TypeError(参数必须为字符串);\r\n    // }\r\n    url = new URL(url).href;\r\n    flag = true;\r\n  } catch (error) {\r\n    flag = false;\r\n  }\r\n  return flag;\r\n}\r\n","import { MODULE } from \"./module\";\r\n\r\nexport async function 同时发起多个字符串(\r\n  a: Array<string>,\r\n  importcjsamdumd: Function\r\n): Promise<Array<MODULE>> {\r\n  return await Promise.all(\r\n    a.map(e => {\r\n      return importcjsamdumd(e);\r\n    })\r\n  );\r\n}\r\nexport async function 同时发起多个entries(\r\n  a: any[][],\r\n  importcjsamdumd: Function\r\n): Promise<Array<MODULE>> {\r\n  return await Promise.all(\r\n    a.map(e => {\r\n      return importcjsamdumd(e[0], e[1]);\r\n    })\r\n  );\r\n}\r\n","import { set, get } from \"./coreload\";\r\nexport type CODETYPE = \"json\" | \"js\";\r\nexport default async function(url: string): Promise<[string, CODETYPE]> {\r\n  let codetype: CODETYPE | undefined;\r\n  const cachedtext = get(cachedurltotext, url);\r\n  //   cachedurltotext.get(url);\r\n  if (cachedtext) {\r\n    return cachedtext;\r\n  } else {\r\n    const textsource = await fetch(url).then(async response => {\r\n      if (!response.ok) {\r\n        throw new Error(\"fetch failed \" + url);\r\n      }\r\n      const contenttype = response.headers.get(\"content-type\");\r\n      if (contenttype?.includes(\"javascript\")) {\r\n        codetype = \"js\";\r\n      } else if (contenttype?.includes(\"json\")) {\r\n        codetype = \"json\";\r\n      } else {\r\n        throw new Error(\"invalid content-type \" + codetype);\r\n      }\r\n      return await response.text();\r\n    });\r\n    set(cachedurltotext, url, textsource);\r\n    // cachedurltotext.set(url, textsource);\r\n    if (!codetype) {\r\n      throw new Error();\r\n    }\r\n    return [textsource, codetype];\r\n  }\r\n}\r\nconst cachedurltotext: Record<string, string> = {}; // new Map<string, string>();\r\n","export function ismodule(a: any): boolean {\r\n  return {}.toString.call(a) === \"[object Module]\";\r\n}\r\n","import { defineProperty, get } from \"./coreload\";\r\nimport { ismodule } from \"./ismodule\";\r\nimport { isplainobject } from \"./isplainobject\";\r\n\r\nexport function 定义default(\r\n  target: Record<string, any>,\r\n  def: { [x: string]: string; default: any } | Function\r\n) {\r\n  def = get(def, \"default\") ? get(def, \"default\") : def;\r\n  // /*   if (\r\n  //     get(def, Symbol.toStringTag) === /* def[Symbol.toStringTag] */ \"Module\" &&\r\n  //     def.default\r\n  //   ) {\r\n  //     def = def.default;\r\n  //   } */\r\n  if (!ismodule(def) && !isplainobject(def)) {\r\n    /* 如果是个module或者plainobject则,不定义default */\r\n    // try {\r\n    defineProperty(target, \"default\", {\r\n      enumerable: true,\r\n      get() {\r\n        return def;\r\n      }\r\n    });\r\n    //   } catch (error) {}\r\n  }\r\n}\r\n","export function isArray(a: any): a is Array<any> {\r\n  return (\r\n    // typeof a === \"object\" &&\r\n    Array.isArray(a) && {}.toString.call(a) === \"[object Array]\"\r\n  );\r\n}\r\n","export function isFunction(it: any): it is Function {\r\n  const op = {}; // Object.prototype;\r\n  const ostring = op.toString;\r\n  const tag = ostring.call(it);\r\n  return (\r\n    (\"function\" === typeof it && tag === \"[object Function]\") ||\r\n    tag === \"[object AsyncFunction]\"\r\n  );\r\n}\r\n","import { isArray } from \"./isarray\";\r\nimport { isFunction } from \"./isfunction\";\r\n// import { myrequirefun } from \"./myrequirefun\";\r\n\r\n// define.exports = {};\r\ndefine.cmd = true;\r\ndefine.amd = true;\r\nfunction define(name: any, deps?: any, callback?: any) {\r\n  \"use strict\";\r\n  //   define.exports = {};\r\n  //   define.amd = true;\r\n  //   const defineglobalDefQueue = [];\r\n  if (typeof name !== \"string\") {\r\n    callback = deps;\r\n    deps = name;\r\n    name = null;\r\n  }\r\n  if (!isArray(deps)) {\r\n    callback = deps;\r\n    deps = null;\r\n  }\r\n  if (!deps && isFunction(callback)) {\r\n    deps = [];\r\n  }\r\n  const defineglobalDefQueue: [string, string[], Function] = [\r\n    name,\r\n    deps,\r\n    callback\r\n  ];\r\n  console.log(defineglobalDefQueue);\r\n  return defineglobalDefQueue;\r\n  //   const canshu = defineglobalDefQueue[1].map((e: string) => myrequirefun(e));\r\n  //   define.exports = defineglobalDefQueue[2](...canshu);\r\n}\r\nexport { define };\r\n","/* eslint-disable no-empty */\r\n\"use strict\";\r\n\r\nimport { get, set } from \"./coreload\";\r\n// import { Module } from \"./importcjsamdumd\";\r\nimport { assertstring } from \"./assertstring\";\r\ntype Module = Record<any, any>;\r\nexport { createBlob };\r\nfunction createBlob(source: string) {\r\n  return URL.createObjectURL(\r\n    new Blob([source], { type: \"application/javascript\" })\r\n  );\r\n}\r\n// const 参数必须为字符串 = \"Parameter must be a string\";\r\n// const 字符串不能为空 = \"String cannot be empty\";\r\ntype dynamicimport = (url: string) => Promise<Module>;\r\nconst dynamicimportshimfun = (() => {\r\n  \"use strict\";\r\n\r\n  let dynamicimportshim: dynamicimport;\r\n  //   import('querystring')\r\n  try {\r\n    dynamicimportshim = Function(\"u\", \"return import(u)\") as dynamicimport;\r\n  } catch (error) {\r\n    dynamicimportshim = async function(url: string): Promise<Module> {\r\n      assertstring(url);\r\n      //   if (url === \"\") {\r\n      //     throw new TypeError(字符串不能为空);\r\n      //   }\r\n      //   if (typeof url !== \"string\") {\r\n      //     throw new TypeError(参数必须为字符串);\r\n      //   }\r\n      url = new URL(url).href;\r\n\r\n      return await getnewimportpromise(url);\r\n    };\r\n  }\r\n  return dynamicimportshim;\r\n})();\r\nexport default dynamicimportshimfun;\r\nfunction getnewimportpromise(url: string): Promise<Module> {\r\n  const symbolkey = Symbol.for(\"import-\" + url);\r\n  return new Promise((resolve, reject) => {\r\n    const s = document.createElement(\"script\");\r\n    function clearsideeffect() {\r\n      removescript(s);\r\n      removeerrorlisten(errorhandler);\r\n      URL.revokeObjectURL(s.src);\r\n      s.onload = s.onerror = null;\r\n    }\r\n    function removeerrorlisten(f: (evt: ErrorEvent) => void) {\r\n      try {\r\n        window.removeEventListener(\"error\", f);\r\n      } catch (error) {}\r\n    }\r\n    function removescript(e: HTMLScriptElement) {\r\n      e.remove();\r\n      //try {\r\n      //   document.head.removeChild(e);\r\n      //  } catch (error) {}\r\n    }\r\n    function errorhandler(e: ErrorEvent) {\r\n      console.warn(e.error);\r\n      reject(e.error);\r\n      clearsideeffect();\r\n    }\r\n    window.addEventListener(\"error\", errorhandler);\r\n    const topLevelBlobUrl = createBlob(\r\n      `import*as m from'${url}';\\nwindow[Symbol.for('${\"import-\" + url}')]=m`\r\n    );\r\n    s.type = \"module\";\r\n    s.src = topLevelBlobUrl;\r\n    s.async = true;\r\n    s.onload = () => {\r\n      if (\r\n        Reflect.has(window, symbolkey)\r\n        /* symbolkey in */\r\n      ) {\r\n        const moduleoutput = get(window, symbolkey);\r\n        resolve(moduleoutput /* [Symbol.for(\"import-\" + url)] */);\r\n        set(window, symbolkey, undefined);\r\n        clearsideeffect();\r\n      }\r\n    };\r\n    s.onerror = () => {\r\n      reject(new Error(\"import load failed from network\" + url));\r\n      clearsideeffect();\r\n    };\r\n    document.head.appendChild(s);\r\n  });\r\n}\r\n","import { defineProperty, get } from \"./coreload\";\r\nimport { isFunction } from \"./isfunction\";\r\n\r\nexport function esmdefinegetter(\r\n  moduleexport: Record<string, any>,\r\n  exportdefault: Record<string, any> | Function\r\n) {\r\n  if (\r\n    exportdefault &&\r\n    (isFunction(exportdefault) || typeof exportdefault === \"object\")\r\n  ) {\r\n    Object.keys(exportdefault)\r\n      // .filter(t => t !== \"default\")\r\n      .forEach(key => {\r\n        try {\r\n          defineProperty(moduleexport, key, {\r\n            enumerable: true,\r\n            get() {\r\n              return get(exportdefault, key);\r\n            }\r\n          });\r\n        } catch (error) {}\r\n      });\r\n  }\r\n}\r\n","export function getbaseurl(url: string) {\r\n  var objurl = new URL(url);\r\n  var a = objurl.pathname.split(\"/\");\r\n  a[a.length - 1] = \"\";\r\n  var path = objurl.origin + a.join(\"/\");\r\n  return path;\r\n}\r\n","export function 格式化url(baseurl: string, urlorname: string) {\r\n  if (\r\n    String(urlorname).startsWith(\"./\") ||\r\n    String(urlorname).startsWith(\"../\")\r\n  ) {\r\n    if (\r\n      !(\r\n        String(urlorname).endsWith(\".js\") ||\r\n        urlorname.endsWith(\".mjs\") ||\r\n        urlorname.endsWith(\".json\") ||\r\n        urlorname.endsWith(\".css\") ||\r\n        urlorname.endsWith(\".html\")\r\n      )\r\n    ) {\r\n      urlorname += \".js\";\r\n    }\r\n    urlorname = new URL(baseurl + urlorname).href;\r\n  }\r\n  return urlorname;\r\n}\r\n","import { assertstring } from \"./assertstring\";\r\nimport { cantfindError } from \"./cantfindError\";\r\nimport { PACKAGESTORE, 模块仓库中没有找到 } from \"./importcjsamdumd\";\r\nimport { packagealias } from \"./alias\";\r\n\r\nexport const myrequirefun = function requireinstead(packagename: string) {\r\n  assertstring(packagename);\r\n\r\n  const findpackage =\r\n    PACKAGESTORE[packagename] || PACKAGESTORE[packagealias[packagename]];\r\n  if (findpackage) {\r\n    Object.freeze(findpackage);\r\n    return findpackage.default ? findpackage.default : findpackage;\r\n  } else {\r\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\r\n  }\r\n};\r\n","import { getbaseurl } from \"./getbaseurl\";\r\nimport { assertstring } from \"./assertstring\";\r\n// import { myrequirefun } from \"./IMPORTCJSAMDUMD\";\r\nimport { 格式化url } from \"./formaturl\";\r\nimport { myrequirefun } from \"./myrequirefun\";\r\n\r\nexport const formatedurlrequire = (urlorname: string, url: string) => {\r\n  assertstring(urlorname);\r\n  if (\r\n    String(urlorname).startsWith(\"./\") ||\r\n    String(urlorname).startsWith(\"../\")\r\n  ) {\r\n    const formatedurl = getnormalizedurl(urlorname, url); //格式化url(baseurl, urlorname);\r\n    return myrequirefun(formatedurl);\r\n  } else {\r\n    return myrequirefun(urlorname);\r\n  }\r\n  // urlorname = String(urlorname);\r\n  /*   if (urlorname === \"\") {\r\n        throw new TypeError(字符串不能为空);\r\n      } */\r\n\r\n  //   const baseurl = getbaseurl(url);\r\n};\r\nexport function getnormalizedurl(relativeurl: string, url: string) {\r\n  if (\r\n    String(relativeurl).startsWith(\"./\") ||\r\n    String(relativeurl).startsWith(\"../\")\r\n  ) {\r\n    const baseurl = getbaseurl(url);\r\n    const formatedurl = 格式化url(baseurl, relativeurl);\r\n    return formatedurl;\r\n  } else {\r\n    return relativeurl;\r\n  }\r\n}\r\n","export function 非空对象(o: any) {\r\n  return !!(\r\n    typeof o !== \"object\" ||\r\n    Object.keys(o).length ||\r\n    JSON.stringify(o) !== \"{}\"\r\n  );\r\n}\r\n","// import { define } from \"./IMPORTCJSAMDUMD\";\r\n// import { 加载的模块没有输出 } from \"./coreload\";\r\n// import { define } from \"./define\";\r\nimport { 非空对象 } from \"./notemptyobj\";\r\n\r\nexport function 处理非es模块(\r\n  //   moduleexport: { default: any },\r\n  exportmodule: any[]\r\n  //   url: string,\r\n  //   packagename: string | undefined\r\n) {\r\n  /* if (typeof exportmodule === \"undefined\") {\r\n    exportmodule = [{}, {}, {}];\r\n  } */\r\n  //   if (typeof define.exports === \"undefined\") {\r\n  //     define.exports = {};\r\n  //   }\r\n\r\n  if (非空对象(exportmodule[0])) {\r\n    const exportdefault = exportmodule[0];\r\n    return exportdefault;\r\n    // 定义default(moduleexport, exportdefault);\r\n  } else if (非空对象(exportmodule[1])) {\r\n    const exportdefault = exportmodule[1];\r\n    // 定义default(moduleexport, exportdefault);\r\n    return exportdefault;\r\n  } /* else if (非空对象(exportmodule[2])) {\r\n    const exportdefault = exportmodule[2];\r\n    return exportdefault;\r\n    // 定义default(moduleexport, exportdefault);\r\n  }  */ else {\r\n    // console.warn(加载的模块没有输出, url, packagename);\r\n    /*   reject(\r\n          Error(\r\n            加载的模块没有输出 + \" \" + packagename + \" \" + url\r\n          )\r\n        );\r\n        return;*/\r\n  }\r\n}\r\n","export const depssymbol = Symbol(\"deps\");\r\nexport const typesymbol = Symbol(\"type\");\r\n// export const namesymbol = Symbol(\"name\");\r\nexport const urlsymbol = Symbol(\"url\");\r\nexport const sourcesymbol = Symbol(\"source\");\r\nexport enum MODULETYPE {\r\n  amd = \"amd\",\r\n  cjs = \"cjs\",\r\n  esm = \"esm\",\r\n  json = \"json\"\r\n}\r\nexport interface MODULE extends Record<string, any> {\r\n  [Symbol.toStringTag]: \"Module\";\r\n  [depssymbol]: string[];\r\n  [typesymbol]: MODULETYPE;\r\n  [urlsymbol]: string;\r\n  [sourcesymbol]: string;\r\n}\r\n","/**\r\n * util-deps.js - The parser for dependencies\r\n * ref: tests/research/parse-dependencies/test.html\r\n * ref: https://github.com/seajs/crequire\r\n */\r\nvar REQUIRE_RE = /\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|\\/\\*[\\S\\s]*?\\*\\/|\\/(?:\\\\\\/|[^\\/\\r\\n])+\\/(?=[^\\/])|\\/\\/.*|\\.\\s*require|(?:^|[^$])\\brequire\\s*\\(\\s*([\"'])(.+?)\\1\\s*\\)/g;\r\nvar SLASH_RE = /\\\\\\\\/g;\r\n\r\nfunction parseDependencies(code: string): string[] {\r\n  var ret: string[] = [];\r\n\r\n  code.replace(SLASH_RE, \"\").replace(REQUIRE_RE, function(m, m1, m2, ...args) {\r\n    if (m2) {\r\n      ret.push(m2);\r\n    }\r\n    return \"\";\r\n  });\r\n\r\n  return ret;\r\n}\r\nexport { parseDependencies };\r\n","import { packagealias } from \"./alias\";\r\nimport cachedfetchtext, { CODETYPE } from \"./cachedfetchtext\";\r\nimport { 定义default } from \"./define-default\";\r\nimport { define } from \"./define.js\";\r\n/* eslint-disable no-empty */\r\nimport dynamicimportshim from \"./dynamicimportshim.js\";\r\nimport { esmdefinegetter } from \"./esmdefinegetter\";\r\nimport { formatedurlrequire, getnormalizedurl } from \"./formatedurlrequire.js\";\r\nimport { 处理非es模块 } from \"./handlecjsmodule.js\";\r\nimport importcjsamdumd, { PACKAGESTORE } from \"./importcjsamdumd.js\";\r\nimport {\r\n  depssymbol,\r\n  MODULE,\r\n  MODULETYPE,\r\n  sourcesymbol,\r\n  typesymbol,\r\n  urlsymbol\r\n} from \"./module\";\r\nimport { myrequirefun } from \"./myrequirefun\";\r\nimport { parseDependencies } from \"./util-deps\";\r\nexport const { get, set, defineProperty } = Reflect;\r\n\r\nexport const 加载的模块没有输出 = \"加载的模块没有输出\";\r\n\r\nexport default async (url: string, packagename?: string) => {\r\n  if (packagename) {\r\n    packagealias[packagename] = url;\r\n  }\r\n\r\n  return await new Promise(主核心加载模块函数);\r\n  function 主核心加载模块函数(\r\n    resolve: (value?: any) => void,\r\n    reject: (reason?: any) => void\r\n  ) {\r\n    return ((resolve, reject) => {\r\n      return (async () => {\r\n        try {\r\n          return await (async () => {\r\n            let fetchpromisetext: string;\r\n            let codetype: CODETYPE | undefined;\r\n            try {\r\n              try {\r\n                [fetchpromisetext, codetype] = await cachedfetchtext(url);\r\n              } catch (e) {\r\n                console.warn(e);\r\n                reject(e);\r\n                return;\r\n              }\r\n              const moduleexport: MODULE = Object.create(null);\r\n              moduleexport[urlsymbol] = url;\r\n              let moduletype: MODULETYPE;\r\n              const scripttext = fetchpromisetext;\r\n              let modulesrcfun: string;\r\n              if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\r\n                defineProperty(moduleexport, Symbol.toStringTag, {\r\n                  value: \"Module\"\r\n                });\r\n              }\r\n              modulesrcfun = scripttext;\r\n              moduleexport[depssymbol] = [];\r\n              moduleexport[sourcesymbol] = modulesrcfun;\r\n\r\n              if (\"json\" === codetype) {\r\n                const moduleexportdefault = JSON.parse(scripttext);\r\n                console.log(\"检测到json模块 \" + url);\r\n\r\n                moduletype = MODULETYPE[\"json\"];\r\n                esmdefinegetter(moduleexport, moduleexportdefault);\r\n                moduleexport[typesymbol] = moduletype;\r\n                Object.freeze(moduleexport);\r\n                PACKAGESTORE[url] = moduleexport;\r\n                resolve(moduleexport);\r\n                return;\r\n              } else {\r\n                try {\r\n                  const exports_exports = { [Symbol.toStringTag]: \"Module\" };\r\n                  const module = {\r\n                    exports: { [Symbol.toStringTag]: \"Module\" }\r\n                  };\r\n                  //   define.exports = {};\r\n\r\n                  try {\r\n                    // (function() {\r\n                    let isamd = false;\r\n                    const 模块加载函数 = new Function(\r\n                      \"require\",\r\n                      \"define\",\r\n                      \"module\",\r\n                      \"exports\",\r\n                      `\r\n                        \"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\n\r\n                        `\r\n                    );\r\n\r\n                    //   modulesrcfun = scripttext;\r\n                    /* return */\r\n\r\n                    moduleexport[depssymbol] = parseDependencies(\r\n                      scripttext\r\n                    ).map(urlorname => {\r\n                      return getnormalizedurl(urlorname, url);\r\n                      //   return formatedurl;\r\n                    });\r\n                    await importcjsamdumd(moduleexport[depssymbol]);\r\n                    let amdfactory: Function = () => {};\r\n                    模块加载函数.call(\r\n                      module.exports,\r\n                      (name: string) => formatedurlrequire(name, url),\r\n                      (name: any, deps?: any, callback?: any) => {\r\n                        const defineglobalDefQueue = define(name, deps, callback);\r\n                        isamd = true;\r\n                        amdfactory = defineglobalDefQueue[2];\r\n                        moduleexport[depssymbol] = defineglobalDefQueue[1].map(\r\n                          urlorname => {\r\n                            return getnormalizedurl(urlorname, url);\r\n                          }\r\n                        );\r\n                      },\r\n                      module,\r\n                      exports_exports\r\n                    );\r\n                    // })();\r\n                    if (isamd) {\r\n                      moduletype = MODULETYPE.amd;\r\n                      await importcjsamdumd(moduleexport[depssymbol]);\r\n                      module.exports = amdfactory.call(\r\n                        module.exports,\r\n                        ...moduleexport[depssymbol].map((e: string) =>\r\n                          myrequirefun(e)\r\n                        )\r\n                      );\r\n                    } else {\r\n                      moduletype = MODULETYPE.cjs;\r\n                    }\r\n\r\n                    const exportmodule = [\r\n                      exports_exports ? exports_exports : {},\r\n                      module.exports ? module.exports : {}\r\n                      //   define.exports ? define.exports : {}\r\n                    ];\r\n                    const usefulexport = 处理非es模块(exportmodule);\r\n\r\n                    if (usefulexport) {\r\n                      定义default(moduleexport, usefulexport);\r\n                      esmdefinegetter(moduleexport, usefulexport);\r\n\r\n                      //\r\n                    }\r\n                  } catch (e) {\r\n                    console.warn(e); // {\r\n                    /* try */ /* } catch (error)  */ {\r\n                      //   console.warn(error);\r\n                      if (e instanceof SyntaxError) {\r\n                        const topLevelBlobUrl = url;\r\n                        // modulesrcfun = scripttext;\r\n                        try {\r\n                          const exportdefault = await dynamicimportshim(\r\n                            topLevelBlobUrl\r\n                          );\r\n                          moduleexport[depssymbol] = [];\r\n                          moduletype = MODULETYPE[\"esm\"];\r\n                          esmdefinegetter(moduleexport, exportdefault);\r\n                        } catch (e) {\r\n                          console.warn(e);\r\n                          reject(e);\r\n                          return;\r\n                        }\r\n                      } else {\r\n                        console.warn(e);\r\n                        reject(e);\r\n                        return;\r\n                      }\r\n                    }\r\n                  }\r\n                  moduleexport[typesymbol] = moduletype;\r\n                  PACKAGESTORE[url] = moduleexport;\r\n\r\n                  if (moduleexport.default) {\r\n                    esmdefinegetter(moduleexport, moduleexport.default);\r\n                  }\r\n\r\n                  Object.freeze(moduleexport);\r\n                  resolve(moduleexport);\r\n                  return;\r\n                } catch (e) {\r\n                  console.warn(e);\r\n                  reject(e);\r\n                  return;\r\n                }\r\n              }\r\n            } catch (e) {\r\n              console.warn(e);\r\n              reject(e);\r\n              return;\r\n            }\r\n          })();\r\n        } catch (e) {\r\n          console.warn(e);\r\n          reject(e);\r\n          return;\r\n        }\r\n      })();\r\n    })(resolve, reject);\r\n  }\r\n};\r\n","import { PlainObj, 传入的参数必须是个object } from \"./oldimport\";\r\n\r\nexport function newobjjson(obj: PlainObj) {\r\n  if (typeof obj !== \"object\") {\r\n    throw new TypeError(传入的参数必须是个object);\r\n  }\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\n","// import { 同时发起多个entries } from \"./arrayimportall.js\";\r\nimport { 同时发起多个entries, 同时发起多个字符串 } from \"./arrayimportall.js\";\r\nimport { assertstring } from \"./assertstring.js\";\r\nimport coreload, {\r\n  /* namesymbol, urlsymbol */ /* , */ get\r\n} from \"./coreload.js\";\r\nimport { getmodule } from \"./getmodule.js\";\r\nimport {\r\n  //   assertstring,\r\n  //   getmodule,\r\n  //   isArray,\r\n  //   isplainobject,\r\n  PACKAGESTORE\r\n} from \"./importcjsamdumd\";\r\nimport { isArray } from \"./isarray.js\";\r\nimport { isplainobject } from \"./isplainobject.js\";\r\nimport { MODULE, urlsymbol } from \"./module.js\";\r\nimport { newobjjson } from \"./newobjjson.js\";\r\nconst 输入的类型错误输入的类型必须是字符串或者数组或对象 =\r\n  \"The type entered is incorrect, the type entered must be a string or an array or an object\";\r\n// export const 非法字符串 = \"输入的类型错误,输入的字符串不能为空,不能为undefined\";\r\n// export const namesymbol = Symbol.for(\"name\");\r\n// export const urlsymbol = Symbol.for(\"url\");\r\nexport const 传入的参数必须是个object =\r\n  \"The argument passed in must be an object\";\r\nexport type PlainObj = Record<any, any>;\r\n\r\nexport default /* (() => {\r\n  return */ async function oldimportcjsamdumd(\r\n  url: any,\r\n  packagename?: any\r\n): Promise<any> {\r\n  \"use strict\";\r\n  if (isplainobject(url)) {\r\n    return await (async url => {\r\n      const urlobj = newobjjson(url);\r\n      /* 应该是value,key的数组,与  Object.entries相反*/\r\n      const 输入参数array = Object.entries(urlobj).map(([key, value]) => [\r\n        value,\r\n        key\r\n      ]);\r\n      let suoyouimportpromise: Array<MODULE> = [];\r\n      try {\r\n        suoyouimportpromise = await 同时发起多个entries(\r\n          输入参数array,\r\n          oldimportcjsamdumd\r\n        );\r\n      } catch (error) {\r\n        console.warn(error);\r\n        suoyouimportpromise = await 同时发起多个entries(\r\n          输入参数array,\r\n          oldimportcjsamdumd\r\n        );\r\n      } finally {\r\n        suoyouimportpromise = await 同时发起多个entries(\r\n          输入参数array,\r\n          oldimportcjsamdumd\r\n        );\r\n      }\r\n      let objecttoreturn: PlainObj = {};\r\n      const objvalues = Object.keys(urlobj);\r\n      objvalues.forEach((key, index) => {\r\n        objecttoreturn[key] = suoyouimportpromise[index];\r\n      });\r\n      //   suoyouimportpromise.forEach(m => {\r\n      //     objecttoreturn[m[namesymbol]] = m;\r\n      //   });\r\n      return objecttoreturn;\r\n    })(url);\r\n  } else if (\r\n    isArray(\r\n      url\r\n    ) /* && typeof url === \"object\" */ /*  ||\r\n    typeof packagename === \"object\" */\r\n  ) {\r\n    return await (async (...args) => {\r\n      let suoyouimportpromise = [];\r\n      const 传入参数arr = args; //Array(...args).flat(1 / 0); //JSON.parse(JSON.stringify(Array(...args).flat()));\r\n      try {\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      } catch (error) {\r\n        console.warn(error);\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      } finally {\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      }\r\n      return suoyouimportpromise;\r\n    })(...url);\r\n  } else if (typeof url === \"string\" || typeof packagename === \"string\") {\r\n    assertstring(url);\r\n    return await (async (url: string, packagename?: string) => {\r\n      /*   if (typeof url === \"undefined\" || packagename === \"\") {\r\n          throw new TypeError(非法字符串);\r\n        } */\r\n      if (typeof packagename === \"undefined\") {\r\n        packagename = new URL(url).href;\r\n      }\r\n      url = new URL(url).href;\r\n      if (\r\n        typeof PACKAGESTORE[packagename] !== \"undefined\" &&\r\n        typeof PACKAGESTORE[packagename].default !== \"undefined\" &&\r\n        get(PACKAGESTORE[packagename], urlsymbol) === url\r\n        //  [urlsymbol] === url\r\n      ) {\r\n        return getmodule(packagename);\r\n      } else if (\r\n        typeof PACKAGESTORE[url] !== \"undefined\" &&\r\n        typeof PACKAGESTORE[url].default !== \"undefined\" &&\r\n        get(PACKAGESTORE[url], urlsymbol) === url\r\n        //   PACKAGESTORE[url][urlsymbol] === url\r\n      ) {\r\n        // PACKAGESTORE[packagename] = PACKAGESTORE[url];\r\n        //   PACKAGESTORE[packagename][namesymbol] = packagename;\r\n        // set(PACKAGESTORE[packagename], namesymbol, packagename);\r\n        return getmodule(url);\r\n      } else {\r\n        return await coreload(url, packagename);\r\n      }\r\n    })(url, packagename);\r\n  } else {\r\n    // debugger;\r\n    throw new TypeError(输入的类型错误输入的类型必须是字符串或者数组或对象);\r\n  }\r\n}\r\n// })();\r\n","\"use strict\";\r\n\r\nimport { cantfindError } from \"./cantfindError\";\r\nimport { getmodule } from \"./getmodule\";\r\nimport { isplainobject } from \"./isplainobject\";\r\nimport { isurl } from \"./isurl\";\r\nimport oldimportcjsamdumd from \"./oldimport\";\r\nimport { get } from \"./coreload\";\r\nimport type { MODULE } from './module';\r\n\r\nexport const 模块仓库中没有找到 =\r\n  \"Cannot find module in packagestore, Not found in module repository, \";\r\n\r\n// export const GLOBALPACKAGESTORE = \"PACKAGESTORE\";\r\n\r\nexport const 参数必须为字符串 = \"Parameter must be a string\";\r\n(\"use strict\");\r\nexport const 字符串不能为空 = \"String cannot be empty\";\r\n\r\n// const importcjsamdumd = (() => {\r\n// (\"use strict\");\r\nexport const 补充加载依赖的模块网址 = \"补充加载依赖的模块网址\";\r\n\r\n// const importcjsamdumd = importcjsamdumd;\r\n// export type MODULE = Record<any, any>;\r\nexport default function importcjsamdumd(url: string[]): Promise<MODULE[]>;\r\nexport default function importcjsamdumd(\r\n  url: string,\r\n  packagename?: string\r\n): Promise<MODULE>;\r\nexport default function importcjsamdumd(\r\n  url: Record<string, string>\r\n): Promise<Record<string, MODULE>>;\r\nexport default async function importcjsamdumd(\r\n  url: any,\r\n  packagename?: any\r\n): Promise<any> {\r\n  let tryfailedtimes = 0;\r\n  //   const inarguments: [any, any] = [url, packagename];\r\n  //   const importcjsamdumd = importcjsamdumd;\r\n  return await oldimportcjsamdumd(url, packagename).catch(handleerror);\r\n  async function retryimport(url1: any, nam1: any, url2: any, name2: any) {\r\n    try {\r\n      await oldimportcjsamdumd(url1, nam1).catch(handleerror);\r\n      return await oldimportcjsamdumd(url2, name2);\r\n    } catch (error) {\r\n      console.warn(error);\r\n      return await oldimportcjsamdumd(url2, name2).catch(handleerror);\r\n    }\r\n  }\r\n  async function handleerror(e: Error): Promise<any> {\r\n    console.warn(e);\r\n    if (tryfailedtimes > 100) {\r\n      throw new Error(\r\n        \"Try loading, too many failures, give up trying!\" +\r\n          JSON.stringify(url) +\r\n          JSON.stringify(packagename)\r\n      );\r\n    }\r\n    tryfailedtimes++;\r\n\r\n    if (e instanceof cantfindError /* && eurlorname */) {\r\n      const eurlorname = e.urlorname;\r\n      if (isurl(eurlorname)) {\r\n        console.log(补充加载依赖的模块网址, eurlorname);\r\n        return await retryimport(eurlorname, undefined, url, packagename);\r\n        /*  await oldimportcjsamdumd(eurlorname).catch(handleerror);\r\n        return await oldimportcjsamdumd(...inarguments); */\r\n      } else if (isplainobject(url) && Reflect.has(url, eurlorname)) {\r\n        return await retryimport(\r\n          get(url, eurlorname),\r\n          eurlorname,\r\n          url,\r\n          packagename\r\n        );\r\n        // await oldimportcjsamdumd(...inarguments).catch(handleerror);\r\n        // return await oldimportcjsamdumd(...inarguments);\r\n      } else {\r\n        throw e;\r\n      }\r\n    } else {\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n/* export interface IMPORTCJSAMDUMD {\r\n  (url: any, packagename?: any): Promise<any>;\r\n  PACKAGESTORE: Record<string, PlainObj>;\r\n  REQUIREPACKAGE: (packagename: string) => any;\r\n} */\r\n// /* importcjsamdumd.PACKAGESTORE = {} as Record<\r\n//   string|symbol,\r\n//   PlainObj\r\n// >; /* PACKAGESTORE ||  */\r\n// importcjsamdumd.REQUIREPACKAGE = getmodule; */\r\n//   return importcjsamdumd;\r\n// })();\r\n// const IMPORTcjsamdumd: IMPORTCJSAMDUMD = importcjsamdumd;\r\n\r\nconst PACKAGESTORE: Record<string, Record<string | symbol, any>> = {};\r\nconst REQUIREPACKAGE = getmodule;\r\n// export const { PACKAGESTORE, REQUIREPACKAGE } = importcjsamdumd;\r\nexport { PACKAGESTORE, REQUIREPACKAGE };\r\n"],"names":["cantfindError","Error","[object Object]","message","urlorname","super","this","assertstring","s","TypeError","字符串不能为空","参数必须为字符串","packagealias","getmodule","packagename","findpackage","PACKAGESTORE","Object","freeze","模块仓库中没有找到","isplainobject","o","toString","call","isurl","url","flag","URL","href","error","async","同时发起多个字符串","a","importcjsamdumd","Promise","all","map","e","同时发起多个entries","codetype","cachedtext","get","cachedurltotext","textsource","fetch","then","response","ok","contenttype","headers","includes","text","set","ismodule","定义default","target","def","defineProperty","enumerable","isArray","Array","isFunction","it","op","ostring","tag","define","cmd","amd","name","deps","callback","defineglobalDefQueue","console","log","createBlob","source","createObjectURL","Blob","type","dynamicimportshimfun","dynamicimportshim","Function","getnewimportpromise","symbolkey","Symbol","for","resolve","reject","document","createElement","clearsideeffect","removescript","removeerrorlisten","errorhandler","revokeObjectURL","src","onload","onerror","f","window","removeEventListener","remove","warn","addEventListener","topLevelBlobUrl","Reflect","has","moduleoutput","undefined","head","appendChild","esmdefinegetter","moduleexport","exportdefault","keys","forEach","key","getbaseurl","objurl","pathname","split","length","path","origin","join","格式化url","baseurl","String","startsWith","endsWith","myrequirefun","requireinstead","default","formatedurlrequire","formatedurl","getnormalizedurl","relativeurl","非空对象","JSON","stringify","处理非es模块","exportmodule","depssymbol","typesymbol","urlsymbol","sourcesymbol","MODULETYPE","REQUIRE_RE","SLASH_RE","parseDependencies","code","ret","replace","m","m1","m2","args","push","主核心加载模块函数","fetchpromisetext","cachedfetchtext","create","moduletype","scripttext","modulesrcfun","toStringTag","value","moduleexportdefault","parse","exports_exports","module","exports","isamd","模块加载函数","amdfactory","cjs","usefulexport","SyntaxError","newobjjson","obj","传入的参数必须是个object","输入的类型错误输入的类型必须是字符串或者数组或对象","oldimportcjsamdumd","urlobj","输入参数array","entries","suoyouimportpromise","objecttoreturn","objvalues","index","传入参数arr","coreload","补充加载依赖的模块网址","tryfailedtimes","catch","handleerror","retryimport","url1","nam1","url2","name2","eurlorname","REQUIREPACKAGE"],"mappings":"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"}