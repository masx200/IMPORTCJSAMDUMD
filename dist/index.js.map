{"version":3,"file":"index.js","sources":["../src/cantfindError.ts","../src/getmodule.ts","../src/isplainobject.ts","../src/isurl.ts","../src/arrayimportall.ts","../src/assertstring.ts","../src/cachedfetchtext.ts","../src/dynamicimportshim.ts","../src/getbaseurl.ts","../src/formaturl.ts","../src/myrequirefun.ts","../src/formatedurlrequire.ts","../src/isarray.ts","../src/isfunction.ts","../src/define.ts","../src/notemptyobj.ts","../src/handlecjsmodule.ts","../src/esmdefinegetter.ts","../src/ismodule.ts","../src/define-default.ts","../src/coreload.ts","../src/newobjjson.ts","../src/oldimport.ts","../src/importcjsamdumd.ts"],"sourcesContent":["export class cantfindError extends Error {\r\n  urlorname: string;\r\n  constructor(message: string, urlorname: string) {\r\n    super(message);\r\n    this.urlorname = urlorname;\r\n  }\r\n}\r\n","import {\r\n  参数必须为字符串,\r\n  字符串不能为空,\r\n  PACKAGESTORE,\r\n  模块仓库中没有找到\r\n} from \"./importcjsamdumd\";\r\nimport { cantfindError } from \"./cantfindError\";\r\n\r\nexport function getmodule(packagename: string) {\r\n  \"use strict\";\r\n  if (packagename === \"\") {\r\n    throw new TypeError(字符串不能为空);\r\n  }\r\n  if (typeof packagename !== \"string\") {\r\n    throw new TypeError(参数必须为字符串);\r\n  }\r\n  const findpackage = PACKAGESTORE[packagename];\r\n  if (findpackage) {\r\n    Object.freeze(findpackage);\r\n    return findpackage;\r\n    /*new Proxy(findpackage, {\r\n        set() {\r\n          return false;\r\n        },\r\n        deleteProperty() {\r\n          return false;\r\n        }\r\n      });*/\r\n  } else {\r\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\r\n  }\r\n}\r\n","import { PlainObj } from \"./oldimport\";\r\n\r\nexport function isplainobject(o: any): o is PlainObj {\r\n  return (\r\n    typeof o === \"object\" &&\r\n    {}.toString.call(o) === \"[object Object]\" &&\r\n    o instanceof Object\r\n    //&&\r\n    //   o.__proto__ === Object.prototype\r\n  );\r\n}\r\n","import { 参数必须为字符串, 字符串不能为空 } from \"./importcjsamdumd\";\r\n\r\nexport function isurl(url: string) {\r\n  var flag = false;\r\n  try {\r\n    if (url === \"\") {\r\n      throw new TypeError(字符串不能为空);\r\n    }\r\n    if (typeof url !== \"string\") {\r\n      throw new TypeError(参数必须为字符串);\r\n    }\r\n    url = new URL(url).href;\r\n    flag = true;\r\n  } catch (error) {\r\n    flag = false;\r\n  }\r\n  return flag;\r\n}\r\n","export async function 同时发起多个字符串(\r\n  a: Array<string>,\r\n  importcjsamdumd: Function\r\n) {\r\n  return await Promise.all(\r\n    a.map(e => {\r\n      return importcjsamdumd(e);\r\n    })\r\n  );\r\n}\r\nexport async function 同时发起多个entries(\r\n  a: any[][],\r\n  importcjsamdumd: Function\r\n) {\r\n  return await Promise.all(\r\n    a.map(e => {\r\n      return importcjsamdumd(e[0], e[1]);\r\n    })\r\n  );\r\n}\r\n","import { 参数必须为字符串, 字符串不能为空 } from './importcjsamdumd';\r\n\r\nexport function assertstring(s: string) :asserts s is string \r\n{\r\n    if (s === \"\") {\r\n      throw new TypeError(字符串不能为空);\r\n    }\r\n    if (typeof s !== \"string\") {\r\n      throw new TypeError(参数必须为字符串);\r\n    }\r\n  //   return true;\r\n  }","import { set, get } from './coreload';\r\n\r\nexport default async function(url: string) {\r\n  const cachedtext =get(cachedurltotext, url);\r\n  //   cachedurltotext.get(url);\r\n  if (cachedtext) {\r\n    return cachedtext;\r\n  } else {\r\n    const textsource = await fetch(url).then(async response => {\r\n      if (!response.ok) {\r\n        throw new Error(\"fetch failed \" + url);\r\n      }\r\n      return await response.text();\r\n    });\r\n   set(cachedurltotext, url, textsource);\r\n    // cachedurltotext.set(url, textsource);\r\n    return textsource;\r\n  }\r\n}\r\nconst cachedurltotext: Record<string, string> = {}; // new Map<string, string>();\r\n","/* eslint-disable no-empty */\r\n\"use strict\";\r\n\r\nimport { get, set } from \"./coreload\";\r\nimport { Module } from \"./importcjsamdumd\";\r\n\r\nexport { createBlob };\r\nfunction createBlob(source: string) {\r\n  return URL.createObjectURL(\r\n    new Blob([source], { type: \"application/javascript\" })\r\n  );\r\n}\r\ntype dynamicimport = (url: string) => Promise<Module>;\r\nconst dynamicimportshimfun = (() => {\r\n  \"use strict\";\r\n  const 参数必须为字符串 = \"参数必须为字符串\";\r\n  const 字符串不能为空 = \"字符串不能为空\";\r\n  let dynamicimportshim: dynamicimport;\r\n  //   import('querystring')\r\n  try {\r\n    dynamicimportshim = Function(\"u\", \"return import(u)\") as dynamicimport;\r\n  } catch (error) {\r\n    dynamicimportshim = async function(url: string): Promise<Module> {\r\n      if (url === \"\") {\r\n        throw new TypeError(字符串不能为空);\r\n      }\r\n      if (typeof url !== \"string\") {\r\n        throw new TypeError(参数必须为字符串);\r\n      }\r\n      url = new URL(url).href;\r\n\r\n      return await getnewimportpromise(url);\r\n    };\r\n  }\r\n  return dynamicimportshim;\r\n})();\r\nexport default dynamicimportshimfun;\r\nfunction getnewimportpromise(url: string): Promise<Module> {\r\n  const symbolkey = Symbol.for(\"import-\" + url);\r\n  return new Promise((resolve, reject) => {\r\n    const s = document.createElement(\"script\");\r\n    function clearsideeffect() {\r\n      removescript(s);\r\n      removeerrorlisten(errorhandler);\r\n      URL.revokeObjectURL(s.src);\r\n      s.onload = s.onerror = null;\r\n    }\r\n    function removeerrorlisten(f: (evt: ErrorEvent) => void) {\r\n      try {\r\n        window.removeEventListener(\"error\", f);\r\n      } catch (error) {}\r\n    }\r\n    function removescript(e: HTMLScriptElement) {\r\n      e.remove();\r\n      //try {\r\n      //   document.head.removeChild(e);\r\n      //  } catch (error) {}\r\n    }\r\n    function errorhandler(e: ErrorEvent) {\r\n      console.warn(e.error);\r\n      reject(e.error);\r\n      clearsideeffect();\r\n    }\r\n    window.addEventListener(\"error\", errorhandler);\r\n    const topLevelBlobUrl = createBlob(\r\n      `import*as m from'${url}';\\nwindow[Symbol.for('${\"import-\" + url}')]=m`\r\n    );\r\n    s.type = \"module\";\r\n    s.src = topLevelBlobUrl;\r\n    s.async = true;\r\n    s.onload = () => {\r\n      if (\r\n        Reflect.has(window, symbolkey)\r\n        /* symbolkey in */\r\n      ) {\r\n        const moduleoutput = get(window, symbolkey);\r\n        resolve(moduleoutput /* [Symbol.for(\"import-\" + url)] */);\r\n        set(window, symbolkey, undefined);\r\n        clearsideeffect();\r\n      }\r\n    };\r\n    s.onerror = () => {\r\n      reject(new Error(\"import load failed from network\" + url));\r\n      clearsideeffect();\r\n    };\r\n    document.head.appendChild(s);\r\n  });\r\n}\r\n","export function getbaseurl(url: string) {\r\n  var objurl = new URL(url);\r\n  var a = objurl.pathname.split(\"/\");\r\n  a[a.length - 1] = \"\";\r\n  var path = objurl.origin + a.join(\"/\");\r\n  return path;\r\n}\r\n","export function 格式化url(baseurl: string, urlorname: string) {\r\n  if (\r\n    String(urlorname).startsWith(\"./\") ||\r\n    String(urlorname).startsWith(\"../\")\r\n  ) {\r\n    if (\r\n      !(\r\n        String(urlorname).endsWith(\".js\") ||\r\n        urlorname.endsWith(\".mjs\") ||\r\n        urlorname.endsWith(\".json\") ||\r\n        urlorname.endsWith(\".css\") ||\r\n        urlorname.endsWith(\".html\")\r\n      )\r\n    ) {\r\n      urlorname += \".js\";\r\n    }\r\n    urlorname = new URL(baseurl + urlorname).href;\r\n  }\r\n  return urlorname;\r\n}\r\n","import {\r\n  参数必须为字符串,\r\n  字符串不能为空,\r\n  PACKAGESTORE,\r\n  模块仓库中没有找到\r\n} from \"./importcjsamdumd\";\r\nimport { cantfindError } from \"./cantfindError\";\r\n\r\nexport const myrequirefun = function requireinstead(packagename: string) {\r\n  \"use strict\";\r\n  if (packagename === \"\") {\r\n    throw new TypeError(字符串不能为空);\r\n  }\r\n  if (typeof packagename !== \"string\") {\r\n    throw new TypeError(参数必须为字符串);\r\n  }\r\n  const findpackage = PACKAGESTORE[packagename];\r\n  if (findpackage) {\r\n    Object.freeze(findpackage);\r\n    return findpackage.default ? findpackage.default : findpackage;\r\n  } else {\r\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\r\n  }\r\n};\r\n","import { getbaseurl } from \"./getbaseurl\";\r\nimport { assertstring } from \"./assertstring\";\r\n// import { myrequirefun } from \"./IMPORTCJSAMDUMD\";\r\nimport { 格式化url } from \"./formaturl\";\r\nimport { myrequirefun } from \"./myrequirefun\";\r\n\r\nexport const formatedurlrequire = (urlorname: string, url: string) => {\r\n  assertstring(urlorname);\r\n  // urlorname = String(urlorname);\r\n  /*   if (urlorname === \"\") {\r\n        throw new TypeError(字符串不能为空);\r\n      } */\r\n\r\n  const baseurl = getbaseurl(url);\r\n  const formatedurl = 格式化url(baseurl, urlorname);\r\n  return myrequirefun(formatedurl);\r\n};\r\n","export function isArray(a: any): a is Array<any> {\r\n  return (\r\n    // typeof a === \"object\" &&\r\n    Array.isArray(a) && {}.toString.call(a) === \"[object Array]\"\r\n  );\r\n}\r\n","export function isFunction(it: any): it is Function {\r\n  const op = {}; // Object.prototype;\r\n  const ostring = op.toString;\r\n  const tag = ostring.call(it);\r\n  return (\r\n    (\"function\" === typeof it && tag === \"[object Function]\") ||\r\n    tag === \"[object AsyncFunction]\"\r\n  );\r\n}\r\n","import { isArray } from \"./isarray\";\r\nimport { isFunction } from \"./isfunction\";\r\nimport { myrequirefun } from \"./myrequirefun\";\r\n\r\ndefine.exports = {};\r\n\r\ndefine.amd = true;\r\nfunction define(name: any, deps?: any, callback?: any) {\r\n  \"use strict\";\r\n  define.exports = {};\r\n  define.amd = true;\r\n  //   const defineglobalDefQueue = [];\r\n  if (typeof name !== \"string\") {\r\n    callback = deps;\r\n    deps = name;\r\n    name = null;\r\n  }\r\n  if (!isArray(deps)) {\r\n    callback = deps;\r\n    deps = null;\r\n  }\r\n  if (!deps && isFunction(callback)) {\r\n    deps = [];\r\n  }\r\n  const defineglobalDefQueue: [any, string[], Function] = [\r\n    name,\r\n    deps,\r\n    callback\r\n  ];\r\n  const canshu = defineglobalDefQueue[1].map((e: string) => myrequirefun(e));\r\n  define.exports = defineglobalDefQueue[2](...canshu);\r\n}\r\nexport { define };\r\n","export function 非空对象(o: any) {\r\n  return !!(\r\n    typeof o !== \"object\" ||\r\n    Object.keys(o).length ||\r\n    JSON.stringify(o) !== \"{}\"\r\n  );\r\n}\r\n","// import { define } from \"./IMPORTCJSAMDUMD\";\r\nimport { 加载的模块没有输出 } from \"./coreload\";\r\nimport { define } from \"./define\";\r\nimport { 非空对象 } from \"./notemptyobj\";\r\n\r\nexport function 处理非es模块(\r\n  //   moduleexport: { default: any },\r\n  exportmodule: any[],\r\n  url: string,\r\n  packagename: string | undefined\r\n) {\r\n  /* if (typeof exportmodule === \"undefined\") {\r\n    exportmodule = [{}, {}, {}];\r\n  } */\r\n  if (typeof define.exports === \"undefined\") {\r\n    define.exports = {};\r\n  }\r\n\r\n  if (非空对象(exportmodule[0])) {\r\n    const exportdefault = exportmodule[0];\r\n    return exportdefault;\r\n    // 定义default(moduleexport, exportdefault);\r\n  } else if (非空对象(exportmodule[1])) {\r\n    const exportdefault = exportmodule[1];\r\n    // 定义default(moduleexport, exportdefault);\r\n    return exportdefault;\r\n  } else if (非空对象(exportmodule[2])) {\r\n    const exportdefault = exportmodule[2];\r\n    return exportdefault;\r\n    // 定义default(moduleexport, exportdefault);\r\n  } else {\r\n    console.warn(加载的模块没有输出, url, packagename);\r\n    /*   reject(\r\n          Error(\r\n            加载的模块没有输出 + \" \" + packagename + \" \" + url\r\n          )\r\n        );\r\n        return;*/\r\n  }\r\n}\r\n","import { defineProperty, get } from \"./coreload\";\r\nimport { isFunction } from \"./isfunction\";\r\n\r\nexport function esmdefinegetter(\r\n  moduleexport: Record<string, any>,\r\n  exportdefault: Record<string, any> | Function\r\n) {\r\n  if (\r\n    exportdefault &&\r\n    (isFunction(exportdefault) || typeof exportdefault === \"object\")\r\n  ) {\r\n    Object.keys(exportdefault)\r\n      // .filter(t => t !== \"default\")\r\n      .forEach(key => {\r\n        try {\r\n          defineProperty(moduleexport, key, {\r\n            enumerable: true,\r\n            get() {\r\n              return get(exportdefault, key);\r\n            }\r\n          });\r\n        } catch (error) {}\r\n      });\r\n  }\r\n}\r\n","export function ismodule(a: any): boolean {\r\n  return {}.toString.call(a) === \"[object Module]\";\r\n}\r\n","import { defineProperty, get } from \"./coreload\";\r\nimport { ismodule } from \"./ismodule\";\r\nimport { isplainobject } from \"./isplainobject\";\r\n\r\nexport function 定义default(\r\n  target: Record<string, any>,\r\n  def: { [x: string]: string; default: any } | Function\r\n) {\r\n  def = get(def, \"default\") ? get(def, \"default\") : def;\r\n  // /*   if (\r\n  //     get(def, Symbol.toStringTag) === /* def[Symbol.toStringTag] */ \"Module\" &&\r\n  //     def.default\r\n  //   ) {\r\n  //     def = def.default;\r\n  //   } */\r\n  if (!ismodule(def) && !isplainobject(def)) {\r\n    /* 如果是个module或者plainobject则,不定义default */\r\n    // try {\r\n    defineProperty(target, \"default\", {\r\n      enumerable: true,\r\n      get() {\r\n        return def;\r\n      }\r\n    });\r\n    //   } catch (error) {}\r\n  }\r\n}\r\n","export const { get, set, defineProperty } = Reflect;\r\nimport cachedfetchtext from \"./cachedfetchtext\";\r\n/* eslint-disable no-empty */\r\n// const GLOBALPACKAGESTORE = \"PACKAGESTORE\";\r\nimport dynamicimportshim from \"./dynamicimportshim.js\";\r\nimport { formatedurlrequire } from \"./formatedurlrequire.js\";\r\nimport { 处理非es模块 } from \"./handlecjsmodule.js\";\r\nimport {\r\n  //   assertstring,\r\n  //   define,\r\n  PACKAGESTORE\r\n  //   定义default\r\n} from \"./importcjsamdumd.js\";\r\nimport { define } from \"./define.js\";\r\nimport { esmdefinegetter } from \"./esmdefinegetter\";\r\nimport { 定义default } from \"./define-default\";\r\n// const 字符串不能为空 = \"字符串不能为空\";\r\nexport const 加载的模块没有输出 = \"加载的模块没有输出\";\r\nexport const typesymbol = Symbol(\"type\");\r\nexport const namesymbol = Symbol(\"name\");\r\nexport const urlsymbol = Symbol(\"url\");\r\nexport const sourcesymbol = Symbol(\"source\");\r\nexport default async (url: string, packagename?: string) => {\r\n  return await new Promise(主核心加载模块函数);\r\n  function 主核心加载模块函数(\r\n    resolve: (value?: any) => void,\r\n    reject: (reason?: any) => void\r\n  ) {\r\n    return ((resolve, reject) => {\r\n      return (async () => {\r\n        try {\r\n          return await (async () => {\r\n            let fetchpromisetext: string;\r\n            try {\r\n              try {\r\n                fetchpromisetext = await cachedfetchtext(url);\r\n                /* await fetch(url).then(response => {\r\n                  if (!response.ok) {\r\n                    throw new Error(\"fetch failed \" + url);\r\n                  }\r\n                  return response.text();\r\n                }); */\r\n              } catch (e) {\r\n                console.warn(e);\r\n                reject(e);\r\n                return;\r\n              }\r\n              try {\r\n                return await (async scripttext => {\r\n                  let moduletype: \"cjs\" | \"esm\" | \"json\";\r\n                  const exports_exports = { [Symbol.toStringTag]: \"Module\" };\r\n                  const module = {\r\n                    exports: { [Symbol.toStringTag]: \"Module\" }\r\n                  };\r\n                  define.exports = {};\r\n                  let modulesrcfun: string;\r\n\r\n                  const moduleexport: {\r\n                    default: any;\r\n                    [k: string]: any;\r\n                  } = Object.assign(Object.create(null), {\r\n                    default: undefined\r\n                  });\r\n                  try {\r\n                    (function() //   myrequirefun,\r\n                    //  define,\r\n                    //  module,\r\n                    //   exports,\r\n                    //    scripttext\r\n                    {\r\n                      const 模块加载函数 = new Function(\r\n                        \"require\",\r\n                        \"define\",\r\n                        \"module\",\r\n                        \"exports\",\r\n                        `\"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\n`\r\n                      );\r\n                      modulesrcfun = 模块加载函数.toString();\r\n\r\n                      return 模块加载函数.call(\r\n                        module.exports,\r\n                        (name: string) => formatedurlrequire(name, url),\r\n                        define,\r\n                        module,\r\n                        exports_exports\r\n                      );\r\n                    })();\r\n                    //   /* myrequirefun,  */ define,\r\n                    //    module,\r\n                    //   exports,\r\n                    //    scripttext\r\n                    const exportmodule = [\r\n                      exports_exports ? exports_exports : {},\r\n                      module.exports ? module.exports : {},\r\n                      define.exports ? define.exports : {}\r\n                    ];\r\n                    const usefulexport = 处理非es模块(\r\n                      /* moduleexport,  */ exportmodule,\r\n                      url,\r\n                      packagename\r\n                    );\r\n                    moduletype = \"cjs\";\r\n\r\n                    if (usefulexport) {\r\n                      定义default(moduleexport, usefulexport);\r\n                      esmdefinegetter(moduleexport, usefulexport);\r\n\r\n                      //\r\n                    }\r\n                  } catch (e) {\r\n                    console.warn(e);\r\n                    try {\r\n                      const moduleexportdefault = JSON.parse(scripttext);\r\n                      console.log(\"检测到json模块 \" + url);\r\n                      modulesrcfun = scripttext;\r\n                      moduletype = \"json\";\r\n                      esmdefinegetter(moduleexport, moduleexportdefault);\r\n                      /*      Object.keys(moduleexportdefault)\r\n                        // .filter(t => t !== \"default\")\r\n                        .forEach(key => {\r\n                          defineProperty(moduleexport, key, {\r\n                            enumerable: true,\r\n                            get() {\r\n                              return moduleexportdefault[key];\r\n                            }\r\n                          });\r\n                        }); */\r\n                      /* try {\r\n                        Reflect.defineProperty(moduleexport, \"default\", {\r\n                          enumerable: false\r\n                        });\r\n                      } catch {} */\r\n                    } catch (error) {\r\n                      console.warn(error);\r\n                      if (e instanceof SyntaxError) {\r\n                        const topLevelBlobUrl = url;\r\n                        modulesrcfun = scripttext;\r\n                        try {\r\n                          const exportdefault = await dynamicimportshim(\r\n                            topLevelBlobUrl\r\n                          );\r\n                          moduletype = \"esm\";\r\n                          esmdefinegetter(moduleexport, exportdefault);\r\n                          /*    ((moduleexport, exportdefault) => {\r\n                            Object.keys(exportdefault)\r\n                              // .filter(t => t !== \"default\")\r\n                              .forEach(key => {\r\n                                defineProperty(moduleexport, key, {\r\n                                  enumerable: true,\r\n                                  get() {\r\n                                    return get(exportdefault, key);\r\n                                  }\r\n                                });\r\n                              });\r\n                          })(moduleexport, exportdefault); */\r\n\r\n                          /*  定义default(\r\n                            moduleexport,\r\n                            exportdefault.default\r\n                              ? exportdefault.default\r\n                              : exportdefault\r\n                          );*/\r\n                        } catch (e) {\r\n                          console.warn(e);\r\n                          reject(e);\r\n                          return;\r\n                        }\r\n                        if (typeof moduleexport.default === \"undefined\") {\r\n                          console.warn(加载的模块没有输出, packagename, url);\r\n                          try {\r\n                            Reflect.defineProperty(moduleexport, \"default\", {\r\n                              enumerable: false\r\n                            });\r\n                          } catch {}\r\n                          /*  reject(\r\n                            Error(\r\n                              加载的模块没有输出 + \" \" + packagename + \" \" + url\r\n                            )\r\n                          );\r\n                          return;*/\r\n                        }\r\n                      } else {\r\n                        console.warn(e);\r\n                        reject(e);\r\n                        return;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  Object.defineProperties(moduleexport, {\r\n                    [namesymbol]: {\r\n                      value: packagename,\r\n                      writable: true,\r\n                      enumerable: false\r\n                    },\r\n                    [urlsymbol]: {\r\n                      value: url,\r\n                      enumerable: false\r\n                    },\r\n                    [sourcesymbol]: {\r\n                      value: modulesrcfun,\r\n                      enumerable: false\r\n                    },\r\n                    [typesymbol]: {\r\n                      value: moduletype,\r\n                      enumerable: false\r\n                    }\r\n                  });\r\n                  if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\r\n                    defineProperty(moduleexport, Symbol.toStringTag, {\r\n                      value: \"Module\"\r\n                    });\r\n                  }\r\n                  //   if (typeof moduleexport.default !== \"undefined\") {\r\n                  /* json模块没有default */\r\n                  if (typeof packagename !== \"undefined\") {\r\n                    PACKAGESTORE[packagename] = moduleexport;\r\n                  }\r\n                  //   }\r\n                  if (typeof packagename !== \"undefined\") {\r\n                    PACKAGESTORE[url] = PACKAGESTORE[packagename];\r\n                  }\r\n                  if (moduleexport.default) {\r\n                    esmdefinegetter(moduleexport, moduleexport.default);\r\n                  }\r\n                  //   !!moduleexport.default &&\r\n                  // Object.keys(moduleexport.default)\r\n                  //   .filter(t => t !== \"default\")\r\n                  //   .forEach(key => {\r\n                  //     const moduleexportdefault = moduleexport.default;\r\n\r\n                  //     try {\r\n                  //       defineProperty(moduleexport, key, {\r\n                  //         enumerable: true,\r\n                  //         get() {\r\n                  //           return get(moduleexportdefault, key);\r\n                  //         }\r\n                  //       });\r\n                  //     } catch (error) {}\r\n                  //   });\r\n                  if (moduleexport.default === undefined) {\r\n                    try {\r\n                      defineProperty(moduleexport, \"default\", {\r\n                        enumerable: false\r\n                      });\r\n                    } catch (error) {}\r\n                  }\r\n                  Object.freeze(moduleexport);\r\n                  resolve(moduleexport);\r\n                  return;\r\n                })(fetchpromisetext);\r\n              } catch (e) {\r\n                console.warn(e);\r\n                reject(e);\r\n                return;\r\n              }\r\n            } catch (e) {\r\n              console.warn(e);\r\n              reject(e);\r\n              return;\r\n            }\r\n          })();\r\n        } catch (e) {\r\n          console.warn(e);\r\n          reject(e);\r\n          return;\r\n        }\r\n      })();\r\n    })(resolve, reject);\r\n  }\r\n};\r\n","import { PlainObj, 传入的参数必须是个object } from \"./oldimport\";\r\n\r\nexport function newobjjson(obj: PlainObj) {\r\n  if (typeof obj !== \"object\") {\r\n    throw new TypeError(传入的参数必须是个object);\r\n  }\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\n","// import { 同时发起多个entries } from \"./arrayimportall.js\";\r\nimport { 同时发起多个entries, 同时发起多个字符串 } from \"./arrayimportall.js\";\r\nimport { assertstring } from \"./assertstring.js\";\r\nimport coreload, { namesymbol, urlsymbol, get, set } from \"./coreload.js\";\r\nimport { getmodule } from \"./getmodule.js\";\r\nimport {\r\n  //   assertstring,\r\n  //   getmodule,\r\n  //   isArray,\r\n  //   isplainobject,\r\n  PACKAGESTORE\r\n} from \"./importcjsamdumd\";\r\nimport { isArray } from \"./isarray.js\";\r\nimport { isplainobject } from \"./isplainobject.js\";\r\nimport { newobjjson } from \"./newobjjson.js\";\r\nconst 输入的类型错误输入的类型必须是字符串或者数组或对象 =\r\n  \"输入的类型错误,输入的类型必须是字符串或者数组或对象\";\r\n// export const 非法字符串 = \"输入的类型错误,输入的字符串不能为空,不能为undefined\";\r\n// export const namesymbol = Symbol.for(\"name\");\r\n// export const urlsymbol = Symbol.for(\"url\");\r\nexport const 传入的参数必须是个object = \"传入的参数必须是个object\";\r\nexport type PlainObj = Record<any, any>;\r\n\r\nexport default /* (() => {\r\n  return */ async function oldimportcjsamdumd(\r\n  url: any,\r\n  packagename?: any\r\n): Promise<any> {\r\n  \"use strict\";\r\n  if (isplainobject(url)) {\r\n    return await (async url => {\r\n      url = newobjjson(url);\r\n      /* 应该是value,key的数组,与  Object.entries相反*/\r\n      const 输入参数array = Object.entries(url).map(([key, value]) => [\r\n        value,\r\n        key\r\n      ]); /*  Object.keys(url).map(key => {\r\n          const packageurl = url[key];\r\n          const packagenm = key;\r\n          return [packageurl, packagenm];\r\n        }); */\r\n      let suoyouimportpromise = [];\r\n      try {\r\n        suoyouimportpromise = await 同时发起多个entries(\r\n          输入参数array,\r\n          oldimportcjsamdumd\r\n        );\r\n      } catch (error) {\r\n        console.warn(error);\r\n        suoyouimportpromise = await 同时发起多个entries(\r\n          输入参数array,\r\n          oldimportcjsamdumd\r\n        );\r\n      } finally {\r\n        suoyouimportpromise = await 同时发起多个entries(\r\n          输入参数array,\r\n          oldimportcjsamdumd\r\n        );\r\n      }\r\n      let objecttoreturn: PlainObj = {};\r\n      suoyouimportpromise.forEach(m => {\r\n        objecttoreturn[m[namesymbol]] = m;\r\n      });\r\n      return objecttoreturn;\r\n    })(url);\r\n  } else if (\r\n    isArray(\r\n      url\r\n    ) /* && typeof url === \"object\" */ /*  ||\r\n    typeof packagename === \"object\" */\r\n  ) {\r\n    return await (async (...args) => {\r\n      let suoyouimportpromise = [];\r\n      const 传入参数arr = args; //Array(...args).flat(1 / 0); //JSON.parse(JSON.stringify(Array(...args).flat()));\r\n      try {\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      } catch (error) {\r\n        console.warn(error);\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      } finally {\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      }\r\n      return suoyouimportpromise;\r\n    })(...url);\r\n  } else if (typeof url === \"string\" || typeof packagename === \"string\") {\r\n    assertstring(url);\r\n    return await (async (url: string, packagename?: string) => {\r\n      /*   if (typeof url === \"undefined\" || packagename === \"\") {\r\n          throw new TypeError(非法字符串);\r\n        } */\r\n      if (typeof packagename === \"undefined\") {\r\n        packagename = new URL(url).href;\r\n      }\r\n      url = new URL(url).href;\r\n      if (\r\n        typeof PACKAGESTORE[packagename] !== \"undefined\" &&\r\n        typeof PACKAGESTORE[packagename].default !== \"undefined\" &&\r\n        get(PACKAGESTORE[packagename], urlsymbol) === url\r\n        //  [urlsymbol] === url\r\n      ) {\r\n        return getmodule(packagename);\r\n      } else if (\r\n        typeof PACKAGESTORE[url] !== \"undefined\" &&\r\n        typeof PACKAGESTORE[url].default !== \"undefined\" &&\r\n        get(PACKAGESTORE[url], urlsymbol) === url\r\n        //   PACKAGESTORE[url][urlsymbol] === url\r\n      ) {\r\n        PACKAGESTORE[packagename] = PACKAGESTORE[url];\r\n        //   PACKAGESTORE[packagename][namesymbol] = packagename;\r\n        set(PACKAGESTORE[packagename], namesymbol, packagename);\r\n        return getmodule(url);\r\n      } else {\r\n        return await coreload(url, packagename);\r\n      }\r\n    })(url, packagename);\r\n  } else {\r\n    // debugger;\r\n    throw new TypeError(输入的类型错误输入的类型必须是字符串或者数组或对象);\r\n  }\r\n}\r\n// })();\r\n","/* const 输入的类型错误输入的类型必须是字符串或者数组或对象 =\r\n  \"输入的类型错误,输入的类型必须是字符串或者数组或对象\";\r\nconst 非法字符串 = \"输入的类型错误,输入的字符串不能为空,url不能为undefined\";\r\nconst namesymbol = Symbol.for(\"name\");\r\nconst urlsymbol = Symbol.for(\"url\"); */\r\nimport { cantfindError } from \"./cantfindError\";\r\nimport { getmodule } from \"./getmodule\";\r\nimport { isplainobject } from \"./isplainobject\";\r\nimport { isurl } from \"./isurl\";\r\nimport oldimportcjsamdumd from \"./oldimport\";\r\nimport { get } from \"./coreload\";\r\n\r\nexport const 模块仓库中没有找到 =\r\n  \"Cannot find module in packagestore, 模块仓库中没有找到, \";\r\n\r\n// export const GLOBALPACKAGESTORE = \"PACKAGESTORE\";\r\n\r\nexport const 参数必须为字符串 = \"参数必须为字符串\";\r\n(\"use strict\");\r\nexport const 字符串不能为空 = \"字符串不能为空\";\r\n\r\n// const importcjsamdumd = (() => {\r\n(\"use strict\");\r\nexport const 补充加载依赖的模块网址 = \"补充加载依赖的模块网址\";\r\n\r\n// const importcjsamdumd = importcjsamdumd;\r\nexport type Module = Record<any, any>;\r\nexport default function importcjsamdumd(url: string[]): Promise<Module[]>;\r\nexport default function importcjsamdumd(\r\n  url: string,\r\n  packagename?: string\r\n): Promise<Module>;\r\nexport default function importcjsamdumd(\r\n  url: Record<string, string>\r\n): Promise<Record<string, Module>>;\r\nexport default async function importcjsamdumd(\r\n  url: any,\r\n  packagename?: any\r\n): Promise<any> {\r\n  let tryfailedtimes = 0;\r\n  //   const inarguments: [any, any] = [url, packagename];\r\n  //   const importcjsamdumd = importcjsamdumd;\r\n  return await oldimportcjsamdumd(url, packagename).catch(handleerror);\r\n  async function retryimport(url1: any, nam1: any, url2: any, name2: any) {\r\n    try {\r\n      await oldimportcjsamdumd(url1, nam1).catch(handleerror);\r\n      return await oldimportcjsamdumd(url2, name2);\r\n    } catch (error) {\r\n      console.warn(error);\r\n      return await oldimportcjsamdumd(url2, name2).catch(handleerror);\r\n    }\r\n  }\r\n  async function handleerror(e: Error): Promise<any> {\r\n    console.warn(e);\r\n    if (tryfailedtimes > 100) {\r\n      throw new Error(\r\n        \"尝试加载,失败次数过多,放弃尝试!\" +\r\n          JSON.stringify(url) +\r\n          JSON.stringify(packagename)\r\n      );\r\n    }\r\n    tryfailedtimes++;\r\n\r\n    if (e instanceof cantfindError && e.urlorname) {\r\n      if (isurl(e.urlorname)) {\r\n        console.log(补充加载依赖的模块网址, e.urlorname);\r\n        return await retryimport(e.urlorname, undefined, url, packagename);\r\n        /*  await oldimportcjsamdumd(e.urlorname).catch(handleerror);\r\n        return await oldimportcjsamdumd(...inarguments); */\r\n      } else if (isplainobject(url) && Reflect.has(url, e.urlorname)) {\r\n        return await retryimport(\r\n          get(url, e.urlorname),\r\n          e.urlorname,\r\n          url,\r\n          packagename\r\n        );\r\n        // await oldimportcjsamdumd(...inarguments).catch(handleerror);\r\n        // return await oldimportcjsamdumd(...inarguments);\r\n      } else {\r\n        throw e;\r\n      }\r\n    } else {\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n/* export interface IMPORTCJSAMDUMD {\r\n  (url: any, packagename?: any): Promise<any>;\r\n  PACKAGESTORE: Record<string, PlainObj>;\r\n  REQUIREPACKAGE: (packagename: string) => any;\r\n} */\r\n// /* importcjsamdumd.PACKAGESTORE = {} as Record<\r\n//   string|symbol,\r\n//   PlainObj\r\n// >; /* PACKAGESTORE ||  */\r\n// importcjsamdumd.REQUIREPACKAGE = getmodule; */\r\n//   return importcjsamdumd;\r\n// })();\r\n// const IMPORTcjsamdumd: IMPORTCJSAMDUMD = importcjsamdumd;\r\n\r\nconst PACKAGESTORE: Record<string, Record<string | symbol, any>> = {};\r\nconst REQUIREPACKAGE = getmodule;\r\n// export const { PACKAGESTORE, REQUIREPACKAGE } = importcjsamdumd;\r\nexport { PACKAGESTORE, REQUIREPACKAGE };\r\n"],"names":["cantfindError","Error","[object Object]","message","urlorname","super","this","getmodule","packagename","TypeError","字符串不能为空","参数必须为字符串","findpackage","PACKAGESTORE","Object","freeze","模块仓库中没有找到","isplainobject","o","toString","call","isurl","url","flag","URL","href","error","async","同时发起多个字符串","a","importcjsamdumd","Promise","all","map","e","同时发起多个entries","assertstring","s","cachedtext","get","cachedurltotext","textsource","fetch","then","response","ok","text","set","createBlob","source","createObjectURL","Blob","type","dynamicimportshimfun","dynamicimportshim","Function","getnewimportpromise","symbolkey","Symbol","for","resolve","reject","document","createElement","clearsideeffect","removescript","removeerrorlisten","errorhandler","revokeObjectURL","src","onload","onerror","f","window","removeEventListener","remove","console","warn","addEventListener","topLevelBlobUrl","Reflect","has","moduleoutput","undefined","head","appendChild","getbaseurl","objurl","pathname","split","length","path","origin","join","格式化url","baseurl","String","startsWith","endsWith","myrequirefun","requireinstead","default","formatedurlrequire","formatedurl","isArray","Array","isFunction","it","op","ostring","tag","define","exports","amd","name","deps","callback","defineglobalDefQueue","canshu","非空对象","keys","JSON","stringify","处理非es模块","exportmodule","exportdefault","加载的模块没有输出","esmdefinegetter","moduleexport","forEach","key","defineProperty","enumerable","ismodule","定义default","target","def","typesymbol","namesymbol","urlsymbol","sourcesymbol","主核心加载模块函数","fetchpromisetext","cachedfetchtext","scripttext","moduletype","exports_exports","toStringTag","module","modulesrcfun","assign","create","模块加载函数","usefulexport","moduleexportdefault","parse","log","SyntaxError","defineProperties","value","writable","newobjjson","obj","传入的参数必须是个object","输入的类型错误输入的类型必须是字符串或者数组或对象","oldimportcjsamdumd","输入参数array","entries","suoyouimportpromise","objecttoreturn","m","args","传入参数arr","coreload","补充加载依赖的模块网址","tryfailedtimes","catch","handleerror","retryimport","url1","nam1","url2","name2","REQUIREPACKAGE"],"mappings":"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"}