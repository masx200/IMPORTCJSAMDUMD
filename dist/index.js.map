{"version":3,"file":"index.js","sources":["../src/cantfindError.ts","../src/assertstring.ts","../src/alias.ts","../src/getmodule.ts","../src/isplainobject.ts","../src/isurl.ts","../src/arrayimportall.ts","../src/cachedfetchtext.ts","../src/ismodule.ts","../src/define-default.ts","../src/isarray.ts","../src/isfunction.ts","../src/define.ts","../src/dynamicimportshim.ts","../src/esmdefinegetter.ts","../src/getbaseurl.ts","../src/formaturl.ts","../src/myrequirefun.ts","../src/formatedurlrequire.ts","../src/notemptyobj.ts","../src/handlecjsmodule.ts","../src/module.ts","../src/util-deps.ts","../src/cacheurltocjsfun.ts","../src/remove-repetiton.ts","../src/coreload.ts","../src/oldimport.ts","../src/importcjsamdumd.ts"],"sourcesContent":["export class cantfindError extends Error {\r\n  urlorname: string;\r\n  constructor(message: string, urlorname: string) {\r\n    super(message);\r\n    this.urlorname = urlorname;\r\n  }\r\n}\r\n","import { 参数必须为字符串, 字符串不能为空 } from \"./importcjsamdumd\";\r\n\r\nexport function assertstring(s: string): asserts s is string {\r\n  if (s === \"\") {\r\n    throw new TypeError(字符串不能为空);\r\n  }\r\n  if (typeof s !== \"string\") {\r\n    throw new TypeError(参数必须为字符串);\r\n  }\r\n}\r\n","export const packagealias: Record<string, string> = {};\r\n","import { assertstring } from \"./assertstring\";\r\nimport { cantfindError } from \"./cantfindError\";\r\nimport { PACKAGESTORE, 模块仓库中没有找到 } from \"./importcjsamdumd\";\r\nimport { packagealias } from \"./alias\";\r\n\r\nexport function getmodule(packagename: string) {\r\n  assertstring(packagename);\r\n\r\n  const findpackage =\r\n    PACKAGESTORE[packagename] || PACKAGESTORE[packagealias[packagename]];\r\n  if (findpackage) {\r\n    Object.freeze(findpackage);\r\n    return findpackage;\r\n  } else {\r\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\r\n  }\r\n}\r\n","import { PlainObj } from \"./oldimport\";\r\n\r\nexport function isplainobject(o: any): o is PlainObj {\r\n  return (\r\n    typeof o === \"object\" &&\r\n    {}.toString.call(o) === \"[object Object]\" &&\r\n    o instanceof Object\r\n  );\r\n}\r\n","import { assertstring } from \"./assertstring\";\r\n\r\nexport function isurl(url: string) {\r\n  var flag = false;\r\n  try {\r\n    assertstring(url);\r\n\r\n    url = new URL(url).href;\r\n    flag = true;\r\n  } catch (error) {\r\n    flag = false;\r\n  }\r\n  return flag;\r\n}\r\n","import { MODULE } from \"./module\";\r\n\r\nexport async function 同时发起多个字符串(\r\n  a: Array<string>,\r\n  importcjsamdumd: Function\r\n): Promise<Array<MODULE>> {\r\n  return await Promise.all(\r\n    a.map(e => {\r\n      return importcjsamdumd(e);\r\n    })\r\n  );\r\n}\r\nexport async function 同时发起多个entries(\r\n  a: any[][],\r\n  importcjsamdumd: Function\r\n): Promise<Array<MODULE>> {\r\n  return await Promise.all(\r\n    a.map(e => {\r\n      return importcjsamdumd(e[0], e[1]);\r\n    })\r\n  );\r\n}\r\n","import { set, get } from \"./coreload\";\r\nexport type CODETYPE = \"json\" | \"js\";\r\nexport default async function(url: string): Promise<[string, CODETYPE]> {\r\n  let codetype: CODETYPE | undefined;\r\n  const cachedtext = get(cachedurltotext, url);\r\n  const cachedtype = get(cachedurltotype, url);\r\n  if (cachedtext && cachedtype) {\r\n    return [cachedtext, cachedtype];\r\n  } else {\r\n    const response = await fetch(url);\r\n    // .then(async response => {\r\n    if (!response.ok) {\r\n      throw new Error(\"fetch failed \" + url);\r\n    }\r\n    const contenttype = response.headers.get(\"content-type\");\r\n    if (contenttype?.includes(\"javascript\")) {\r\n      codetype = \"js\";\r\n    } else if (contenttype?.includes(\"json\")) {\r\n      codetype = \"json\";\r\n    } else {\r\n      throw new Error(\"invalid content-type \" + contenttype);\r\n    }\r\n    //   return await response.text();\r\n    const textsource = await response.text();\r\n    // });\r\n    set(cachedurltotext, url, textsource);\r\n\r\n    // if (!codetype) {\r\n    //   throw new Error();\r\n    // }\r\n    set(cachedurltotype, url, codetype);\r\n    return [textsource, codetype];\r\n  }\r\n}\r\nconst cachedurltotext: Record<string, string> = {};\r\nconst cachedurltotype: Record<string, string> = {};\r\n","export function ismodule(a: any): boolean {\r\n  return {}.toString.call(a) === \"[object Module]\";\r\n}\r\n","import { defineProperty, get } from \"./coreload\";\r\nimport { ismodule } from \"./ismodule\";\r\nimport { isplainobject } from \"./isplainobject\";\r\n\r\nexport function 定义default(\r\n  target: Record<string, any>,\r\n  def: { [x: string]: string; default: any } | Function\r\n) {\r\n  def = get(def, \"default\") ?? def;\r\n\r\n  if (!ismodule(def) && !isplainobject(def)) {\r\n    defineProperty(target, \"default\", {\r\n      enumerable: true,\r\n      get() {\r\n        return def;\r\n      }\r\n    });\r\n  }\r\n}\r\n","export function isArray(a: any): a is Array<any> {\r\n  return Array.isArray(a) && {}.toString.call(a) === \"[object Array]\";\r\n}\r\n","export function isFunction(it: any): it is Function {\r\n  const op = {}; // Object.prototype;\r\n  const ostring = op.toString;\r\n  const tag = ostring.call(it);\r\n  return (\r\n    (\"function\" === typeof it && tag === \"[object Function]\") ||\r\n    tag === \"[object AsyncFunction]\"\r\n  );\r\n}\r\n","import { isArray } from \"./isarray\";\r\nimport { isFunction } from \"./isfunction\";\r\n\r\ndefine.cmd = true;\r\ndefine.amd = true;\r\nfunction define(name: any, deps?: any, callback?: any) {\r\n  \"use strict\";\r\n\r\n  if (typeof name !== \"string\") {\r\n    callback = deps;\r\n    deps = name;\r\n    name = null;\r\n  }\r\n  if (!isArray(deps)) {\r\n    callback = deps;\r\n    deps = null;\r\n  }\r\n  if (!deps && isFunction(callback)) {\r\n    deps = [];\r\n  }\r\n  const defineglobalDefQueue: [string, string[], Function] = [\r\n    name,\r\n    deps,\r\n    callback\r\n  ];\r\n  //   console.log(defineglobalDefQueue);\r\n  return defineglobalDefQueue;\r\n}\r\nexport { define };\r\n","\"use strict\";\r\n\r\nimport { get, set } from \"./coreload\";\r\n\r\nimport { assertstring } from \"./assertstring\";\r\ntype Module = Record<any, any>;\r\nexport { createBlob };\r\nfunction createBlob(source: string) {\r\n  return URL.createObjectURL(\r\n    new Blob([source], { type: \"application/javascript\" })\r\n  );\r\n}\r\n\r\ntype dynamicimport = (url: string) => Promise<Module>;\r\nconst dynamicimportshimfun = (() => {\r\n  \"use strict\";\r\n\r\n  let dynamicimportshim: dynamicimport;\r\n\r\n  try {\r\n    dynamicimportshim = Function(\"u\", \"return import(u)\") as dynamicimport;\r\n  } catch (error) {\r\n    dynamicimportshim = async function(url: string): Promise<Module> {\r\n      assertstring(url);\r\n\r\n      url = new URL(url).href;\r\n\r\n      return await getnewimportpromise(url);\r\n    };\r\n  }\r\n  return dynamicimportshim;\r\n})();\r\nexport default dynamicimportshimfun;\r\nfunction getnewimportpromise(url: string): Promise<Module> {\r\n  const symbolkey = Symbol.for(\"import-\" + url);\r\n  return new Promise((resolve, reject) => {\r\n    const s = document.createElement(\"script\");\r\n    function clearsideeffect() {\r\n      removescript(s);\r\n      removeerrorlisten(errorhandler);\r\n      URL.revokeObjectURL(s.src);\r\n      s.onload = s.onerror = null;\r\n    }\r\n    function removeerrorlisten(f: (evt: ErrorEvent) => void) {\r\n      try {\r\n        window.removeEventListener(\"error\", f);\r\n      } catch (error) {}\r\n    }\r\n    function removescript(e: HTMLScriptElement) {\r\n      e.remove();\r\n    }\r\n    function errorhandler(e: ErrorEvent) {\r\n      console.warn(e.error);\r\n      reject(e.error);\r\n      clearsideeffect();\r\n    }\r\n    window.addEventListener(\"error\", errorhandler);\r\n    const topLevelBlobUrl = createBlob(\r\n      `import*as m from'${url}';\\nwindow[Symbol.for('${\"import-\" + url}')]=m`\r\n    );\r\n    s.type = \"module\";\r\n    s.src = topLevelBlobUrl;\r\n    s.async = true;\r\n    s.onload = () => {\r\n      if (Reflect.has(window, symbolkey)) {\r\n        const moduleoutput = get(window, symbolkey);\r\n        resolve(moduleoutput);\r\n        set(window, symbolkey, undefined);\r\n        clearsideeffect();\r\n      }\r\n    };\r\n    s.onerror = () => {\r\n      reject(new Error(\"import load failed from network\" + url));\r\n      clearsideeffect();\r\n    };\r\n    document.head.appendChild(s);\r\n  });\r\n}\r\n","import { defineProperty, get } from \"./coreload\";\r\nimport { isFunction } from \"./isfunction\";\r\n\r\nexport function esmdefinegetter(\r\n  moduleexport: Record<string, any>,\r\n  exportdefault: Record<string, any> | Function\r\n) {\r\n  if (\r\n    exportdefault &&\r\n    (isFunction(exportdefault) || typeof exportdefault === \"object\")\r\n  ) {\r\n    Object.keys(exportdefault).forEach(key => {\r\n      try {\r\n        defineProperty(moduleexport, key, {\r\n          enumerable: true,\r\n          get() {\r\n            return get(exportdefault, key);\r\n          }\r\n        });\r\n      } catch (error) {}\r\n    });\r\n  }\r\n}\r\n","export function getbaseurl(url: string): string {\r\n  var objurl = new URL(url);\r\n  /*  var a = objurl.pathname.split(\"/\");\r\n  a[a.length - 1] = \"\";\r\n  var path = objurl.origin + a.join(\"/\"); */\r\n  let path = new URL(\".\", objurl.href).href;\r\n  return path;\r\n}\r\n","export function 格式化url(baseurl: string, urlorname: string): string {\r\n  if (\r\n    String(urlorname).startsWith(\"./\") ||\r\n    String(urlorname).startsWith(\"../\")\r\n  ) {\r\n    if (\r\n      !(\r\n        String(urlorname).endsWith(\".js\") ||\r\n        urlorname.endsWith(\".mjs\") ||\r\n        urlorname.endsWith(\".json\") ||\r\n        urlorname.endsWith(\".css\") ||\r\n        urlorname.endsWith(\".html\")\r\n      )\r\n    ) {\r\n      urlorname += \".js\";\r\n    }\r\n    urlorname = new URL(baseurl + urlorname).href;\r\n  }\r\n  return urlorname;\r\n}\r\n","import { assertstring } from \"./assertstring\";\r\nimport { cantfindError } from \"./cantfindError\";\r\nimport { PACKAGESTORE, 模块仓库中没有找到 } from \"./importcjsamdumd\";\r\nimport { packagealias } from \"./alias\";\r\n\r\nexport const myrequirefun = function requireinstead(packagename: string) {\r\n  assertstring(packagename);\r\n\r\n  const findpackage =\r\n    PACKAGESTORE[packagename] || PACKAGESTORE[packagealias[packagename]];\r\n  if (findpackage) {\r\n    Object.freeze(findpackage);\r\n    return findpackage.default ? findpackage.default : findpackage;\r\n  } else {\r\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\r\n  }\r\n};\r\n","import { getbaseurl } from \"./getbaseurl\";\r\nimport { assertstring } from \"./assertstring\";\r\n\r\nimport { 格式化url } from \"./formaturl\";\r\nimport { myrequirefun } from \"./myrequirefun\";\r\n\r\nexport const formatedurlrequire = (urlorname: string, url: string) => {\r\n  assertstring(urlorname);\r\n  if (\r\n    String(urlorname).startsWith(\"./\") ||\r\n    String(urlorname).startsWith(\"../\")\r\n  ) {\r\n    const formatedurl = getnormalizedurl(urlorname, url);\r\n    return myrequirefun(formatedurl);\r\n  } else {\r\n    return myrequirefun(urlorname);\r\n  }\r\n};\r\nexport function getnormalizedurl(relativeurl: string, url: string) {\r\n  if (\r\n    String(relativeurl).startsWith(\"./\") ||\r\n    String(relativeurl).startsWith(\"../\")\r\n  ) {\r\n    const baseurl = getbaseurl(url);\r\n    const formatedurl = 格式化url(baseurl, relativeurl);\r\n    return formatedurl;\r\n  } else {\r\n    return relativeurl;\r\n  }\r\n}\r\n","export function 非空对象(o: any) {\r\n  return !!(\r\n    typeof o !== \"object\" ||\r\n    Object.keys(o).length ||\r\n    JSON.stringify(o) !== \"{}\"\r\n  );\r\n}\r\n","import { 非空对象 } from \"./notemptyobj\";\r\n\r\nexport function 处理非es模块(exportmodule: any[]) {\r\n  if (非空对象(exportmodule[0])) {\r\n    const exportdefault = exportmodule[0];\r\n    return exportdefault;\r\n  } else if (非空对象(exportmodule[1])) {\r\n    const exportdefault = exportmodule[1];\r\n\r\n    return exportdefault;\r\n  }\r\n}\r\n","export const depssymbol = Symbol(\"deps\");\r\nexport const typesymbol = Symbol(\"type\");\r\n\r\nexport const urlsymbol = Symbol(\"url\");\r\nexport const sourcesymbol = Symbol(\"source\");\r\nexport type MODULETYPE = \"amd\" | \"cjs\" | \"esm\" | \"json\";\r\n\r\nexport interface MODULE extends Record<string, any> {\r\n  [Symbol.toStringTag]: \"Module\";\r\n  [depssymbol]: string[];\r\n  [typesymbol]: MODULETYPE;\r\n  [urlsymbol]: string;\r\n  [sourcesymbol]: string;\r\n}\r\n","/**\r\n * util-deps.js - The parser for dependencies\r\n * ref: tests/research/parse-dependencies/test.html\r\n * ref: https://github.com/seajs/crequire\r\n */\r\nvar REQUIRE_RE = /\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|\\/\\*[\\S\\s]*?\\*\\/|\\/(?:\\\\\\/|[^\\/\\r\\n])+\\/(?=[^\\/])|\\/\\/.*|\\.\\s*require|(?:^|[^$])\\brequire\\s*\\(\\s*([\"'])(.+?)\\1\\s*\\)/g;\r\nvar SLASH_RE = /\\\\\\\\/g;\r\n\r\nfunction parseDependencies(code: string): string[] {\r\n  var ret: string[] = [];\r\n\r\n  code.replace(SLASH_RE, \"\").replace(REQUIRE_RE, function(m, m1, m2, ...args) {\r\n    if (m2) {\r\n      ret.push(m2);\r\n    }\r\n    return \"\";\r\n  });\r\n\r\n  return ret;\r\n}\r\nexport { parseDependencies };\r\n","export const cacheurltocjsfun: Record<string, Function> = {};\r\n","export function removerepetition(arr: any[]) {\r\n  return [...new Set(arr)];\r\n}\r\n","import { packagealias } from \"./alias\";\r\nimport cachedfetchtext, { CODETYPE } from \"./cachedfetchtext\";\r\nimport { 定义default } from \"./define-default\";\r\nimport { define } from \"./define.js\";\r\n\r\nimport dynamicimportshim from \"./dynamicimportshim.js\";\r\nimport { esmdefinegetter } from \"./esmdefinegetter\";\r\nimport { formatedurlrequire, getnormalizedurl } from \"./formatedurlrequire.js\";\r\nimport { 处理非es模块 } from \"./handlecjsmodule.js\";\r\nimport importcjsamdumd, { PACKAGESTORE } from \"./importcjsamdumd.js\";\r\nimport {\r\n  depssymbol,\r\n  MODULE,\r\n  MODULETYPE,\r\n  sourcesymbol,\r\n  typesymbol,\r\n  urlsymbol\r\n} from \"./module\";\r\nimport { myrequirefun } from \"./myrequirefun\";\r\nimport { parseDependencies } from \"./util-deps\";\r\nimport { cacheurltocjsfun } from \"./cacheurltocjsfun\";\r\nimport { removerepetition } from \"./remove-repetiton\";\r\nexport const { get, set, defineProperty } = Reflect;\r\n\r\nexport const 加载的模块没有输出 = \"加载的模块没有输出\";\r\n\r\nexport default async (url: string, packagename?: string) => {\r\n  if (packagename) {\r\n    packagealias[packagename] = url;\r\n  }\r\n\r\n  return await new Promise(主核心加载模块函数);\r\n  function 主核心加载模块函数(\r\n    resolve: (value?: any) => void,\r\n    reject: (reason?: any) => void\r\n  ) {\r\n    return ((resolve, reject) => {\r\n      return (async () => {\r\n        try {\r\n          //   return await (async () => {\r\n          let fetchpromisetext: string;\r\n          let codetype: CODETYPE | undefined;\r\n          try {\r\n            try {\r\n              [fetchpromisetext, codetype] = await cachedfetchtext(url);\r\n            } catch (e) {\r\n              console.warn(e);\r\n              reject(e);\r\n              return;\r\n            }\r\n            const moduleexport: MODULE = Object.create(null);\r\n            moduleexport[urlsymbol] = url;\r\n            let moduletype: MODULETYPE;\r\n            const scripttext = fetchpromisetext;\r\n            let modulesrcfun: string;\r\n            if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\r\n              defineProperty(moduleexport, Symbol.toStringTag, {\r\n                value: \"Module\"\r\n              });\r\n            }\r\n            modulesrcfun = scripttext;\r\n            moduleexport[depssymbol] = [];\r\n            moduleexport[sourcesymbol] = modulesrcfun;\r\n\r\n            if (\"json\" === codetype) {\r\n              const moduleexportdefault = JSON.parse(scripttext);\r\n              //   console.log(\"检测到json模块 \" + url);\r\n\r\n              moduletype = \"json\";\r\n              esmdefinegetter(moduleexport, moduleexportdefault);\r\n              moduleexport[typesymbol] = moduletype;\r\n              Object.freeze(moduleexport);\r\n              PACKAGESTORE[url] = moduleexport;\r\n              resolve(moduleexport);\r\n              return;\r\n            } else if (\"js\" === codetype) {\r\n              try {\r\n                const exports_exports = { [Symbol.toStringTag]: \"Module\" };\r\n                const module = {\r\n                  exports: { [Symbol.toStringTag]: \"Module\" }\r\n                };\r\n\r\n                try {\r\n                  let isamd = false;\r\n\r\n                  const 模块加载函数 =\r\n                    get(cacheurltocjsfun, url) ??\r\n                    new Function(\r\n                      \"require\",\r\n\r\n                      \"module\",\r\n                      \"exports\",\r\n                      \"define\",\r\n                      `                        \"use strict\";\\n/* ${url} */;\\n;${scripttext};\\n;/* ${url} */;\\n                        `\r\n                    );\r\n                  set(cacheurltocjsfun, url, 模块加载函数);\r\n                  //   console.log(模块加载函数);\r\n                  moduleexport[depssymbol] = removerepetition(\r\n                    parseDependencies(scripttext).map(urlorname => {\r\n                      return getnormalizedurl(urlorname, url);\r\n                    })\r\n                  );\r\n                  //   console.log(moduleexport[depssymbol]);\r\n                  await importcjsamdumd(moduleexport[depssymbol]);\r\n                  let amdfactory: Function = () => {};\r\n\r\n                  const require_require = (name: string) =>\r\n                    formatedurlrequire(name, url);\r\n\r\n                  const define_define = (\r\n                    name: any,\r\n                    deps?: any,\r\n                    callback?: any\r\n                  ) => {\r\n                    const defineglobalDefQueue = define(name, deps, callback);\r\n                    isamd = true;\r\n                    amdfactory = defineglobalDefQueue[2];\r\n                    moduleexport[depssymbol] = removerepetition(\r\n                      defineglobalDefQueue[1].map(urlorname => {\r\n                        return getnormalizedurl(urlorname, url);\r\n                      })\r\n                    );\r\n                  };\r\n                  Object.assign(define_define, { amd: true, cmd: true });\r\n                  // define_define.cmd = true;\r\n                  // define_define.amd = true;\r\n                  模块加载函数.call(\r\n                    module.exports,\r\n                    require_require,\r\n\r\n                    module,\r\n                    exports_exports,\r\n                    define_define\r\n                  );\r\n\r\n                  if (isamd) {\r\n                    moduletype = \"amd\";\r\n                    // console.log(moduleexport[depssymbol]);\r\n                    await importcjsamdumd(moduleexport[depssymbol]);\r\n                    module.exports =\r\n                      amdfactory.call(\r\n                        module.exports,\r\n                        ...moduleexport[depssymbol].map((e: string) =>\r\n                          myrequirefun(e)\r\n                        )\r\n                      ) ?? module.exports;\r\n                  } else {\r\n                    moduletype = \"cjs\";\r\n                  }\r\n\r\n                  const exportmodule = [exports_exports, module.exports ?? {}];\r\n                  const usefulexport = 处理非es模块(exportmodule);\r\n\r\n                  if (usefulexport) {\r\n                    定义default(moduleexport, usefulexport);\r\n                    esmdefinegetter(moduleexport, usefulexport);\r\n                  }\r\n                } catch (e) {\r\n                  console.warn(e);\r\n                  {\r\n                    if (e instanceof SyntaxError) {\r\n                      const topLevelBlobUrl = url;\r\n\r\n                      try {\r\n                        const exportdefault = await dynamicimportshim(\r\n                          topLevelBlobUrl\r\n                        );\r\n                        moduleexport[depssymbol] = [];\r\n                        moduletype = \"esm\";\r\n                        esmdefinegetter(moduleexport, exportdefault);\r\n                      } catch (e) {\r\n                        console.warn(e);\r\n                        reject(e);\r\n                        return;\r\n                      }\r\n                    } else {\r\n                      console.warn(e);\r\n                      reject(e);\r\n                      return;\r\n                    }\r\n                  }\r\n                }\r\n                moduleexport[typesymbol] = moduletype;\r\n                PACKAGESTORE[url] = moduleexport;\r\n\r\n                if (moduleexport.default) {\r\n                  esmdefinegetter(moduleexport, moduleexport.default);\r\n                }\r\n\r\n                Object.freeze(moduleexport);\r\n                resolve(moduleexport);\r\n                return;\r\n              } catch (e) {\r\n                console.warn(e);\r\n                reject(e);\r\n                return;\r\n              }\r\n            } else {\r\n              throw new Error(\"invalid codetype \" + codetype);\r\n            }\r\n          } catch (e) {\r\n            console.warn(e);\r\n            reject(e);\r\n            return;\r\n          }\r\n          //   })();\r\n        } catch (e) {\r\n          console.warn(e);\r\n          reject(e);\r\n          return;\r\n        }\r\n      })();\r\n    })(resolve, reject);\r\n  }\r\n};\r\n","import { packagealias } from \"./alias\";\r\nimport { 同时发起多个字符串 } from \"./arrayimportall.js\";\r\nimport { assertstring } from \"./assertstring.js\";\r\nimport coreload, { get } from \"./coreload.js\";\r\nimport { getmodule } from \"./getmodule.js\";\r\nimport { PACKAGESTORE } from \"./importcjsamdumd\";\r\nimport { isArray } from \"./isarray.js\";\r\nimport { urlsymbol } from \"./module.js\";\r\nconst 输入的类型错误输入的类型必须是字符串或者数组或对象 =\r\n  \"The type entered is incorrect, the type entered must be a string or an array or an object\";\r\n\r\nexport const 传入的参数必须是个object =\r\n  \"The argument passed in must be an object\";\r\nexport type PlainObj = Record<any, any>;\r\n\r\nexport default oldimportcjsamdumd;\r\n\r\nasync function oldimportcjsamdumd(url: any, packagename?: any): Promise<any> {\r\n  \"use strict\";\r\n\r\n  if (isArray(url)) {\r\n    return await (async (...args) => {\r\n      let suoyouimportpromise = [];\r\n      const 传入参数arr = args;\r\n      try {\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      } catch (error) {\r\n        console.warn(error);\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      } finally {\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      }\r\n      return suoyouimportpromise;\r\n    })(...url);\r\n  } else if (typeof url === \"string\" || typeof packagename === \"string\") {\r\n    assertstring(url);\r\n\r\n    try {\r\n      url = new URL(url).href;\r\n    } catch {\r\n      url = packagealias[url] ?? url;\r\n    }\r\n    return await (async (url: string, packagename?: string) => {\r\n      /* 转换相对路径 */\r\n      if (String(url).startsWith(\"./\") || String(url).startsWith(\"../\")) {\r\n        var urlobj = new URL(url, location.href);\r\n        url = urlobj.origin + urlobj.pathname;\r\n      }\r\n      try {\r\n        url = new URL(url).href;\r\n      } catch {\r\n        throw Error(\"invalid url \" + url);\r\n      }\r\n      if (typeof packagename === \"undefined\") {\r\n        packagename = new URL(url).href;\r\n      }\r\n      if (packagename) {\r\n        packagealias[packagename] = url;\r\n      }\r\n      if (\r\n        typeof PACKAGESTORE[packagename] !== \"undefined\" &&\r\n        get(PACKAGESTORE[packagename], urlsymbol) === url\r\n      ) {\r\n        return getmodule(packagename);\r\n      } else if (\r\n        typeof PACKAGESTORE[url] !== \"undefined\" &&\r\n        get(PACKAGESTORE[url], urlsymbol) === url\r\n      ) {\r\n        return getmodule(url);\r\n      } else {\r\n        return await coreload(url, packagename);\r\n      }\r\n    })(url, packagename);\r\n  } else {\r\n    throw new TypeError(输入的类型错误输入的类型必须是字符串或者数组或对象);\r\n  }\r\n}\r\n","\"use strict\";\r\n\r\nimport { cantfindError } from \"./cantfindError\";\r\nimport { getmodule } from \"./getmodule\";\r\nimport { isplainobject } from \"./isplainobject\";\r\nimport { isurl } from \"./isurl\";\r\nimport oldimportcjsamdumd from \"./oldimport\";\r\nimport { get } from \"./coreload\";\r\nimport { MODULE } from \"./module\";\r\n\r\nexport const 模块仓库中没有找到 =\r\n  \"Cannot find module in packagestore, Not found in module repository, \";\r\n\r\nexport const 参数必须为字符串 = \"Parameter must be a string\";\r\n(\"use strict\");\r\nexport const 字符串不能为空 = \"String cannot be empty\";\r\n\r\nexport const 补充加载依赖的模块网址 = \"补充加载依赖的模块网址\";\r\n\r\nexport default function importcjsamdumd(url: string[]): Promise<MODULE[]>;\r\nexport default function importcjsamdumd(\r\n  url: string,\r\n  packagename?: string\r\n): Promise<MODULE>;\r\n\r\nexport default async function importcjsamdumd(\r\n  url: any,\r\n  packagename?: any\r\n): Promise<any> {\r\n  let tryfailedtimes = 0;\r\n\r\n  return await oldimportcjsamdumd(url, packagename).catch(handleerror);\r\n  async function retryimport(url1: any, nam1: any, url2: any, name2: any) {\r\n    try {\r\n      await oldimportcjsamdumd(url1, nam1).catch(handleerror);\r\n      return await oldimportcjsamdumd(url2, name2);\r\n    } catch (error) {\r\n      console.warn(error);\r\n      return await oldimportcjsamdumd(url2, name2).catch(handleerror);\r\n    }\r\n  }\r\n  async function handleerror(e: Error): Promise<any> {\r\n    console.warn(e);\r\n    if (tryfailedtimes > 5) {\r\n      throw new Error(\r\n        \"Try loading, too many failures, give up trying!\" +\r\n          JSON.stringify(url) +\r\n          JSON.stringify(packagename)\r\n      );\r\n    }\r\n    tryfailedtimes++;\r\n\r\n    if (e instanceof cantfindError) {\r\n      const eurlorname = e.urlorname;\r\n      if (isurl(eurlorname)) {\r\n        console.log(补充加载依赖的模块网址, eurlorname);\r\n        return await retryimport(eurlorname, undefined, url, packagename);\r\n      } else if (isplainobject(url) && Reflect.has(url, eurlorname)) {\r\n        return await retryimport(\r\n          get(url, eurlorname),\r\n          eurlorname,\r\n          url,\r\n          packagename\r\n        );\r\n      } else {\r\n        throw e;\r\n      }\r\n    } else {\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n\r\nconst PACKAGESTORE: Record<string, Record<string | symbol, any>> = {};\r\nconst REQUIREPACKAGE = getmodule;\r\n\r\nexport { PACKAGESTORE, REQUIREPACKAGE };\r\n"],"names":["cantfindError","Error","[object Object]","message","urlorname","super","this","assertstring","s","TypeError","字符串不能为空","参数必须为字符串","packagealias","getmodule","packagename","findpackage","PACKAGESTORE","Object","freeze","模块仓库中没有找到","isplainobject","o","toString","call","isurl","url","flag","URL","href","error","async","同时发起多个字符串","a","importcjsamdumd","Promise","all","map","e","codetype","cachedtext","get","cachedurltotext","cachedtype","cachedurltotype","response","fetch","ok","contenttype","headers","includes","textsource","text","set","ismodule","定义default","target","def","defineProperty","enumerable","isArray","Array","isFunction","it","op","ostring","tag","define","cmd","amd","name","deps","callback","defineglobalDefQueue","createBlob","source","createObjectURL","Blob","type","dynamicimportshimfun","dynamicimportshim","Function","getnewimportpromise","symbolkey","Symbol","for","resolve","reject","document","createElement","clearsideeffect","removescript","removeerrorlisten","errorhandler","revokeObjectURL","src","onload","onerror","f","window","removeEventListener","remove","console","warn","addEventListener","topLevelBlobUrl","Reflect","has","moduleoutput","undefined","head","appendChild","esmdefinegetter","moduleexport","exportdefault","keys","forEach","key","getbaseurl","objurl","path","格式化url","baseurl","String","startsWith","endsWith","myrequirefun","requireinstead","default","formatedurlrequire","formatedurl","getnormalizedurl","relativeurl","非空对象","length","JSON","stringify","处理非es模块","exportmodule","depssymbol","typesymbol","urlsymbol","sourcesymbol","REQUIRE_RE","SLASH_RE","parseDependencies","code","ret","replace","m","m1","m2","args","push","cacheurltocjsfun","removerepetition","arr","Set","主核心加载模块函数","fetchpromisetext","cachedfetchtext","create","moduletype","scripttext","modulesrcfun","toStringTag","value","moduleexportdefault","parse","exports_exports","module","exports","isamd","模块加载函数","amdfactory","require_require","define_define","assign","usefulexport","SyntaxError","输入的类型错误输入的类型必须是字符串或者数组或对象","oldimportcjsamdumd","suoyouimportpromise","传入参数arr","urlobj","location","origin","pathname","coreload","补充加载依赖的模块网址","tryfailedtimes","catch","handleerror","retryimport","url1","nam1","url2","name2","eurlorname","log","REQUIREPACKAGE"],"mappings":"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"}