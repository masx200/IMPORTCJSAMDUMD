{"version":3,"file":"index.js","sources":["../src/cantfindError.ts","../src/assertstring.ts","../src/alias.ts","../src/getmodule.ts","../src/isurl.ts","../src/arrayimportall.ts","../src/mapaliastourl.ts","../src/concurrentimport.ts","../src/promisedefer.ts","../src/isfunction.ts","../src/AsyncFunctionconstructor.ts","../src/isobject.ts","../src/cachedfetchtext.ts","../src/ismodule.ts","../src/isplainobject.ts","../src/define-default.ts","../src/isarray.ts","../src/define.ts","../src/dynamicimportshim.ts","../src/esmdefinegetter.ts","../src/getbaseurl.ts","../src/formaturl.ts","../src/myrequirefun.ts","../src/formatedurlrequire.ts","../src/notemptyobj.ts","../src/handlecjsmodule.ts","../src/module.ts","../src/util-deps.ts","../src/cacheurltocjsfun.ts","../src/remove-repetiton.ts","../src/coreload.ts","../src/oldimport.ts","../src/importcjsamdumd.ts"],"sourcesContent":["export class cantfindError extends Error {\n  urlorname: string;\n  constructor(message: string, urlorname: string) {\n    super(message);\n    this.urlorname = urlorname;\n  }\n}\n","import { 参数必须为字符串, 字符串不能为空 } from \"./importcjsamdumd\";\n\nexport function assertstring(s: string): asserts s is string {\n  if (s === \"\") {\n    throw new TypeError(字符串不能为空);\n  }\n  if (typeof s !== \"string\") {\n    throw new TypeError(参数必须为字符串);\n  }\n}\n","export const packagealias: Record<string, string> = Object.create(null);\n","import { assertstring } from \"./assertstring\";\nimport { cantfindError } from \"./cantfindError\";\nimport { packagestore, 模块仓库中没有找到 } from \"./importcjsamdumd\";\nimport { packagealias } from \"./alias\";\n\nexport function getmodule(packagename: string): Record<any, any> {\n  assertstring(packagename);\n\n  const findpackage =\n    packagestore[packagename] || packagestore[packagealias[packagename]];\n  if (findpackage) {\n    Object.freeze(findpackage);\n    return findpackage;\n  } else {\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\n  }\n}\n","import { assertstring } from \"./assertstring\";\n\nexport function isurl(url: string) {\n  var flag = false;\n  try {\n    assertstring(url);\n\n    url = new URL(url).href;\n    flag = true;\n  } catch (error) {\n    flag = false;\n  }\n  return flag;\n}\n","import { MODULE } from \"./module\";\n\nexport async function 同时发起多个字符串(\n  a: Array<string>,\n  importcjsamdumd: Function\n): Promise<Array<MODULE>> {\n  return await Promise.all(\n    a.map(e => {\n      return importcjsamdumd(e);\n    })\n  );\n}\nexport async function 同时发起多个entries(\n  a: any[][],\n  importcjsamdumd: Function\n): Promise<Array<MODULE>> {\n  return await Promise.all(\n    a.map(e => {\n      return importcjsamdumd(e[0], e[1]);\n    })\n  );\n}\n","export function mapaliastourl(arr: string[]): string[] {\n  return arr.map(name => {\n    if (isurl(name)) {\n      return name;\n    } else {\n      return packagealias[name] ?? name;\n    }\n  });\n}\n\nimport { isurl } from \"./isurl\";\n\nimport { packagealias } from \"./alias\";\n","//在模块加载未完成的过程中，防止多次重复加载同一个模块\n\nimport { Defered } from \"./promisedefer\";\n\nexport const concurrentimport: Record<string, Defered> = Object.create(null);\n","export function promisedefer(): Defered {\n  let resolve = () => {};\n  let reject = () => {};\n  let promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return { resolve, reject, promise };\n}\nexport interface Defered {\n  promise: Promise<any>;\n  resolve: (result: any) => void;\n  reject: (reason: any) => void;\n}\n","export function isFunction(it: any): it is Function {\n  const op = {}; // Object.prototype;\n  const ostring = op.toString;\n  const tag = ostring.call(it);\n  return (\n    (\"function\" === typeof it && tag === \"[object Function]\") ||\n    tag === \"[object AsyncFunction]\"\n  );\n}\n","/*在此页面\n语法\n描述\n属性\nAsyncFunction 原型对象\nAsyncFunction 实例\n示例\n规范\n浏览器兼容性\n参见\n \nAsyncFunction 构造函数用来创建新的 异步函数 对象，JavaScript 中每个异步函数都是  AsyncFunction 的对象。\n\n注意，AsyncFunction 并不是一个全局对象，需要通过下面的方法来获取：\n*/\n\nexport const AsyncFunctionconstructor: {\n  new (...args: string[]): Function;\n  (...args: string[]): Function;\n} = Object.getPrototypeOf(async function() {}).constructor;\n","export function isobject(a: any): a is Record<any, any> {\n  return !!(a && typeof a === \"object\");\n}\n","export const cachedurltotext: Record<string, string> = Object.create(null);\n;\nconst cachedurltotype: Record<string, string> = Object.create(null);\n;\n\nimport { set, get } from \"./coreload\";\nexport type CODETYPE = \"json\" | \"js\";\nexport default async function(url: string): Promise<[string, CODETYPE]> {\n  let codetype: CODETYPE | undefined;\n  const cachedtext = get(cachedurltotext, url);\n  const cachedtype = get(cachedurltotype, url);\n  if (cachedtext && cachedtype) {\n    return [cachedtext, cachedtype];\n  } else {\n    const response = await fetch(url);\n    // .then(async response => {\n    if (!response.ok) {\n      throw new Error(\"fetch failed \" + url);\n    }\n    const contenttype = response.headers.get(\"content-type\");\n    if (contenttype?.includes(\"javascript\")) {\n      codetype = \"js\";\n    } else if (contenttype?.includes(\"json\")) {\n      codetype = \"json\";\n    } else {\n      throw new Error(\"invalid content-type \" + contenttype);\n    }\n    //   return await response.text();\n    const textsource = await response.text();\n    // });\n    set(cachedurltotext, url, textsource);\n\n    // if (!codetype) {\n    //   throw new Error();\n    // }\n    set(cachedurltotype, url, codetype);\n    return [textsource, codetype];\n  }\n}\n","export function ismodule(a: any): boolean {\n  return {}.toString.call(a) === \"[object Module]\";\n}\n","import { PlainObj } from \"./oldimport\";\n\nexport function isplainobject(o: any): o is PlainObj {\n  return (\n    typeof o === \"object\" &&\n    {}.toString.call(o) === \"[object Object]\" &&\n    o instanceof Object\n  );\n}\n","import { defineProperty, get } from \"./coreload\";\nimport { ismodule } from \"./ismodule\";\nimport { isplainobject } from \"./isplainobject\";\n\nexport function 定义default(\n  target: Record<string, any>,\n  def: { [x: string]: string; default: any } | Function\n) {\n  def = get(def, \"default\") ?? def;\n\n  if (!ismodule(def) && !isplainobject(def)) {\n    defineProperty(target, \"default\", {\n      enumerable: true,\n      get() {\n        return def;\n      }\n    });\n  }\n}\n","export function isArray(a: any): a is Array<any> {\n  return Array.isArray(a) && {}.toString.call(a) === \"[object Array]\";\n}\n","import { isArray } from \"./isarray\";\n//import { isFunction } from \"./isfunction\";\n\n//define.cmd = true;\n//define.amd = true;\nfunction define(\n  name: any,\n  deps?: any,\n  callback?: any\n): [string | undefined, string[], Function | Record<any, any> | undefined] {\n  \"use strict\";\n\n  if (typeof name !== \"string\") {\n    callback = deps;\n    deps = name;\n    name = null;\n  }\n  if (!isArray(deps)) {\n    callback = deps;\n    deps = null;\n  }\n  if (!deps /*&& isFunction(callback)*/) {\n    deps = [];\n  }\n  const defineglobalDefQueue: [\n    string | undefined,\n    string[],\n    Function | Record<any, any> | undefined\n  ] = [name, deps, callback];\n  //   console.log(defineglobalDefQueue);\n  return defineglobalDefQueue;\n}\nexport { define };\n","\"use strict\";\n\nimport { get, set } from \"./coreload\";\n\nimport { assertstring } from \"./assertstring\";\ntype Module = Record<any, any>;\nexport { createBlob };\nfunction createBlob(source: string) {\n  return URL.createObjectURL(\n    new Blob([source], { type: \"application/javascript\" })\n  );\n}\n\ntype dynamicimport = (url: string) => Promise<Module>;\nconst dynamicimportshimfun = (() => {\n  \"use strict\";\n\n  let dynamicimportshim: dynamicimport;\n\n  try {\n    dynamicimportshim = Function(\"u\", \"return import(u)\") as dynamicimport;\n  } catch (error) {\n    dynamicimportshim = async function(url: string): Promise<Module> {\n      assertstring(url);\n\n      url = new URL(url).href;\n\n      return await getnewimportpromise(url);\n    };\n  }\n  return dynamicimportshim;\n})();\nexport default dynamicimportshimfun;\nfunction getnewimportpromise(url: string): Promise<Module> {\n  const symbolkey = Symbol.for(\"import-\" + url);\n  return new Promise((resolve, reject) => {\n    const s = document.createElement(\"script\");\n    function clearsideeffect() {\n      removescript(s);\n      removeerrorlisten(errorhandler);\n      URL.revokeObjectURL(s.src);\n      s.onload = s.onerror = null;\n    }\n    function removeerrorlisten(f: (evt: ErrorEvent) => void) {\n      try {\n        window.removeEventListener(\"error\", f);\n      } catch (error) {}\n    }\n    function removescript(e: HTMLScriptElement) {\n      e.remove();\n    }\n    function errorhandler(e: ErrorEvent) {\n      console.warn(e.error);\n      reject(e.error);\n      clearsideeffect();\n    }\n    window.addEventListener(\"error\", errorhandler);\n    const topLevelBlobUrl = createBlob(\n      `import*as m from'${url}';\\nwindow[Symbol.for('${\"import-\" + url}')]=m`\n    );\n    s.type = \"module\";\n    s.src = topLevelBlobUrl;\n    s.async = true;\n    s.onload = () => {\n      if (Reflect.has(window, symbolkey)) {\n        const moduleoutput = get(window, symbolkey);\n        resolve(moduleoutput);\n        set(window, symbolkey, undefined);\n        clearsideeffect();\n      }\n    };\n    s.onerror = () => {\n      reject(new Error(\"import load failed from network\" + url));\n      clearsideeffect();\n    };\n    document.head.appendChild(s);\n  });\n}\n","import { defineProperty, get } from \"./coreload\";\nimport { isFunction } from \"./isfunction\";\n\nexport function esmdefinegetter(\n  moduleexport: Record<string, any>,\n  exportdefault: Record<string, any> | Function\n) {\n  if (\n    exportdefault &&\n    (isFunction(exportdefault) || typeof exportdefault === \"object\")\n  ) {\n    Object.keys(exportdefault).forEach(key => {\n      try {\n        defineProperty(moduleexport, key, {\n          enumerable: true,\n          get() {\n            return get(exportdefault, key);\n          }\n        });\n      } catch (error) {}\n    });\n  }\n}\n","export function getbaseurl(url: string): string {\n  var objurl = new URL(url);\n  /*  var a = objurl.pathname.split(\"/\");\n  a[a.length - 1] = \"\";\n  var path = objurl.origin + a.join(\"/\"); */\n  let path = new URL(\".\", objurl.href).href;\n  return path;\n}\n","export function 格式化url(baseurl: string, urlorname: string): string {\n  if (\n    String(urlorname).startsWith(\"./\") ||\n    String(urlorname).startsWith(\"../\")\n  ) {\n    if (\n      !(\n        String(urlorname).endsWith(\".js\") ||\n        urlorname.endsWith(\".mjs\") ||\n        urlorname.endsWith(\".json\") ||\n        urlorname.endsWith(\".css\") ||\n        urlorname.endsWith(\".html\")\n      )\n    ) {\n      urlorname += \".js\";\n    }\n    urlorname = new URL(baseurl + urlorname).href;\n  }\n  return urlorname;\n}\n","import { assertstring } from \"./assertstring\";\nimport { cantfindError } from \"./cantfindError\";\nimport { packagestore, 模块仓库中没有找到 } from \"./importcjsamdumd\";\nimport { packagealias } from \"./alias\";\n\nexport const myrequirefun = function requireinstead(packagename: string) {\n  assertstring(packagename);\n\n  const findpackage =\n    packagestore[packagename] || packagestore[packagealias[packagename]];\n  if (findpackage) {\n    Object.freeze(findpackage);\n    return findpackage.default ?? findpackage;\n  } else {\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\n  }\n};\n","import { getbaseurl } from \"./getbaseurl\";\nimport { assertstring } from \"./assertstring\";\n\nimport { 格式化url } from \"./formaturl\";\nimport { myrequirefun } from \"./myrequirefun\";\n\nexport const formatedurlrequire = (urlorname: string, url: string) => {\n  assertstring(urlorname);\n  if (\n    String(urlorname).startsWith(\"./\") ||\n    String(urlorname).startsWith(\"../\")\n  ) {\n    const formatedurl = getnormalizedurl(urlorname, url);\n    return myrequirefun(formatedurl);\n  } else {\n    return myrequirefun(urlorname);\n  }\n};\nexport function getnormalizedurl(relativeurl: string, url: string) {\n  if (\n    String(relativeurl).startsWith(\"./\") ||\n    String(relativeurl).startsWith(\"../\")\n  ) {\n    const baseurl = getbaseurl(url);\n    const formatedurl = 格式化url(baseurl, relativeurl);\n    return formatedurl;\n  } else {\n    return relativeurl;\n  }\n}\n","export function 非空对象(o: any) {\n  return !!(\n    typeof o !== \"object\" ||\n    Object.keys(o).length ||\n    JSON.stringify(o) !== \"{}\"\n  );\n}\n","import { 非空对象 } from \"./notemptyobj\";\n\nexport function 处理非es模块(exportmodule: any[]) {\n  if (非空对象(exportmodule[0])) {\n    const exportdefault = exportmodule[0];\n    return exportdefault;\n  } else if (非空对象(exportmodule[1])) {\n    const exportdefault = exportmodule[1];\n\n    return exportdefault;\n  }\n}\n","export const depssymbol = Symbol(\"deps\");\nexport const typesymbol = Symbol(\"type\");\n\nexport const urlsymbol = Symbol(\"url\");\nexport const sourcesymbol = Symbol(\"source\");\nexport type MODULETYPE = \"amd\" | \"cjs\" | \"esm\" | \"json\";\n\nexport interface MODULE extends Record<string, any> {\n  [Symbol.toStringTag]: \"Module\";\n  [depssymbol]: string[];\n  [typesymbol]: MODULETYPE;\n  [urlsymbol]: string;\n  // [sourcesymbol]: string;\n}\n","/**\n * util-deps.js - The parser for dependencies\n * ref: tests/research/parse-dependencies/test.html\n * ref: https://github.com/seajs/crequire\n */\nvar REQUIRE_RE = /\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|\\/\\*[\\S\\s]*?\\*\\/|\\/(?:\\\\\\/|[^\\/\\r\\n])+\\/(?=[^\\/])|\\/\\/.*|\\.\\s*require|(?:^|[^$])\\brequire\\s*\\(\\s*([\"'])(.+?)\\1\\s*\\)/g;\nvar SLASH_RE = /\\\\\\\\/g;\n\nfunction parseDependencies(code: string): string[] {\n  var ret: string[] = [];\n\n  code.replace(SLASH_RE, \"\").replace(REQUIRE_RE, function(m, m1, m2, ...args) {\n    if (m2) {\n      ret.push(m2);\n    }\n    return \"\";\n  });\n\n  return ret;\n}\nexport { parseDependencies };\n","export const cacheurltocjsfun: Record<string, Function> = Object.create(null);\n\n\n","export function removerepetition(arr: any[]) {\n  return [...new Set(arr)];\n}\n","import { mapaliastourl } from \"./mapaliastourl\";\n\nimport { concurrentimport } from \"./concurrentimport\";\n\nimport { promisedefer } from \"./promisedefer\";\n\nimport { isFunction } from \"./isfunction\";\n\nimport { AsyncFunctionconstructor } from \"./AsyncFunctionconstructor\";\nimport { isobject } from \"./isobject\";\n//import { packagealias } from \"./alias\";\nimport cachedfetchtext, { CODETYPE } from \"./cachedfetchtext\";\nimport { 定义default } from \"./define-default\";\nimport { define } from \"./define.js\";\n\nimport dynamicimportshim from \"./dynamicimportshim.js\";\nimport { esmdefinegetter } from \"./esmdefinegetter\";\nimport { formatedurlrequire, getnormalizedurl } from \"./formatedurlrequire.js\";\nimport { 处理非es模块 } from \"./handlecjsmodule.js\";\nimport importcjsamdumd, {  packagestore  } from \"./importcjsamdumd.js\";\nimport {\n  depssymbol,\n  MODULE,\n  MODULETYPE,\n // sourcesymbol,\n  typesymbol,\n  urlsymbol\n} from \"./module\";\nimport { myrequirefun } from \"./myrequirefun\";\nimport { parseDependencies } from \"./util-deps\";\nimport { cacheurltocjsfun } from \"./cacheurltocjsfun\";\nimport { removerepetition } from \"./remove-repetiton\";\nexport const { get, set, defineProperty } = Reflect;\n\nexport const 加载的模块没有输出 = \"加载的模块没有输出\";\n\nexport default async (url: string /*, packagename?: string*/) => {\n  /*在模块加载未完成的过程中，防止多次重复加载同一个模块\n   */\n\n  if (concurrentimport[url]) {\n    return await concurrentimport[url].promise;\n  } else {\n    const defered = promisedefer();\n    concurrentimport[url] = defered;\n    try {\n      const module = await new Promise(主核心加载模块函数);\n      defered.resolve(module);\n      return module;\n    } catch (e) {\n      defered.reject(e);\n      throw e;\n    }\n  }\n  /*if (packagename) {\n    packagealias[packagename] = url;\n  }\n*/\n async function 主核心加载模块函数(\n    resolve: (value?: any) => void,\n    reject: (reason?: any) => void\n  ) {\n   // return ((resolve, reject) => {\n    //  return (async () => {\n        try {\n          //   return await (async () => {\n          let fetchpromisetext: string;\n          let codetype: CODETYPE | undefined;\n          try {\n            try {\n              [fetchpromisetext, codetype] = await cachedfetchtext(url);\n            } catch (e) {\n              console.warn(e);\n              reject(e);\n              return;\n            }\n            const moduleexport: MODULE = Object.create(null);\n            moduleexport[urlsymbol] = url;\n            let moduletype: MODULETYPE;\n            const scripttext = fetchpromisetext;\n            // let modulesrcfun: string;\n            if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n              defineProperty(moduleexport, Symbol.toStringTag, {\n                value: \"Module\"\n              });\n            }\n            //modulesrcfun = scripttext;\n            moduleexport[depssymbol] = [];\n            // moduleexport[sourcesymbol] = modulesrcfun;\n\n            if (\"json\" === codetype) {\n              const moduleexportdefault = JSON.parse(scripttext);\n              //   console.log(\"检测到json模块 \" + url);\n\n              moduletype = \"json\";\n              esmdefinegetter(moduleexport, moduleexportdefault);\n              moduleexport[typesymbol] = moduletype;\n              Object.freeze(moduleexport);\n               packagestore [url] = moduleexport;\n              resolve(moduleexport);\n              return;\n            } else if (\"js\" === codetype) {\n              try {\n                const exports_exports = { [Symbol.toStringTag]: \"Module\" };\n                const module = {\n                  exports: { [Symbol.toStringTag]: \"Module\" }\n                };\n\n                try {\n                  let isamd = false;\n\n                  const 模块加载函数 =\n                    get(cacheurltocjsfun, url) ??\n                    new AsyncFunctionconstructor(\n                      \"require\",\n                      \"exports\",\n\n                      \"module\",\n\n                      \"define\",\n                      `                        \"use strict\";\\n/* ${url} */;\\n;${scripttext};\\n;/* ${url} */;\\n                        `\n                    );\n                  set(cacheurltocjsfun, url, 模块加载函数);\n                  //   console.log(模块加载函数);\n                  moduleexport[depssymbol] = removerepetition(\n                    mapaliastourl(\n                      parseDependencies(scripttext).map(urlorname => {\n                        return getnormalizedurl(urlorname, url);\n                      })\n                    )\n                  );\n                  //   console.log(moduleexport[depssymbol]);\n                  await importcjsamdumd(moduleexport[depssymbol]);\n                  let amdfactory:\n                    | Function\n                    | Record<any, any>\n                    | undefined = () => {};\n\n                  const require_require = (name: string) =>\n                    formatedurlrequire(name, url);\n\n                  const define_define = (\n                    name: any,\n                    deps?: any,\n                    callback?: any\n                  ) => {\n                    const defineglobalDefQueue = define(name, deps, callback);\n                    isamd = true;\n                    amdfactory = defineglobalDefQueue[2];\n                    moduleexport[depssymbol] = removerepetition(\n                      mapaliastourl(\n                        defineglobalDefQueue[1].map(urlorname => {\n                          return getnormalizedurl(urlorname, url);\n                        })\n                      )\n                    );\n                  };\n                  Object.assign(define_define, { amd: true, cmd: true });\n                  // define_define.cmd = true;\n                  // define_define.amd = true;\n                  /* 支持顶层await和async函数了*/\n                  await 模块加载函数.call(\n                    module.exports,\n                    require_require,\n                    exports_exports,\n\n                    module,\n\n                    define_define\n                  );\n\n                  if (isamd) {\n                    moduletype = \"amd\";\n                    // console.log(moduleexport[depssymbol]);\n                    await importcjsamdumd(moduleexport[depssymbol]);\n                    /*允许factory函数返回promise*/\n                    /*factory也可以是个对象*/\n\n                    /*如果cmd/amd模块没有依赖，则函数调用参数为[require,exports,module]*/\n                    let amdcallargs: any[];\n                    if (moduleexport[depssymbol].length) {\n                      amdcallargs = moduleexport[depssymbol].map((e: string) =>\n                        myrequirefun(e)\n                      );\n                    } else {\n                      amdcallargs = [require_require, exports_exports, module];\n                    }\n                    /*\n\nfunction包含在object当中了\n*/\n                    let define_exports :any\n                    if(isFunction(amdfactory)){\n                    \tdefine_exports=\namdfactory.call(module.exports, ...amdcallargs);\n}else if(isobject(amdfactory)){\ndefine_exports=amdfactory\n}\n\n               //       ? amdfactory\n                  //    : isFunction(amdfactory) &&\n                        \n                    define_exports = await define_exports;\n                    !!define_exports && (module.exports = define_exports);\n                  } else {\n                    moduletype = \"cjs\";\n                  }\n\n                  !module.exports &&\n                    (module.exports = { [Symbol.toStringTag]: \"Module\" });\n\n                  const exportmodule = [exports_exports, module.exports];\n                  const usefulexport = await 处理非es模块(exportmodule);\n\n                  if (usefulexport) {\n                    定义default(moduleexport, usefulexport);\n                    esmdefinegetter(moduleexport, usefulexport);\n                  }\n                } catch (e) {\n                  console.warn(e);\n                  {\n                    if (e instanceof SyntaxError) {\n                      const topLevelBlobUrl = url;\n\n                      try {\n                        const exportdefault = await dynamicimportshim(\n                          topLevelBlobUrl\n                        );\n                        moduleexport[depssymbol] = [];\n                        moduletype = \"esm\";\n                        esmdefinegetter(moduleexport, exportdefault);\n                      } catch (e) {\n                        console.warn(e);\n                        reject(e);\n                        return;\n                      }\n                    } else {\n                      console.warn(e);\n                      reject(e);\n                      return;\n                    }\n                  }\n                }\n                moduleexport[typesymbol] = moduletype;\n                 packagestore [url] = moduleexport;\n\n                if (moduleexport.default) {\n                  esmdefinegetter(moduleexport, moduleexport.default);\n                }\n\n                Object.freeze(moduleexport);\n                resolve(moduleexport);\n                return;\n              } catch (e) {\n                console.warn(e);\n                reject(e);\n                return;\n              }\n            } else {\n              throw new Error(\"invalid codetype \" + codetype);\n            }\n          } catch (e) {\n            console.warn(e);\n            reject(e);\n            return;\n          }\n          //   })();\n        } catch (e) {\n          console.warn(e);\n          reject(e);\n          return;\n        }\n    //  })();\n  //  })(resolve, reject);\n  }\n};\n","import { packagealias } from \"./alias\";\nimport { 同时发起多个字符串 } from \"./arrayimportall.js\";\nimport { assertstring } from \"./assertstring.js\";\nimport coreload, { get } from \"./coreload.js\";\nimport { getmodule } from \"./getmodule.js\";\nimport {  packagestore } from \"./importcjsamdumd\";\nimport { isArray } from \"./isarray.js\";\nimport { urlsymbol } from \"./module.js\";\nconst 输入的类型错误输入的类型必须是字符串或者数组或对象 =\n  \"The type entered is incorrect, the type entered must be a string or an array \";\n\n//export const 传入的参数必须是个object =\n// \"The argument passed in must be an object\";\nexport type PlainObj = Record<any, any>;\n\nexport default oldimportcjsamdumd;\n\nasync function oldimportcjsamdumd(url: any, packagename?: any): Promise<any> {\n  \"use strict\";\n\n  if (isArray(url)) {\n    return await (async (...args) => {\n      let suoyouimportpromise = [];\n      const 传入参数arr = args;\n      try {\n        suoyouimportpromise = await 同时发起多个字符串(\n          传入参数arr,\n          oldimportcjsamdumd\n        );\n      } catch (error) {\n        console.warn(error);\n        suoyouimportpromise = await 同时发起多个字符串(\n          传入参数arr,\n          oldimportcjsamdumd\n        );\n      } finally {\n        suoyouimportpromise = await 同时发起多个字符串(\n          传入参数arr,\n          oldimportcjsamdumd\n        );\n      }\n      return suoyouimportpromise;\n    })(...url);\n  } else if (typeof url === \"string\" || typeof packagename === \"string\") {\n    assertstring(url);\n\n    try {\n      url = new URL(url).href;\n    } catch {\n      url = packagealias[url] ?? url;\n    }\n    return await (async (url: string, packagename?: string) => {\n      /* 转换相对路径 */\n      if (String(url).startsWith(\"./\") || String(url).startsWith(\"../\")) {\n        var urlobj = new URL(url, location.href);\n        url = urlobj.origin + urlobj.pathname;\n      }\n      try {\n        url = new URL(url).href;\n      } catch {\n        throw Error(\"invalid url \" + url);\n      }\n      if (typeof packagename === \"undefined\") {\n        packagename = new URL(url).href;\n      }\n      if (packagename) {\n        packagealias[packagename] = url;\n      }\n      if (\n        typeof  packagestore[packagename] !== \"undefined\" &&\n        get( packagestore[packagename], urlsymbol) === url\n      ) {\n        return getmodule(packagename);\n      } else if (\n        typeof  packagestore[url] !== \"undefined\" &&\n        get( packagestore[url], urlsymbol) === url\n      ) {\n        return getmodule(url);\n      } else {\n        return await coreload(url /*, packagename*/);\n      }\n    })(url, packagename);\n  } else {\n    throw new TypeError(输入的类型错误输入的类型必须是字符串或者数组或对象);\n  }\n}\n","\"use strict\";\n\nimport { cantfindError } from \"./cantfindError\";\nimport { getmodule } from \"./getmodule\";\n//import { isplainobject } from \"./isplainobject\";\nimport { isurl } from \"./isurl\";\nimport oldimportcjsamdumd from \"./oldimport\";\n//import { get } from \"./coreload\";\nimport { MODULE } from \"./module\";\nconst packagestore: Record<string, Record<any, any>> = Object.create(null);\nconst requirepackage = getmodule;\n\nexport { packagestore, requirepackage };\n\nexport const 模块仓库中没有找到 =\n  \"Cannot find module in packagestore, Not found in module repository, \";\n\nexport const 参数必须为字符串 = \"Parameter must be a string\";\n(\"use strict\");\nexport const 字符串不能为空 = \"String cannot be empty\";\n\nexport const 补充加载依赖的模块网址 = \"补充加载依赖的模块网址\";\n\nexport default importcjsamdumd;\nfunction importcjsamdumd(url: string[]): Promise<MODULE[]>;\nfunction importcjsamdumd(url: string, packagename?: string): Promise<MODULE>;\n\nasync function importcjsamdumd(url: any, packagename?: any): Promise<any> {\n  let tryfailedtimes = 0;\n\n  return await oldimportcjsamdumd(url, packagename).catch(handleerror);\n  async function retryimport(url1: any, nam1: any, url2: any, name2: any) {\n    try {\n      await oldimportcjsamdumd(url1, nam1).catch(handleerror);\n      return await oldimportcjsamdumd(url2, name2);\n    } catch (error) {\n      console.warn(error);\n      return await oldimportcjsamdumd(url2, name2).catch(handleerror);\n    }\n  }\n  async function handleerror(e: Error): Promise<any> {\n    console.warn(e);\n    if (tryfailedtimes > 5) {\n      throw new Error(\n        \"Try loading, too many failures, give up trying!\" +\n          JSON.stringify(url) +\n          JSON.stringify(packagename)\n      );\n    }\n    tryfailedtimes++;\n\n    if (e instanceof cantfindError) {\n      const eurlorname = e.urlorname;\n      if (isurl(eurlorname)) {\n        console.log(补充加载依赖的模块网址, eurlorname);\n        return await retryimport(eurlorname, undefined, url, packagename);\n      } else {\n        /*\nelse if (isplainobject(url) && Reflect.has(url, eurlorname)) {\n        return await retryimport(\n          get(url, eurlorname),\n          eurlorname,\n          url,\n          packagename\n        );\n      }\n*/\n        throw e;\n      }\n    } else {\n      throw e;\n    }\n  }\n}\n"],"names":["cantfindError","Error","[object Object]","message","urlorname","super","this","assertstring","s","TypeError","字符串不能为空","参数必须为字符串","packagealias","Object","create","getmodule","packagename","findpackage","packagestore","freeze","模块仓库中没有找到","isurl","url","flag","URL","href","error","async","同时发起多个字符串","a","importcjsamdumd","Promise","all","map","e","mapaliastourl","arr","name","concurrentimport","promisedefer","resolve","reject","promise","res","rej","isFunction","it","op","ostring","toString","tag","call","AsyncFunctionconstructor","getPrototypeOf","constructor","isobject","cachedurltotext","cachedurltotype","codetype","cachedtext","get","cachedtype","response","fetch","ok","contenttype","headers","includes","textsource","text","set","ismodule","isplainobject","o","定义default","target","def","defineProperty","enumerable","isArray","Array","define","deps","callback","defineglobalDefQueue","createBlob","source","createObjectURL","Blob","type","dynamicimportshimfun","dynamicimportshim","Function","getnewimportpromise","symbolkey","Symbol","for","document","createElement","clearsideeffect","removescript","removeerrorlisten","errorhandler","revokeObjectURL","src","onload","onerror","f","window","removeEventListener","remove","console","warn","addEventListener","topLevelBlobUrl","Reflect","has","moduleoutput","undefined","head","appendChild","esmdefinegetter","moduleexport","exportdefault","keys","forEach","key","getbaseurl","objurl","path","格式化url","baseurl","String","startsWith","endsWith","myrequirefun","requireinstead","default","formatedurlrequire","formatedurl","getnormalizedurl","relativeurl","非空对象","length","JSON","stringify","处理非es模块","exportmodule","depssymbol","typesymbol","urlsymbol","REQUIRE_RE","SLASH_RE","parseDependencies","code","ret","replace","m","m1","m2","args","push","cacheurltocjsfun","removerepetition","Set","defered","module","主核心加载模块函数","fetchpromisetext","cachedfetchtext","moduletype","scripttext","toStringTag","value","moduleexportdefault","parse","exports_exports","exports","isamd","模块加载函数","amdfactory","require_require","define_define","assign","amd","cmd","amdcallargs","define_exports","usefulexport","SyntaxError","输入的类型错误输入的类型必须是字符串或者数组或对象","oldimportcjsamdumd","suoyouimportpromise","传入参数arr","urlobj","location","origin","pathname","coreload","requirepackage","补充加载依赖的模块网址","tryfailedtimes","catch","handleerror","retryimport","url1","nam1","url2","name2","eurlorname","log"],"mappings":"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"}