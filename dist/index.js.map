{"version":3,"file":"index.js","sources":["../src/cantfindError.ts","../src/assertstring.ts","../src/alias.ts","../src/getmodule.ts","../src/isplainobject.ts","../src/isurl.ts","../src/arrayimportall.ts","../src/cachedfetchtext.ts","../src/ismodule.ts","../src/define-default.ts","../src/isarray.ts","../src/isfunction.ts","../src/define.ts","../src/dynamicimportshim.ts","../src/esmdefinegetter.ts","../src/getbaseurl.ts","../src/formaturl.ts","../src/myrequirefun.ts","../src/formatedurlrequire.ts","../src/notemptyobj.ts","../src/handlecjsmodule.ts","../src/module.ts","../src/util-deps.ts","../src/coreload.ts","../src/oldimport.ts","../src/importcjsamdumd.ts"],"sourcesContent":["export class cantfindError extends Error {\r\n  urlorname: string;\r\n  constructor(message: string, urlorname: string) {\r\n    super(message);\r\n    this.urlorname = urlorname;\r\n  }\r\n}\r\n","import { 参数必须为字符串, 字符串不能为空 } from \"./importcjsamdumd\";\r\n\r\nexport function assertstring(s: string): asserts s is string {\r\n  if (s === \"\") {\r\n    throw new TypeError(字符串不能为空);\r\n  }\r\n  if (typeof s !== \"string\") {\r\n    throw new TypeError(参数必须为字符串);\r\n  }\r\n}\r\n","export const packagealias: Record<string, string> = {};\r\n","import { assertstring } from \"./assertstring\";\r\nimport { cantfindError } from \"./cantfindError\";\r\nimport { PACKAGESTORE, 模块仓库中没有找到 } from \"./importcjsamdumd\";\r\nimport { packagealias } from \"./alias\";\r\n\r\nexport function getmodule(packagename: string) {\r\n  assertstring(packagename);\r\n\r\n  const findpackage =\r\n    PACKAGESTORE[packagename] || PACKAGESTORE[packagealias[packagename]];\r\n  if (findpackage) {\r\n    Object.freeze(findpackage);\r\n    return findpackage;\r\n  } else {\r\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\r\n  }\r\n}\r\n","import { PlainObj } from \"./oldimport\";\r\n\r\nexport function isplainobject(o: any): o is PlainObj {\r\n  return (\r\n    typeof o === \"object\" &&\r\n    {}.toString.call(o) === \"[object Object]\" &&\r\n    o instanceof Object\r\n  );\r\n}\r\n","import { assertstring } from \"./assertstring\";\r\n\r\nexport function isurl(url: string) {\r\n  var flag = false;\r\n  try {\r\n    assertstring(url);\r\n\r\n    url = new URL(url).href;\r\n    flag = true;\r\n  } catch (error) {\r\n    flag = false;\r\n  }\r\n  return flag;\r\n}\r\n","import { MODULE } from \"./module\";\r\n\r\nexport async function 同时发起多个字符串(\r\n  a: Array<string>,\r\n  importcjsamdumd: Function\r\n): Promise<Array<MODULE>> {\r\n  return await Promise.all(\r\n    a.map(e => {\r\n      return importcjsamdumd(e);\r\n    })\r\n  );\r\n}\r\nexport async function 同时发起多个entries(\r\n  a: any[][],\r\n  importcjsamdumd: Function\r\n): Promise<Array<MODULE>> {\r\n  return await Promise.all(\r\n    a.map(e => {\r\n      return importcjsamdumd(e[0], e[1]);\r\n    })\r\n  );\r\n}\r\n","import { set, get } from \"./coreload\";\r\nexport type CODETYPE = \"json\" | \"js\";\r\nexport default async function(url: string): Promise<[string, CODETYPE]> {\r\n  let codetype: CODETYPE | undefined;\r\n  const cachedtext = get(cachedurltotext, url);\r\n\r\n  if (cachedtext) {\r\n    return cachedtext;\r\n  } else {\r\n    const textsource = await fetch(url).then(async response => {\r\n      if (!response.ok) {\r\n        throw new Error(\"fetch failed \" + url);\r\n      }\r\n      const contenttype = response.headers.get(\"content-type\");\r\n      if (contenttype?.includes(\"javascript\")) {\r\n        codetype = \"js\";\r\n      } else if (contenttype?.includes(\"json\")) {\r\n        codetype = \"json\";\r\n      } else {\r\n        throw new Error(\"invalid content-type \" + codetype);\r\n      }\r\n      return await response.text();\r\n    });\r\n    set(cachedurltotext, url, textsource);\r\n\r\n    if (!codetype) {\r\n      throw new Error();\r\n    }\r\n    return [textsource, codetype];\r\n  }\r\n}\r\nconst cachedurltotext: Record<string, string> = {};\r\n","export function ismodule(a: any): boolean {\r\n  return {}.toString.call(a) === \"[object Module]\";\r\n}\r\n","import { defineProperty, get } from \"./coreload\";\r\nimport { ismodule } from \"./ismodule\";\r\nimport { isplainobject } from \"./isplainobject\";\r\n\r\nexport function 定义default(\r\n  target: Record<string, any>,\r\n  def: { [x: string]: string; default: any } | Function\r\n) {\r\n  def = get(def, \"default\") ?? def;\r\n\r\n  if (!ismodule(def) && !isplainobject(def)) {\r\n    defineProperty(target, \"default\", {\r\n      enumerable: true,\r\n      get() {\r\n        return def;\r\n      }\r\n    });\r\n  }\r\n}\r\n","export function isArray(a: any): a is Array<any> {\r\n  return Array.isArray(a) && {}.toString.call(a) === \"[object Array]\";\r\n}\r\n","export function isFunction(it: any): it is Function {\r\n  const op = {}; // Object.prototype;\r\n  const ostring = op.toString;\r\n  const tag = ostring.call(it);\r\n  return (\r\n    (\"function\" === typeof it && tag === \"[object Function]\") ||\r\n    tag === \"[object AsyncFunction]\"\r\n  );\r\n}\r\n","import { isArray } from \"./isarray\";\r\nimport { isFunction } from \"./isfunction\";\r\n\r\ndefine.cmd = true;\r\ndefine.amd = true;\r\nfunction define(name: any, deps?: any, callback?: any) {\r\n  \"use strict\";\r\n\r\n  if (typeof name !== \"string\") {\r\n    callback = deps;\r\n    deps = name;\r\n    name = null;\r\n  }\r\n  if (!isArray(deps)) {\r\n    callback = deps;\r\n    deps = null;\r\n  }\r\n  if (!deps && isFunction(callback)) {\r\n    deps = [];\r\n  }\r\n  const defineglobalDefQueue: [string, string[], Function] = [\r\n    name,\r\n    deps,\r\n    callback\r\n  ];\r\n  console.log(defineglobalDefQueue);\r\n  return defineglobalDefQueue;\r\n}\r\nexport { define };\r\n","\"use strict\";\r\n\r\nimport { get, set } from \"./coreload\";\r\n\r\nimport { assertstring } from \"./assertstring\";\r\ntype Module = Record<any, any>;\r\nexport { createBlob };\r\nfunction createBlob(source: string) {\r\n  return URL.createObjectURL(\r\n    new Blob([source], { type: \"application/javascript\" })\r\n  );\r\n}\r\n\r\ntype dynamicimport = (url: string) => Promise<Module>;\r\nconst dynamicimportshimfun = (() => {\r\n  \"use strict\";\r\n\r\n  let dynamicimportshim: dynamicimport;\r\n\r\n  try {\r\n    dynamicimportshim = Function(\"u\", \"return import(u)\") as dynamicimport;\r\n  } catch (error) {\r\n    dynamicimportshim = async function(url: string): Promise<Module> {\r\n      assertstring(url);\r\n\r\n      url = new URL(url).href;\r\n\r\n      return await getnewimportpromise(url);\r\n    };\r\n  }\r\n  return dynamicimportshim;\r\n})();\r\nexport default dynamicimportshimfun;\r\nfunction getnewimportpromise(url: string): Promise<Module> {\r\n  const symbolkey = Symbol.for(\"import-\" + url);\r\n  return new Promise((resolve, reject) => {\r\n    const s = document.createElement(\"script\");\r\n    function clearsideeffect() {\r\n      removescript(s);\r\n      removeerrorlisten(errorhandler);\r\n      URL.revokeObjectURL(s.src);\r\n      s.onload = s.onerror = null;\r\n    }\r\n    function removeerrorlisten(f: (evt: ErrorEvent) => void) {\r\n      try {\r\n        window.removeEventListener(\"error\", f);\r\n      } catch (error) {}\r\n    }\r\n    function removescript(e: HTMLScriptElement) {\r\n      e.remove();\r\n    }\r\n    function errorhandler(e: ErrorEvent) {\r\n      console.warn(e.error);\r\n      reject(e.error);\r\n      clearsideeffect();\r\n    }\r\n    window.addEventListener(\"error\", errorhandler);\r\n    const topLevelBlobUrl = createBlob(\r\n      `import*as m from'${url}';\\nwindow[Symbol.for('${\"import-\" + url}')]=m`\r\n    );\r\n    s.type = \"module\";\r\n    s.src = topLevelBlobUrl;\r\n    s.async = true;\r\n    s.onload = () => {\r\n      if (Reflect.has(window, symbolkey)) {\r\n        const moduleoutput = get(window, symbolkey);\r\n        resolve(moduleoutput);\r\n        set(window, symbolkey, undefined);\r\n        clearsideeffect();\r\n      }\r\n    };\r\n    s.onerror = () => {\r\n      reject(new Error(\"import load failed from network\" + url));\r\n      clearsideeffect();\r\n    };\r\n    document.head.appendChild(s);\r\n  });\r\n}\r\n","import { defineProperty, get } from \"./coreload\";\r\nimport { isFunction } from \"./isfunction\";\r\n\r\nexport function esmdefinegetter(\r\n  moduleexport: Record<string, any>,\r\n  exportdefault: Record<string, any> | Function\r\n) {\r\n  if (\r\n    exportdefault &&\r\n    (isFunction(exportdefault) || typeof exportdefault === \"object\")\r\n  ) {\r\n    Object.keys(exportdefault).forEach(key => {\r\n      try {\r\n        defineProperty(moduleexport, key, {\r\n          enumerable: true,\r\n          get() {\r\n            return get(exportdefault, key);\r\n          }\r\n        });\r\n      } catch (error) {}\r\n    });\r\n  }\r\n}\r\n","export function getbaseurl(url: string) {\r\n  var objurl = new URL(url);\r\n  var a = objurl.pathname.split(\"/\");\r\n  a[a.length - 1] = \"\";\r\n  var path = objurl.origin + a.join(\"/\");\r\n  return path;\r\n}\r\n","export function 格式化url(baseurl: string, urlorname: string) {\r\n  if (\r\n    String(urlorname).startsWith(\"./\") ||\r\n    String(urlorname).startsWith(\"../\")\r\n  ) {\r\n    if (\r\n      !(\r\n        String(urlorname).endsWith(\".js\") ||\r\n        urlorname.endsWith(\".mjs\") ||\r\n        urlorname.endsWith(\".json\") ||\r\n        urlorname.endsWith(\".css\") ||\r\n        urlorname.endsWith(\".html\")\r\n      )\r\n    ) {\r\n      urlorname += \".js\";\r\n    }\r\n    urlorname = new URL(baseurl + urlorname).href;\r\n  }\r\n  return urlorname;\r\n}\r\n","import { assertstring } from \"./assertstring\";\r\nimport { cantfindError } from \"./cantfindError\";\r\nimport { PACKAGESTORE, 模块仓库中没有找到 } from \"./importcjsamdumd\";\r\nimport { packagealias } from \"./alias\";\r\n\r\nexport const myrequirefun = function requireinstead(packagename: string) {\r\n  assertstring(packagename);\r\n\r\n  const findpackage =\r\n    PACKAGESTORE[packagename] || PACKAGESTORE[packagealias[packagename]];\r\n  if (findpackage) {\r\n    Object.freeze(findpackage);\r\n    return findpackage.default ? findpackage.default : findpackage;\r\n  } else {\r\n    throw new cantfindError(模块仓库中没有找到 + packagename, packagename);\r\n  }\r\n};\r\n","import { getbaseurl } from \"./getbaseurl\";\r\nimport { assertstring } from \"./assertstring\";\r\n\r\nimport { 格式化url } from \"./formaturl\";\r\nimport { myrequirefun } from \"./myrequirefun\";\r\n\r\nexport const formatedurlrequire = (urlorname: string, url: string) => {\r\n  assertstring(urlorname);\r\n  if (\r\n    String(urlorname).startsWith(\"./\") ||\r\n    String(urlorname).startsWith(\"../\")\r\n  ) {\r\n    const formatedurl = getnormalizedurl(urlorname, url);\r\n    return myrequirefun(formatedurl);\r\n  } else {\r\n    return myrequirefun(urlorname);\r\n  }\r\n};\r\nexport function getnormalizedurl(relativeurl: string, url: string) {\r\n  if (\r\n    String(relativeurl).startsWith(\"./\") ||\r\n    String(relativeurl).startsWith(\"../\")\r\n  ) {\r\n    const baseurl = getbaseurl(url);\r\n    const formatedurl = 格式化url(baseurl, relativeurl);\r\n    return formatedurl;\r\n  } else {\r\n    return relativeurl;\r\n  }\r\n}\r\n","export function 非空对象(o: any) {\r\n  return !!(\r\n    typeof o !== \"object\" ||\r\n    Object.keys(o).length ||\r\n    JSON.stringify(o) !== \"{}\"\r\n  );\r\n}\r\n","import { 非空对象 } from \"./notemptyobj\";\r\n\r\nexport function 处理非es模块(exportmodule: any[]) {\r\n  if (非空对象(exportmodule[0])) {\r\n    const exportdefault = exportmodule[0];\r\n    return exportdefault;\r\n  } else if (非空对象(exportmodule[1])) {\r\n    const exportdefault = exportmodule[1];\r\n\r\n    return exportdefault;\r\n  }\r\n}\r\n","export const depssymbol = Symbol(\"deps\");\r\nexport const typesymbol = Symbol(\"type\");\r\n\r\nexport const urlsymbol = Symbol(\"url\");\r\nexport const sourcesymbol = Symbol(\"source\");\r\nexport type MODULETYPE = \"amd\" | \"cjs\" | \"esm\" | \"json\";\r\n\r\nexport interface MODULE extends Record<string, any> {\r\n  [Symbol.toStringTag]: \"Module\";\r\n  [depssymbol]: string[];\r\n  [typesymbol]: MODULETYPE;\r\n  [urlsymbol]: string;\r\n  [sourcesymbol]: string;\r\n}\r\n","/**\r\n * util-deps.js - The parser for dependencies\r\n * ref: tests/research/parse-dependencies/test.html\r\n * ref: https://github.com/seajs/crequire\r\n */\r\nvar REQUIRE_RE = /\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|\\/\\*[\\S\\s]*?\\*\\/|\\/(?:\\\\\\/|[^\\/\\r\\n])+\\/(?=[^\\/])|\\/\\/.*|\\.\\s*require|(?:^|[^$])\\brequire\\s*\\(\\s*([\"'])(.+?)\\1\\s*\\)/g;\r\nvar SLASH_RE = /\\\\\\\\/g;\r\n\r\nfunction parseDependencies(code: string): string[] {\r\n  var ret: string[] = [];\r\n\r\n  code.replace(SLASH_RE, \"\").replace(REQUIRE_RE, function(m, m1, m2, ...args) {\r\n    if (m2) {\r\n      ret.push(m2);\r\n    }\r\n    return \"\";\r\n  });\r\n\r\n  return ret;\r\n}\r\nexport { parseDependencies };\r\n","import { packagealias } from \"./alias\";\r\nimport cachedfetchtext, { CODETYPE } from \"./cachedfetchtext\";\r\nimport { 定义default } from \"./define-default\";\r\nimport { define } from \"./define.js\";\r\n\r\nimport dynamicimportshim from \"./dynamicimportshim.js\";\r\nimport { esmdefinegetter } from \"./esmdefinegetter\";\r\nimport { formatedurlrequire, getnormalizedurl } from \"./formatedurlrequire.js\";\r\nimport { 处理非es模块 } from \"./handlecjsmodule.js\";\r\nimport importcjsamdumd, { PACKAGESTORE } from \"./importcjsamdumd.js\";\r\nimport {\r\n  depssymbol,\r\n  MODULE,\r\n  MODULETYPE,\r\n  sourcesymbol,\r\n  typesymbol,\r\n  urlsymbol\r\n} from \"./module\";\r\nimport { myrequirefun } from \"./myrequirefun\";\r\nimport { parseDependencies } from \"./util-deps\";\r\nexport const { get, set, defineProperty } = Reflect;\r\n\r\nexport const 加载的模块没有输出 = \"加载的模块没有输出\";\r\n\r\nexport default async (url: string, packagename?: string) => {\r\n  if (packagename) {\r\n    packagealias[packagename] = url;\r\n  }\r\n\r\n  return await new Promise(主核心加载模块函数);\r\n  function 主核心加载模块函数(\r\n    resolve: (value?: any) => void,\r\n    reject: (reason?: any) => void\r\n  ) {\r\n    return ((resolve, reject) => {\r\n      return (async () => {\r\n        try {\r\n          return await (async () => {\r\n            let fetchpromisetext: string;\r\n            let codetype: CODETYPE | undefined;\r\n            try {\r\n              try {\r\n                [fetchpromisetext, codetype] = await cachedfetchtext(url);\r\n              } catch (e) {\r\n                console.warn(e);\r\n                reject(e);\r\n                return;\r\n              }\r\n              const moduleexport: MODULE = Object.create(null);\r\n              moduleexport[urlsymbol] = url;\r\n              let moduletype: MODULETYPE;\r\n              const scripttext = fetchpromisetext;\r\n              let modulesrcfun: string;\r\n              if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\r\n                defineProperty(moduleexport, Symbol.toStringTag, {\r\n                  value: \"Module\"\r\n                });\r\n              }\r\n              modulesrcfun = scripttext;\r\n              moduleexport[depssymbol] = [];\r\n              moduleexport[sourcesymbol] = modulesrcfun;\r\n\r\n              if (\"json\" === codetype) {\r\n                const moduleexportdefault = JSON.parse(scripttext);\r\n                console.log(\"检测到json模块 \" + url);\r\n\r\n                moduletype = \"json\";\r\n                esmdefinegetter(moduleexport, moduleexportdefault);\r\n                moduleexport[typesymbol] = moduletype;\r\n                Object.freeze(moduleexport);\r\n                PACKAGESTORE[url] = moduleexport;\r\n                resolve(moduleexport);\r\n                return;\r\n              } else {\r\n                try {\r\n                  const exports_exports = { [Symbol.toStringTag]: \"Module\" };\r\n                  const module = {\r\n                    exports: { [Symbol.toStringTag]: \"Module\" }\r\n                  };\r\n\r\n                  try {\r\n                    let isamd = false;\r\n                    const 模块加载函数 = new Function(\r\n                      \"require\",\r\n\r\n                      \"module\",\r\n                      \"exports\",\r\n                      \"define\",\r\n                      `\r\n                        \"use strict\";\\n/* ${url} */;\\n${scripttext};\\n/* ${url} */;\\n\r\n                        `\r\n                    );\r\n\r\n                    moduleexport[depssymbol] = parseDependencies(\r\n                      scripttext\r\n                    ).map(urlorname => {\r\n                      return getnormalizedurl(urlorname, url);\r\n                    });\r\n                    await importcjsamdumd(moduleexport[depssymbol]);\r\n                    let amdfactory: Function = () => {};\r\n\r\n                    const require_require = (name: string) =>\r\n                      formatedurlrequire(name, url);\r\n\r\n                    const define_define = (\r\n                      name: any,\r\n                      deps?: any,\r\n                      callback?: any\r\n                    ) => {\r\n                      const defineglobalDefQueue = define(name, deps, callback);\r\n                      isamd = true;\r\n                      amdfactory = defineglobalDefQueue[2];\r\n                      moduleexport[depssymbol] = defineglobalDefQueue[1].map(\r\n                        urlorname => {\r\n                          return getnormalizedurl(urlorname, url);\r\n                        }\r\n                      );\r\n                    };\r\n                    Object.assign(define_define, { amd: true, cmd: true });\r\n                    // define_define.cmd = true;\r\n                    // define_define.amd = true;\r\n                    模块加载函数.call(\r\n                      module.exports,\r\n                      require_require,\r\n\r\n                      module,\r\n                      exports_exports,\r\n                      define_define\r\n                    );\r\n\r\n                    if (isamd) {\r\n                      moduletype = \"amd\";\r\n                      await importcjsamdumd(moduleexport[depssymbol]);\r\n                      module.exports = amdfactory.call(\r\n                        module.exports,\r\n                        ...moduleexport[depssymbol].map((e: string) =>\r\n                          myrequirefun(e)\r\n                        )\r\n                      );\r\n                    } else {\r\n                      moduletype = \"cjs\";\r\n                    }\r\n\r\n                    const exportmodule = [\r\n                      exports_exports,\r\n                      module.exports ?? {}\r\n                    ];\r\n                    const usefulexport = 处理非es模块(exportmodule);\r\n\r\n                    if (usefulexport) {\r\n                      定义default(moduleexport, usefulexport);\r\n                      esmdefinegetter(moduleexport, usefulexport);\r\n                    }\r\n                  } catch (e) {\r\n                    console.warn(e);\r\n                    {\r\n                      if (e instanceof SyntaxError) {\r\n                        const topLevelBlobUrl = url;\r\n\r\n                        try {\r\n                          const exportdefault = await dynamicimportshim(\r\n                            topLevelBlobUrl\r\n                          );\r\n                          moduleexport[depssymbol] = [];\r\n                          moduletype = \"esm\";\r\n                          esmdefinegetter(moduleexport, exportdefault);\r\n                        } catch (e) {\r\n                          console.warn(e);\r\n                          reject(e);\r\n                          return;\r\n                        }\r\n                      } else {\r\n                        console.warn(e);\r\n                        reject(e);\r\n                        return;\r\n                      }\r\n                    }\r\n                  }\r\n                  moduleexport[typesymbol] = moduletype;\r\n                  PACKAGESTORE[url] = moduleexport;\r\n\r\n                  if (moduleexport.default) {\r\n                    esmdefinegetter(moduleexport, moduleexport.default);\r\n                  }\r\n\r\n                  Object.freeze(moduleexport);\r\n                  resolve(moduleexport);\r\n                  return;\r\n                } catch (e) {\r\n                  console.warn(e);\r\n                  reject(e);\r\n                  return;\r\n                }\r\n              }\r\n            } catch (e) {\r\n              console.warn(e);\r\n              reject(e);\r\n              return;\r\n            }\r\n          })();\r\n        } catch (e) {\r\n          console.warn(e);\r\n          reject(e);\r\n          return;\r\n        }\r\n      })();\r\n    })(resolve, reject);\r\n  }\r\n};\r\n","import { packagealias } from \"./alias\";\r\nimport { 同时发起多个字符串 } from \"./arrayimportall.js\";\r\nimport { assertstring } from \"./assertstring.js\";\r\nimport coreload, { get } from \"./coreload.js\";\r\nimport { getmodule } from \"./getmodule.js\";\r\nimport { PACKAGESTORE } from \"./importcjsamdumd\";\r\nimport { isArray } from \"./isarray.js\";\r\nimport { urlsymbol } from \"./module.js\";\r\nconst 输入的类型错误输入的类型必须是字符串或者数组或对象 =\r\n  \"The type entered is incorrect, the type entered must be a string or an array or an object\";\r\n\r\nexport const 传入的参数必须是个object =\r\n  \"The argument passed in must be an object\";\r\nexport type PlainObj = Record<any, any>;\r\n\r\nexport default oldimportcjsamdumd;\r\n\r\nasync function oldimportcjsamdumd(url: any, packagename?: any): Promise<any> {\r\n  \"use strict\";\r\n\r\n  if (isArray(url)) {\r\n    return await (async (...args) => {\r\n      let suoyouimportpromise = [];\r\n      const 传入参数arr = args;\r\n      try {\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      } catch (error) {\r\n        console.warn(error);\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      } finally {\r\n        suoyouimportpromise = await 同时发起多个字符串(\r\n          传入参数arr,\r\n          oldimportcjsamdumd\r\n        );\r\n      }\r\n      return suoyouimportpromise;\r\n    })(...url);\r\n  } else if (typeof url === \"string\" || typeof packagename === \"string\") {\r\n    assertstring(url);\r\n    if (packagename) {\r\n      packagealias[packagename] = url;\r\n    }\r\n    try {\r\n      url = new URL(url).href;\r\n    } catch {\r\n      url = packagealias[url] ?? url;\r\n    }\r\n    return await (async (url: string, packagename?: string) => {\r\n      try {\r\n        url = new URL(url).href;\r\n      } catch {\r\n        throw Error(\"invalid url \" + url);\r\n      }\r\n      if (typeof packagename === \"undefined\") {\r\n        packagename = new URL(url).href;\r\n      }\r\n\r\n      if (\r\n        typeof PACKAGESTORE[packagename] !== \"undefined\" &&\r\n        get(PACKAGESTORE[packagename], urlsymbol) === url\r\n      ) {\r\n        return getmodule(packagename);\r\n      } else if (\r\n        typeof PACKAGESTORE[url] !== \"undefined\" &&\r\n        get(PACKAGESTORE[url], urlsymbol) === url\r\n      ) {\r\n        return getmodule(url);\r\n      } else {\r\n        return await coreload(url, packagename);\r\n      }\r\n    })(url, packagename);\r\n  } else {\r\n    throw new TypeError(输入的类型错误输入的类型必须是字符串或者数组或对象);\r\n  }\r\n}\r\n","\"use strict\";\r\n\r\nimport { cantfindError } from \"./cantfindError\";\r\nimport { getmodule } from \"./getmodule\";\r\nimport { isplainobject } from \"./isplainobject\";\r\nimport { isurl } from \"./isurl\";\r\nimport oldimportcjsamdumd from \"./oldimport\";\r\nimport { get } from \"./coreload\";\r\nimport { MODULE } from \"./module\";\r\n\r\nexport const 模块仓库中没有找到 =\r\n  \"Cannot find module in packagestore, Not found in module repository, \";\r\n\r\nexport const 参数必须为字符串 = \"Parameter must be a string\";\r\n(\"use strict\");\r\nexport const 字符串不能为空 = \"String cannot be empty\";\r\n\r\nexport const 补充加载依赖的模块网址 = \"补充加载依赖的模块网址\";\r\n\r\nexport default function importcjsamdumd(url: string[]): Promise<MODULE[]>;\r\nexport default function importcjsamdumd(\r\n  url: string,\r\n  packagename?: string\r\n): Promise<MODULE>;\r\n\r\nexport default async function importcjsamdumd(\r\n  url: any,\r\n  packagename?: any\r\n): Promise<any> {\r\n  let tryfailedtimes = 0;\r\n\r\n  return await oldimportcjsamdumd(url, packagename).catch(handleerror);\r\n  async function retryimport(url1: any, nam1: any, url2: any, name2: any) {\r\n    try {\r\n      await oldimportcjsamdumd(url1, nam1).catch(handleerror);\r\n      return await oldimportcjsamdumd(url2, name2);\r\n    } catch (error) {\r\n      console.warn(error);\r\n      return await oldimportcjsamdumd(url2, name2).catch(handleerror);\r\n    }\r\n  }\r\n  async function handleerror(e: Error): Promise<any> {\r\n    console.warn(e);\r\n    if (tryfailedtimes > 5) {\r\n      throw new Error(\r\n        \"Try loading, too many failures, give up trying!\" +\r\n          JSON.stringify(url) +\r\n          JSON.stringify(packagename)\r\n      );\r\n    }\r\n    tryfailedtimes++;\r\n\r\n    if (e instanceof cantfindError) {\r\n      const eurlorname = e.urlorname;\r\n      if (isurl(eurlorname)) {\r\n        console.log(补充加载依赖的模块网址, eurlorname);\r\n        return await retryimport(eurlorname, undefined, url, packagename);\r\n      } else if (isplainobject(url) && Reflect.has(url, eurlorname)) {\r\n        return await retryimport(\r\n          get(url, eurlorname),\r\n          eurlorname,\r\n          url,\r\n          packagename\r\n        );\r\n      } else {\r\n        throw e;\r\n      }\r\n    } else {\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n\r\nconst PACKAGESTORE: Record<string, Record<string | symbol, any>> = {};\r\nconst REQUIREPACKAGE = getmodule;\r\n\r\nexport { PACKAGESTORE, REQUIREPACKAGE };\r\n"],"names":["cantfindError","Error","[object Object]","message","urlorname","super","this","assertstring","s","TypeError","字符串不能为空","参数必须为字符串","packagealias","getmodule","packagename","findpackage","PACKAGESTORE","Object","freeze","模块仓库中没有找到","isplainobject","o","toString","call","isurl","url","flag","URL","href","error","async","同时发起多个字符串","a","importcjsamdumd","Promise","all","map","e","codetype","cachedtext","get","cachedurltotext","textsource","fetch","then","response","ok","contenttype","headers","includes","text","set","ismodule","定义default","target","def","defineProperty","enumerable","isArray","Array","isFunction","it","op","ostring","tag","define","cmd","amd","name","deps","callback","defineglobalDefQueue","console","log","createBlob","source","createObjectURL","Blob","type","dynamicimportshimfun","dynamicimportshim","Function","getnewimportpromise","symbolkey","Symbol","for","resolve","reject","document","createElement","clearsideeffect","removescript","removeerrorlisten","errorhandler","revokeObjectURL","src","onload","onerror","f","window","removeEventListener","remove","warn","addEventListener","topLevelBlobUrl","Reflect","has","moduleoutput","undefined","head","appendChild","esmdefinegetter","moduleexport","exportdefault","keys","forEach","key","getbaseurl","objurl","pathname","split","length","path","origin","join","格式化url","baseurl","String","startsWith","endsWith","myrequirefun","requireinstead","default","formatedurlrequire","formatedurl","getnormalizedurl","relativeurl","非空对象","JSON","stringify","处理非es模块","exportmodule","depssymbol","typesymbol","urlsymbol","sourcesymbol","REQUIRE_RE","SLASH_RE","parseDependencies","code","ret","replace","m","m1","m2","args","push","主核心加载模块函数","fetchpromisetext","cachedfetchtext","create","moduletype","scripttext","modulesrcfun","toStringTag","value","moduleexportdefault","parse","exports_exports","module","exports","isamd","模块加载函数","amdfactory","require_require","define_define","assign","usefulexport","SyntaxError","输入的类型错误输入的类型必须是字符串或者数组或对象","oldimportcjsamdumd","suoyouimportpromise","传入参数arr","coreload","补充加载依赖的模块网址","tryfailedtimes","catch","handleerror","retryimport","url1","nam1","url2","name2","eurlorname","REQUIREPACKAGE"],"mappings":"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"}